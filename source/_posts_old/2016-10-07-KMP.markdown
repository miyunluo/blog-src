---
layout:     post
title:      "KMP算法之鄙见"
tags:
    - Algorithm
---

> “想起了那晚站在代码巅峰的ZK大神. ”


## 前言

前一阵子看**《编译原理 第二版》**，在**"3.4.5 &ensp; 3.4节的练习"**(P86)中看到了这么一道题（*练习3.4.2*），大意是要在一个字符串中识别一个子字符串，于是它定义了一个叫“失效函数”的东西，题目第二段还提到个算法是由 Knuth, Morris, Pratt 这三个人提出的。看着这三个人的名字觉得有些眼熟，首字母拼起来不就是 KMP 么。

其实这就是 **KMP** 算法，解决在字符串中找子字符串的问题。在这里给没听过子字符串概念的同学解释一下子字符串，子字符串就是删除某前缀和某后缀后得到的字符串。比如，String A = miyunluo，String B = yun，那么 B 就是 A 的子串。

讲道理KMP算法的讲解，网上能搜出来一卡车，套路都差不多，基本上都涉及到什么 **移动** 再加 **Next[]** 数组，不管你怎么看，反正我在差不多一年前看这些东西是没看懂（还是在ZK大神讲解的情况下...）。于是借着这道题，再加上又看了一些博客，我也来写一写KMP，尽量写的清楚，希望大家可以看懂。

---

## 正文

对于题目中的失效函数，放在后面来说，我们先来看看KMP算法的过程。

借用 **练习3.3.7** 中的例子，为了使得过程可以尽量长一些，对题目(1)的串做一些修改。设String A = **abababaababac**, String B = **ababac**，下面运行KMP算法。

用指针 i, j 表示 A，B 当前匹配的位置，即就是A[i-j+1 ... i] 与 B[1 ... j]完全相等。对于整个过程而言，i 是不断增加的，j 做相应的调整，当 j 等于B的长度时，就结束了，匹配成功。也就是说，我们顺序遍历A串，某一时刻已经满足A[i-j+1 ... i] == B[1 ... j]，但是下一位B[j+1] != A[i+1]，这时就要调整 j 的值（当然减小 j），设减小后是 j' ，使得B[1 ... j']依然可以与A[i-j'+1 ... i]匹配（注意这里A的起始匹配地址已经变成了i-j'+1），当然这里的 j' 越大越好。接下来看过程。

i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6&ensp;7&ensp;8&ensp;9<br>
A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>
B =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;c<br>
j&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6

现在 A 和 B 匹配到了 i = 5, j = 5 的地方，但是二者的下一位 A[i+1] 与 B[j+1] 并不相等，说明这时继续向后匹配失败，需要减小 j 的值，使得 j' 可以在 i = 5 的地方继续匹配，现在 A[1 ... 5] = ababa，我们发现 j' = 3 时 B[1 ... 3] = aba 可以与 A[5-3+1 ... 5] 即 A[3 ... 5]匹配，于是新的 j = 3.

i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6&ensp;7&ensp;8&ensp;9<br>
A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>
B =&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;c<br>
j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;**3**&ensp;4&ensp;5&ensp;6

继续增加 i ，同时向后匹配 j ，当匹配到 i = 7, j = 5 时，又出现下一位不相等的情况

i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;**7**&ensp;8&ensp;9<br>
A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>
B =&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;c<br>
j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6

由上一步知道，此时又应该将 j 减小为 j ＝ 3。这样可以使得 A[5 ... 7] == B[1 ... 3].

i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;**7**&ensp;8&ensp;9<br>
A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>
B =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;c<br>
j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1&ensp;2&ensp;**3**&ensp;4&ensp;5&ensp;6

继续向后匹配，又出现了 A[i+1] != B[j+1] 的情况看。这时需要减小 j ，使得 B[1 ... j]仍然可以在 i = 7 处匹配，于是只能将 j 减小为1.

i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;**7**&ensp;8&ensp;9<br>
A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>
B =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**a**&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>
j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**1**&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6

此时B紧接着第二位就不匹配了，j 已经减小到了最小值1，说明j已经无法调整了，那我们只好放弃 i = 7,从下一个与B[1]相等的地方开始。在目前的情况下，很碰巧，下一个A[i] == B[1] 的地方就是 i ＝ 8，于是我们从 i = 8 的地方重新开始。

i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6&ensp;7&ensp;**8**&ensp;9<br>
A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;**a**&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>
B =&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**a**&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>
j&ensp;=&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;**1**&ensp;2&ensp;3&ensp;4&ensp;5&ensp;6

继续向后，匹配完成。

KMP的过程便是如此，但是我们每次要怎么减小 j 到适当的值似乎还没有解决。这就是课本上提到的失效函数，用它来解决当我们某一步匹配失效的时候，调整 j 的问题。假设我们用这个失效函数预先处理一下 B 字符串，得到了一个数组，叫它 Pre 数组好了（*先不用管它是如何实现的*），保存的值是，当某一个 j 失效时，应该调整为的 j' 值，借用上面的例子，第一次失效时，j = 5，应该调整为 j' = 3，那么 Pre[5]的值就是 3，第二次失效时 j = 3，应该调整为 j' = 1，那么 Pre[3] 的值就是 1。因此，当某一个 j 失效时，我们只要查一下 Pre[] 数组，就可以知道我们要减小到的 j' 值，即 j' = Pre[j]。

有了 Pre[] 数组，我们就可以写出 KMP 算法的代码了，设 A 串长为 n，B 串长为 m。

``` c++
int i, j = 0;
for(i = 1;i<=n;++i)
{
	while(j>0 && B[j+1] != A[i]) j = Pre[j];
	if(B[j+1] == A[i]) j = j+1;
	if(j == m)
	{
		cout << "匹配开始于: "<< i-m << endl;
		j = Pre[j];
	}
}
```
现在考虑 Pre[] 这个数组的意义与这个数组如何得到。还是用上面的例子。

i&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6&ensp;7&ensp;8&ensp;9<br>
A =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;b&ensp;a&ensp;a&ensp;b&ensp;a&ensp;b&ensp;a&ensp;c<br>
B =&ensp;a&ensp;b&ensp;a&ensp;b&ensp;**a**&ensp;c<br>
j&ensp;=&ensp;1&ensp;2&ensp;3&ensp;4&ensp;**5**&ensp;6

现在相当于 A B 两个字符串都是从头开始比较的，但是在 i = 5, j = 5 时发现无法再向后匹配了，比较直观的做法是，放弃这次比较，从 i = 2 的地方开始与 B 字符串重新比较，这样的时间复杂度显然是 O(mn) 的，因为我们没有考虑 B 字符串本身的一些特性。对于 j ＝ 5，对应的B的前缀为ababa，我们发现 B[1 ... 3] == B[3 ... 5] == aba，正是基于此，我们可以减小 j到3，（相当于后移B）使得此时在 i = 5, j = 3 处又可以继续向后进行。

从上面的解释中，我们可以看出求 Pre[] 数组，就相当于对于 B 的每一个前缀 B' ，求 B’ 的**最长相同前缀与后缀**。代码如下

``` c++
int i, j =0;
Pre[1] = 0;
for(i = 2;i<=m;++i)
{
	while(j>0 && B[j+1] != B[i]) j = Pre[j];
	if(B[j+1] == B[i]) j = j+1;
	Pre[i] = j;
}
```
为什么这个代码与 KMP 的代码如此相似，没错，你可以这么想，现在要求 B 的**所有前缀** 的 **最长相同前缀与后缀**（有点绕），那么就相当于是 B 的自匹配嘛。指针 i 所指的位置，就是 B'结束的位置，即 B' = B[1 ... i]（B'现在是B的一个前缀）, j 指针的位置就是 B' 的一个前缀，这不就是 B' 的前缀与 B' 的后缀匹配了嘛。

以上就是传说中的 KMP 算法。<br>
写的好累＝。＝
